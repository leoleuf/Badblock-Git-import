package fr.badblock.toenga.instance;

import java.io.IOException;
import java.net.Socket;
import java.util.Arrays;
import java.util.Map;

import fr.badblock.api.common.sync.node.NodeState;
import fr.badblock.api.common.sync.node.ToengaInstanceStatus;
import fr.badblock.toenga.models.ToengaModel;

/**
 * Represents a Toenga instance. This can be local or remote, off or on, ...
 * @author LeLanN
 */
public abstract class ToengaInstance
{
	private ToengaInstanceStatus status = new ToengaInstanceStatus(Arrays.asList(), 0, 0, 0, NodeState.ACCEPT_NEW_CONNECTIONS);
	
	/**
	 * @return Instance's ID.
	 */
	public abstract String getId();

	/**
	 * @return Instance's nickname. null if the instance has no nickname.
	 */
	public abstract String getNickname();
	
	/**
	 * Get model of the instance
	 * @return A ToengaModel
	 */
	public abstract ToengaModel getModel();

	/**
	 * Get the instance cluster
	 * @return A String
	 */
	public abstract String getCluster();
	
	/**
	 * Get instance data, generated by modules
	 * @return A map
	 */
	public abstract Map<String, Object> getData();
		
	/**
	 * @return True if the instance is started. Otherwise, false.
	 */
	public abstract boolean isStarted();
	
	/**
	 * @return True if the instance is destroyed. Otherwise, false.
	 */
	public abstract boolean isDestroyed();

	/**
	 * Start the instance.
	 */
	public abstract void start() throws IOException;
	
	/**
	 * Close the instance.
	 */
	public abstract void close();
	
	/**
	 * Restart the instance.
	 */
	public abstract void restart();
	
	/**
	 * Destroy the instance.
	 */
	public abstract void destroy();

	/**
	 * @return A Socket that redirect instance's I/O
	 */
	public abstract Socket getConsole();
	
	/**
	 * Update instance status
	 * @param status The status
	 */
	public void setInstanceStatus(ToengaInstanceStatus status)
	{
		this.status = status;
		//FIXME
	}
	
	/**
	 * Get last received instance status
	 * @return A ToengaInstanceStatus
	 */
	public ToengaInstanceStatus getInstanceStatus()
	{
		return this.status;
	}
}

package fr.badblock.game.core112R1.listeners.packets;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockState;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Item;
import org.bukkit.inventory.ItemStack;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.wrappers.nbt.NbtBase;
import com.comphenix.protocol.wrappers.nbt.NbtCompound;
import com.comphenix.protocol.wrappers.nbt.NbtFactory;
import com.comphenix.protocol.wrappers.nbt.NbtList;
import com.google.common.io.BaseEncoding;

import fr.badblock.gameapi.GameAPI;

public class SkullExploitListener
  extends PacketAdapter
{
  public SkullExploitListener(GameAPI plugin)
  {
    super(plugin, new PacketType[] { PacketType.Play.Client.SET_CREATIVE_SLOT });
  }
  
  public void onPacketReceiving(PacketEvent event)
  {
    ItemStack stack = (ItemStack)event.getPacket().getItemModifier().read(0);
    if (isExploit(stack)) {
      getPlugin().getLogger().warning("Player " + event.getPlayer().getName() + " just tried to use the skull exploit!");
    }
  }
  
  public static boolean isExploit(ItemStack stack)
  {
    try
    {
      if (stack == null) {
        return false;
      }
      if ((stack.getType() == Material.SKULL) || (stack.getType() == Material.SKULL_ITEM)) {
        if (stack.getDurability() == 3)
        {
          NbtCompound tag = (NbtCompound)NbtFactory.fromItemTag(stack);
          if (isExploit(tag)) {
            return true;
          }
        }
      }
    }
    catch (Exception localException) {}
    return false;
  }
  
  @SuppressWarnings("rawtypes")
public static boolean isExploit(NbtCompound root)
  {
    if (root.containsKey("SkullOwner"))
    {
      NbtCompound skullOwner = root.getCompound("SkullOwner");
      if (skullOwner.containsKey("Properties"))
      {
        NbtCompound properties = skullOwner.getCompound("Properties");
        if (properties.containsKey("textures"))
        {
          NbtList<NbtBase> textures = properties.getList("textures");
          for (NbtBase texture : textures.asCollection()) {
            if ((texture instanceof NbtCompound))
            {
              if (((NbtCompound)texture).containsKey("Value"))
              {
                if (((NbtCompound)texture).getString("Value").trim().length() > 0) {
                  try
                  {
                    String decoded = new String(BaseEncoding.base64().decode(((NbtCompound)texture).getString("Value")));
                    JSONObject object = (JSONObject)new JSONParser().parse(decoded);
                    if (object.containsKey("textures")) {
                      object = (JSONObject)object.get("textures");
                    }
                    if (object.containsKey("SKIN")) {
                      object = (JSONObject)object.get("SKIN");
                    }
                    if (!object.containsKey("url"))
                    {
                      root.remove("SkullOwner");
                      return true;
                    }
                    if (((String)object.get("url")).trim().length() == 0)
                    {
                      root.remove("SkullOwner");
                      return true;
                    }
                    return false;
                  }
                  catch (Exception e)
                  {
                    root.remove("SkullOwner");
                    return true;
                  }
                }
                root.remove("SkullOwner");
                return true;
              }
              root.remove("SkullOwner");
              return true;
            }
          }
        }
      }
    }
    if (root.containsKey("Owner"))
    {
      NbtCompound skullOwner = root.getCompound("Owner");
      if (skullOwner.containsKey("Properties"))
      {
        NbtCompound properties = skullOwner.getCompound("Properties");
        if (properties.containsKey("textures"))
        {
          NbtList<NbtBase> textures = properties.getList("textures");
          for (NbtBase texture : textures.asCollection()) {
            if ((texture instanceof NbtCompound))
            {
              if (((NbtCompound)texture).containsKey("Value"))
              {
                if (((NbtCompound)texture).getString("Value").trim().length() > 0) {
                  try
                  {
                    String decoded = new String(BaseEncoding.base64().decode(((NbtCompound)texture).getString("Value")));
                    JSONObject object = (JSONObject)new JSONParser().parse(decoded);
                    if (object.containsKey("textures")) {
                      object = (JSONObject)object.get("textures");
                    }
                    if (object.containsKey("SKIN")) {
                      object = (JSONObject)object.get("SKIN");
                    }
                    if (!object.containsKey("url"))
                    {
                      root.remove("Owner");
                      return true;
                    }
                    if (((String)object.get("url")).trim().length() == 0)
                    {
                      root.remove("Owner");
                      return true;
                    }
                    return false;
                  }
                  catch (Exception e)
                  {
                    root.remove("Owner");
                    return true;
                  }
                }
                root.remove("Owner");
                return true;
              }
              root.remove("Owner");
              return true;
            }
          }
        }
      }
    }
    return false;
  }
  
  public static void cleanChunk(Chunk chunk)
  {
    List<Block> heads = new ArrayList<>();
    for (BlockState state : chunk.getTileEntities()) {
      if ((state != null) && ((state.getType() == Material.SKULL) || (state.getType() == Material.SKULL_ITEM))) {
        heads.add(state.getBlock());
      }
    }
    for (Block head : heads) {
      try
      {
        NbtCompound root = NbtFactory.readBlockState(head);
        if (isExploit(root))
        {
          System.out.println("Removing exploit block, " + head.getLocation());
          head.setType(Material.AIR);
        }
      }
      catch (Exception localException) {}
    }
    for (Entity e : Arrays.asList(chunk.getEntities())) {
      if ((e instanceof Item))
      {
        Item item = (Item)e;
        if (isExploit(item.getItemStack()))
        {
          item.remove();
          System.out.println("Removing exploit item entity, " + item.getLocation());
        }
      }
    }
  }
  
}

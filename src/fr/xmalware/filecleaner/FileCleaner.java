package fr.xmalware.filecleaner;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class FileCleaner {

	public static void main(String[] args) {
		if (args.length != 2) {
			System.out.println("Usage: <clean/check> <days>");
			return;
		}
		String type = args[0];
		int days = -1;
		try {
			days = Integer.parseInt(args[1]);
		}catch(Exception error) {
			System.out.println("Please set a number.");
			return;
		}
		if (type.equalsIgnoreCase("check")) {
			System.out.println("Looking for files...");
			ArrayList<File> files = new ArrayList<>();
			listf(".", files);
			System.out.println("Total Files: " + files.size());
			long minusTimestamp = System.currentTimeMillis() - (days * 86_400_000L);
			List<File> expiredFiles = new ArrayList<>();
			for (File file : files)
				if (file != null && file.lastModified() < minusTimestamp)
					expiredFiles.add(file);
			System.out.println("Expired Files: " + expiredFiles.size());
		}else if (type.equalsIgnoreCase("clean")) {
			System.out.println("Looking for files...");
			ArrayList<File> files = new ArrayList<>();
			listf(".", files);
			System.out.println("Total Files: " + files.size());
			long minusTimestamp = System.currentTimeMillis() - (days * 86_400_000L);
			List<File> expiredFiles = new ArrayList<>();
			for (File file : files)
				if (file != null && file.lastModified() < minusTimestamp)
					expiredFiles.add(file);
			System.out.println("Expired Files: " + expiredFiles.size());
			System.out.println("Deleting " + expiredFiles.size() + " Files...");
			expiredFiles.parallelStream().forEach(file -> file.delete());
			System.out.println("Deleted " + expiredFiles.size() + " Files!");
			System.out.println("Looking for files...");
			files = new ArrayList<>();
			listf(".", files);
			System.out.println("Remaining Files: " + files.size());
		}else{
			System.out.println("Usage: <clean/check> <days>");
		}
	}

	public static void listf(String directoryName, ArrayList<File> files) {
		File directory = new File(directoryName);
		File[] fList = directory.listFiles();
		Arrays.stream(fList).parallel().forEach(file -> {
			if (file.isFile()) files.add(file);
			else if (file.isDirectory()) listf(file.getAbsolutePath(), files);
		});
	}

}

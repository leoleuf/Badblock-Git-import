package fr.xmalware.teamspeakbot;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

import com.github.theholywaffle.teamspeak3.TS3Api;
import com.github.theholywaffle.teamspeak3.TS3Config;
import com.github.theholywaffle.teamspeak3.TS3Query;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

import fr.xmalware.teamspeakbot.channels.ConfigChannel;
import fr.xmalware.teamspeakbot.db.BadblockDatabase;
import fr.xmalware.teamspeakbot.features.DoubleAuth;
import fr.xmalware.teamspeakbot.logs.ChatColor;
import fr.xmalware.teamspeakbot.logs.Log;
import fr.xmalware.teamspeakbot.utils.ConfigUtils;
import fr.xmalware.teamspeakbot.utils.FileUtils;
import lombok.Data;

@Data
public class TeamSpeak
{

	private TS3Api			api				= null;
	private	Gson			gson;
	private	JsonObject		configuration	= new JsonObject();
	private List<ConfigChannel> 	channels		= new ArrayList<>();

	public TeamSpeak()
	{
		setConfiguration(FileUtils.loadConfiguration());
		setGson(new GsonBuilder().setPrettyPrinting().create());
		// Auto reboot every 10 minutes
		new Timer().schedule(new TimerTask()
		{
			@Override
			public void run()
			{
				Log.log(ChatColor.PURPLE + "[BadSpeakDocker] " + ChatColor.CYAN + "[INFO] " + ChatColor.WHITE + "Redémarrage automatique...");
				System.exit(-1);
			}
		}, 600_000);
	}

	void load()
	{
		Log.log(ChatColor.PURPLE + "[BadSpeakDocker] " + ChatColor.CYAN + "[INFO] " + ChatColor.WHITE + "Chargement de la configuration...");
		loadConfiguration();
		Log.log(ChatColor.PURPLE + "[BadSpeakDocker] " + ChatColor.GREEN + "[SUCCÈS] " + ChatColor.WHITE + "Configuration chargée !");
		Log.log(ChatColor.PURPLE + "[BadSpeakDocker] " + ChatColor.CYAN + "[INFO] " + ChatColor.WHITE + "Chargement de l'écoute...");
		TeamSpeakListener.load(getApi());
		Log.log(ChatColor.PURPLE + "[BadSpeakDocker] " + ChatColor.GREEN + "[SUCCÈS] " + ChatColor.WHITE + "Écoute chargée !");
		Log.log(ChatColor.PURPLE + "[BadSpeakDocker] " + ChatColor.CYAN + "[INFO] " + ChatColor.WHITE + "Chargement des canaux à la demande...");
		ChannelLoader.load();
		Log.log(ChatColor.PURPLE + "[BadSpeakDocker] " + ChatColor.GREEN + "[SUCCÈS] " + ChatColor.WHITE + "Canaux à la demande chargés !");
	}

	void loadConfiguration()
	{
		final TS3Config config = new TS3Config();
		JsonObject configObject = new JsonObject();
		String hostname = ConfigUtils.get(getGson(), configObject, "hostname", "ts.badblock.fr").getAsString();
		config.setHost(hostname);
		final TS3Query query = new TS3Query(config);
		query.connect();
		setApi(query.getApi());
		String username = ConfigUtils.get(getGson(), configObject, "username", "serveradmin").getAsString();
		String password = ConfigUtils.get(getGson(), configObject, "password", "bts2017new").getAsString();
		int virtualServer = ConfigUtils.get(getGson(), configObject, "virtualServer", 1).getAsInt();
		String nickname = ConfigUtils.get(getGson(), configObject, "nickname", "BadServer").getAsString();
		getApi().login(username, password);
		getApi().selectVirtualServerById(virtualServer);
		String s = nickname.replace("%", Integer.toString(new Random().nextInt(Integer.MAX_VALUE)));
		getApi().setNickname(s);
		getApi().moveClient(getApi().getClientByNameExact(s, false).getId(), DoubleAuth.doubleAuthChannel);
		getConfiguration().add("configuration", configObject);
		JsonElement channels = getConfiguration().get("channels");
		if (channels != null)
		{
			channels.getAsJsonArray().forEach(jsonElement -> TeamSpeak.this.getChannels().add(new ConfigChannel(jsonElement.getAsJsonObject())));
		}
		else
		{
			JsonArray channel = new JsonArray();
			channel.add(new ConfigChannel(new JsonObject()).getJsonObject());
			getConfiguration().add("channels", channel);
		}
		String host = "lucie.badblock.fr";
		int port = 15486;
		String database = "site";
		BadblockDatabase.getInstance().connect(host, port, "site", "iLU5J3F2Y4356iBw6P9f8h92m4Y4h62BdTQk2FjvUc6y66NWYJa6WNyfXJ9r8vp6mpL5642nmvJ8vRcpT4YF4teYcYwGn5wE3pCrYw37RrqGC429836xN7qiZRNyWK", database);
		FileUtils.saveConfiguration(getConfiguration());
	}

}

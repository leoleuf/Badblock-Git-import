package fr.xmalware.teamspeakbot;

import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.TreeMap;
import java.util.stream.Collectors;

import com.github.theholywaffle.teamspeak3.api.ChannelProperty;
import com.github.theholywaffle.teamspeak3.api.wrapper.Channel;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

import fr.xmalware.teamspeakbot.channels.ConfigChannel;
import fr.xmalware.teamspeakbot.channels.TempChannel;
import fr.xmalware.teamspeakbot.logs.ChatColor;
import fr.xmalware.teamspeakbot.logs.Log;

public class ChannelLoader {

	public static void load() {
		TeamSpeak teamSpeak = Main.getTeamSpeak();
		new Thread("TeamSpeak/Channels")
		{
			@Override
			public void run()
			{
				while (true)
				{
					List<ConfigChannel> channels = teamSpeak.getChannels();
					long timeBetween = 100;
					long start = System.currentTimeMillis();
					ChannelLoader.run(teamSpeak, channels);
					long end = System.currentTimeMillis() - start;
					timeBetween -= end;
					if (timeBetween > 0)
					{
						try {
							Thread.sleep(timeBetween);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}	
					}

				}
			}
		}.start();
	}

	private static void run(TeamSpeak teamSpeak, List<ConfigChannel> channels)
	{
		List<Channel> teamspeakChannels = teamSpeak.getApi().getChannels();
		for (ConfigChannel channel : channels)
		{
			Optional<Channel> parent = teamspeakChannels.stream().filter(ch -> ch.getName().equalsIgnoreCase(channel.getParent()) && ch.isPermanent()).findAny();
			if (!parent.isPresent())
			{
				System.out.println("Unknown parent channel: " + channel.getParent());
				return;
			}
			Channel teamspeakChannel = parent.get();
			int parentId = teamspeakChannel.getId();
			List<Channel> currentChannels = teamspeakChannels.stream().filter(ch -> ch.getName().startsWith(channel.getPrefix()) && ch.isPermanent()).collect(Collectors.toList());
			List<Entry<Channel, String>> currentChannelsId = currentChannels.stream().map(ch -> new AbstractMap.SimpleEntry<>(ch, ch.getName().replaceAll(channel.getPrefix(), "").split(" ")[0])).collect(Collectors.toList());
			Map<Channel, String> channelMap = new HashMap<>();
			for (Entry<Channel, String> entry : currentChannelsId)
			{
				channelMap.put(entry.getKey(), entry.getValue());
			}
			channelMap = sortByValue(channelMap);
			int id = 0;
			int availableChannels = 0;
			boolean recalcChannels = false;
			for(Entry<Channel, String> entry : channelMap.entrySet())
			{
				int toId = Integer.valueOf(entry.getValue());
				if (id == toId)
				{
					int index = id + 1;
					Channel teamSpeakChannel = entry.getKey();
					if (teamSpeakChannel.getTotalClients() == 0)
					{
						if (channelMap.size() > index)
						{
							Log.log(ChatColor.PURPLE + "[BadSpeakDocker] " + ChatColor.GREEN + "[SUCCÈS] " + ChatColor.WHITE + "Canal en trop supprimé: " + teamSpeakChannel.getName());
							teamSpeak.getApi().deleteChannel(teamSpeakChannel.getId());
						}
						else
						{
							availableChannels++;
							if (!channel.getFill().containsKey(teamSpeakChannel.getId()) || channel.getFill().get(teamSpeakChannel.getId()))
							{
								channel.getFill().put(teamSpeakChannel.getId(), false);
								Iterator<JsonElement> iterator = channel.getUnfillPermissions().iterator();
								while (iterator.hasNext())
								{
									JsonElement jsonElement = iterator.next();
									JsonObject jsonObject = jsonElement.getAsJsonObject();
									String key = jsonObject.get("key").getAsString();
									int value = jsonObject.get("value").getAsInt();
									teamSpeak.getApi().addChannelPermission(teamSpeakChannel.getId(), key, value);
								}
								Map<ChannelProperty, String> map = new HashMap<>();
								iterator = channel.getUnfillParameters().iterator();
								String channelName = channel.getPrefix() + id;
								while (iterator.hasNext())
								{
									JsonElement jsonElement = iterator.next();
									JsonObject jsonObject = jsonElement.getAsJsonObject();
									String key = jsonObject.get("key").getAsString();
									String value = jsonObject.get("value").getAsString();
									ChannelProperty channelProperty = getChannelProperty(key);
									if (channelProperty.equals(ChannelProperty.CHANNEL_NAME))
									{
										value = channelName + value;
										System.out.println(value);
									}
									map.put(channelProperty, value);
								}
								Log.log(ChatColor.PURPLE + "[BadSpeakDocker] " + ChatColor.GREEN + "[SUCCÈS] Edit channel : " + Main.getTeamSpeak().getGson().toJson(map));
								teamSpeak.getApi().editChannel(teamSpeakChannel.getId(), map);
							}
						}
					}
					else
					{
						if (!channel.getFill().containsKey(teamSpeakChannel.getId()) || !channel.getFill().get(teamSpeakChannel.getId()))
						{
							channel.getFill().put(teamSpeakChannel.getId(), true);
							Iterator<JsonElement> iterator = channel.getFillPermissions().iterator();
							while (iterator.hasNext())
							{
								JsonElement jsonElement = iterator.next();
								JsonObject jsonObject = jsonElement.getAsJsonObject();
								String key = jsonObject.get("key").getAsString();
								int value = jsonObject.get("value").getAsInt();
								teamSpeak.getApi().addChannelPermission(teamSpeakChannel.getId(), key, value);
							}
							Map<ChannelProperty, String> map = new HashMap<>();
							iterator = channel.getFillParameters().iterator();
							String channelName = channel.getPrefix() + id;
							while (iterator.hasNext())
							{
								JsonElement jsonElement = iterator.next();
								JsonObject jsonObject = jsonElement.getAsJsonObject();
								String key = jsonObject.get("key").getAsString();
								String value = jsonObject.get("value").getAsString();
								ChannelProperty channelProperty = getChannelProperty(key);
								if (channelProperty.equals(ChannelProperty.CHANNEL_NAME))
								{
									value = channelName + value;
									System.out.println(value);
								}
								map.put(channelProperty, value);
							}
							teamSpeak.getApi().editChannel(teamSpeakChannel.getId(), map);
						}
					}
				}
				else
				{
					recalcChannels = true;
					recalcChannels(channel, channelMap);
					break;
				}
				id++;
			}
			if (availableChannels == 0 && !recalcChannels)
			{
				Map<ChannelProperty, String> map = new HashMap<>();
				map.put(ChannelProperty.CPID, Integer.toString(parentId));
				Iterator<JsonElement> iterator = channel.getParameters().iterator();
				String channelName = channel.getPrefix() + id;
				while (iterator.hasNext())
				{
					JsonElement jsonElement = iterator.next();
					JsonObject jsonObject = jsonElement.getAsJsonObject();
					String key = jsonObject.get("key").getAsString();
					String value = jsonObject.get("value").getAsString();
					ChannelProperty channelProperty = getChannelProperty(key);
					if (channelProperty.equals(ChannelProperty.CHANNEL_NAME)) 
					{
						channelName += value;
						continue;
					}
					map.put(channelProperty, value);
				}
				map.put(ChannelProperty.CHANNEL_NAME, channelName);
				Log.log(ChatColor.PURPLE + "[BadSpeakDocker] " + ChatColor.GREEN + "[SUCCÈS] " + ChatColor.WHITE + "Pas assez de canaux. Création d'un canal : " + channelName);
				int channelId = teamSpeak.getApi().createChannel(channelName, map);
				iterator = channel.getPermissions().iterator();
				while (iterator.hasNext())
				{
					JsonElement jsonElement = iterator.next();
					JsonObject jsonObject = jsonElement.getAsJsonObject();
					String key = jsonObject.get("key").getAsString();
					int value = jsonObject.get("value").getAsInt();
					teamSpeak.getApi().addChannelPermission(channelId, key, value);
					try {
						Thread.sleep(100);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
			else if (availableChannels > 1)
			{
				Log.log(ChatColor.PURPLE + "[BadSpeakDocker] " + ChatColor.YELLOW + "[ATTENTION] " + ChatColor.WHITE + "Trop de canaux : " + channel.getParent());
			}
		}
	}

	private static ChannelProperty getChannelProperty(String string)
	{
		for (ChannelProperty channelProperty : ChannelProperty.values())
		{
			if (channelProperty.name().equals(string))
			{
				return channelProperty;
			}
		}
		return null;
	}

	private static void recalcChannels(ConfigChannel configChannel, Map<Channel, String> channelMap)
	{
		List<Entry<Integer, TempChannel>> currentChannelsId = channelMap.entrySet().stream().map(ch -> 
		new AbstractMap.SimpleEntry<>(ch.getKey().getOrder(), new TempChannel(ch.getKey(), ch.getValue()))
				).collect(Collectors.toList());
		Map<Integer, TempChannel> map = new HashMap<>();
		for (Entry<Integer, TempChannel> entry : currentChannelsId)
		{
			map.put(entry.getKey(), entry.getValue());
		}
		Map<Integer, TempChannel> treeMap = new TreeMap<>(map);
		Iterator<Entry<Integer, TempChannel>> iterator = treeMap.entrySet().iterator();
		for (int x=0;x<treeMap.entrySet().size();x++)
		{
			for (int i=0;i<treeMap.entrySet().size();i++)
			{
				if (iterator.hasNext())
				{
					Entry<Integer, TempChannel> entry = iterator.next();
					Channel channel = entry.getValue().getChannel();
					Map<ChannelProperty, String> mappe = new HashMap<>();
					String channelName = configChannel.getPrefix() + i;
					Iterator<JsonElement> iteratorr = channel.getTotalClients() == 0 ? configChannel.getUnfillParameters().iterator() : configChannel.getFillParameters().iterator();
					while (iteratorr.hasNext())
					{
						JsonElement jsonElement = iteratorr.next();
						JsonObject jsonObject = jsonElement.getAsJsonObject();
						String key = jsonObject.get("key").getAsString();
						String value = jsonObject.get("value").getAsString();
						ChannelProperty channelProperty = getChannelProperty(key);
						if (channelProperty.equals(ChannelProperty.CHANNEL_NAME)) 
						{
							channelName += value;
						}
					}
					System.out.println(channelName);
					mappe.put(ChannelProperty.CHANNEL_NAME, channelName);
					Main.getTeamSpeak().getApi().editChannel(channel.getId(), mappe);
				}
			}
		}
		Log.log(ChatColor.GREEN + "[SUCCÈS] " + ChatColor.WHITE + "Ordre des canaux recalculé : " + configChannel.getParent());
	}

	private static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map)
	{
		return map.entrySet()
				.stream()
				.sorted(Map.Entry.comparingByValue(/*Collections.reverseOrder()*/))
				.collect(Collectors.toMap(
						Map.Entry::getKey, 
						Map.Entry::getValue, 
						(e1, e2) -> e1, 
						LinkedHashMap::new
						));
	}

}

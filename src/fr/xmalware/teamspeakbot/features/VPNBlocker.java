package fr.xmalware.teamspeakbot.features;

import java.lang.reflect.Type;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.UUID;

import com.github.theholywaffle.teamspeak3.TS3Api;
import com.github.theholywaffle.teamspeak3.api.wrapper.Client;
import com.github.theholywaffle.teamspeak3.api.wrapper.ServerGroup;
import com.google.gson.reflect.TypeToken;

import fr.xmalware.teamspeakbot.Main;
import fr.xmalware.teamspeakbot.utils.FileUtils;
import fr.xmalware.teamspeakbot.utils.MathUtils;
import fr.xmalware.teamspeakbot.utils.NetworkUtils;
import fr.xmalware.teamspeakbot.vpn.IPDetectorObject;
import fr.xmalware.teamspeakbot.vpn.IPHubObject;

public class VPNBlocker
{

	public static final Type collectionType = new TypeToken<TreeMap<String, Boolean>>() {}.getType();
	
	public static void checkEveryone()
	{
		TS3Api api = Main.getTeamSpeak().getApi();
		for (Client client : api.getClients())
		{
			check(client, client.getDatabaseId());
		}
	}

	public static void check(int clientId, int clientDatabaseId)
	{
		TS3Api api = Main.getTeamSpeak().getApi();
		check(api.getClientInfo(clientId), clientDatabaseId);
	}

	public static void check(Client client, int clientDatabaseId)
	{
		TS3Api api = Main.getTeamSpeak().getApi();
		for (ServerGroup serverGroup : api.getServerGroupsByClient(client))
		{
			long count = api.getServerGroupPermissions(serverGroup).stream().
					filter(permission -> permission.getName().equals("b_client_ignore_antiflood")
							&& permission.getValue() == 1).count();
			if (count > 0)
			{
				// Bypass
				System.out.println("Bypass " + client.getNickname());
				return;
			}
		}
		new Thread("check-vpnblocker-" + clientDatabaseId + "-" + UUID.randomUUID().toString())
		{
			@Override
			public void run()
			{
				String lastIp = client.getIp();
				// second method
				if (secondMethodCheck(lastIp, client.getId()))
				{
					return;
				}
				// third method
				if (thirdMethodCheck(lastIp, client.getId()))
				{
					return;
				}
				// fourth method
				if (fourthMethodCheck(lastIp, client.getId()))
				{
					return;
				}
			}
		}.start();
	}

	public static boolean firstMethodCheck(String lastIp, int clientId)
	{
		String urlBuilder = "http://check.getipintel.net/check.php?ip=" + lastIp + "&contact=xmalware2@gmail.com";
		String sourceCode = NetworkUtils.fetchSourceCode(urlBuilder);
		System.out.println(Main.getTeamSpeak().getApi().getClientInfo(clientId).getNickname() + " : " + sourceCode);
		double code = 0;
		try
		{
			code = Double.parseDouble(sourceCode);
		}catch(Exception error) {
			error.printStackTrace();
		}
		code = MathUtils.round(code, 2);
		if (code > 0.75)
		{
			banIp(clientId, lastIp, code, "VPN", "A");
			return true;
		}
		return false;
	}

	public static boolean secondMethodCheck(String lastIp, int clientId)
	{
		String urlBuilder = "http://v2.api.iphub.info/ip/" + lastIp;
		String apiKey = "MTU4NTpTMXV2TXdZbFJ0YlVZOGV2aGo3dUV0dG4zOVprTWVldQ==";
		String sourceCode = NetworkUtils.fetchSourceCodeWithAPI(urlBuilder, apiKey);
		IPHubObject object = Main.getTeamSpeak().getGson().fromJson(sourceCode, IPHubObject.class);
		if (object == null)
		{
			return false;
		}
		Client client = Main.getTeamSpeak().getApi().getClientInfo(clientId);
		if (client != null)
		{
			System.out.println(client.getNickname() + " => " + object.getBlock());
		}
		if (object.getBlock() == 1)
		{
			banIp(clientId, lastIp, object.getBlock(), "VPN", "A");
			return true;
		}
		boolean telecom = telecomMethodCheck(lastIp, object.getIsp(), client.getId());
		if (telecom)
		{
			banIp(clientId, lastIp, object.getBlock(), "VPN", "B");
		}
		return telecom;
	}

	public static boolean fourthMethodCheck(String lastIp, int clientId)
	{
		String urlBuilder = "https://api.ipdetector.info/" + lastIp;
		String apiKey = "badblock-b6f7b78a3355b16de77aaed698d5a75d269";
		String sourceCode = NetworkUtils.fetchSourceCodeWithDetector(urlBuilder, apiKey);
		IPDetectorObject object = Main.getTeamSpeak().getGson().fromJson(sourceCode, IPDetectorObject.class);
		if (object == null)
		{
			return false;
		}
		Client client = Main.getTeamSpeak().getApi().getClientInfo(clientId);
		if (client != null)
		{
			System.out.println(client.getNickname() + " => " + object.goodIp);
		}
		if (object.goodIp == 0)
		{
			banIp(clientId, lastIp, object.goodIp, "VPN", "C");
			return true;
		}
		boolean telecom = telecomMethodCheck(lastIp, object.asnName, client.getId());
		if (telecom)
		{
			banIp(clientId, lastIp, object.goodIp, "VPN", "B");
		}
		telecom = telecomMethodCheck(lastIp, object.isp, client.getId());
		if (telecom)
		{
			banIp(clientId, lastIp, object.goodIp, "VPN", "B");
		}
		return telecom;
	}

	public static boolean thirdMethodCheck(String lastIp, int clientId)
	{
		String[] splitter = lastIp.split("\\.");
		// IP range
		String ipRange = "";
		for (int i = 0; i < splitter.length - 1; i++)
		{
			ipRange += splitter[i] + ".";
		}
		final String finalIPRange = ipRange;
		long count = Main.getTeamSpeak().getApi().getBans().stream().filter(ban -> ban.getBannedIp() != null &&
				ban.getBannedIp().startsWith(finalIPRange)).count();
		if (count >= 2)
		{
			banIp(clientId, lastIp, count, "Déjà banni", "A");
			return true;
		}
		return false;
	}

	public static boolean telecomMethodCheck(String lastIp, String isp, int clientId)
	{
		String rawString = FileUtils.readFileToString("isps.json");
		Map<String, Boolean> maps = Main.getTeamSpeak().getGson().fromJson(rawString, collectionType);
		isp = isp.toLowerCase();
		if (maps == null) maps = new HashMap<>();
		if (!maps.containsKey(isp))
		{
			maps.put(isp, true);
		}
		FileUtils.save("isps.json", Arrays.asList(Main.getTeamSpeak().getGson().toJson(maps)));
		return !maps.get(isp);
	}

	public static void banIp(int clientId, String lastIp, Object addon, String realReason, String type)
	{
		TS3Api api = Main.getTeamSpeak().getApi();
		String reason = realReason + " (Ban Automatique / " + addon.toString() + " / #" + type + ")";
		api.banClient(clientId, reason);
		api.addBan(lastIp, null, null, 0, reason);
		api.kickClientFromChannel("VPN non autorisé", clientId);
	}

}

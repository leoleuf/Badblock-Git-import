package fr.xmalware.teamspeakbot.features;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.github.theholywaffle.teamspeak3.TS3Api;

import fr.xmalware.teamspeakbot.Main;

public class MassAccountSecurity
{

	private static Map<Integer, String> ids = new HashMap<>();
	private static Map<String, List<String>> ips = new HashMap<>();
	
	public static void onLogin(int clientId, String uniqueClientIdentifier)
	{
		// Get API
		TS3Api api = Main.getTeamSpeak().getApi();
		// Get IP
		String ip = api.getClientByUId(uniqueClientIdentifier).getIp();

		// Get all connected users with same IP
		List<String> strings = ips.get(ip);
		// If the list doesn't exist, create it
		if (strings == null) strings = new ArrayList<>();
		// Add the unique client identifier to the list
		strings.add(uniqueClientIdentifier);
		// Create a link between the current client id and the unique client identifier
		ids.put(clientId, uniqueClientIdentifier);
		// Update the list of the IP
		ips.put(ip, strings);

		// If he has 3 or more connected accounts to the server, kick all of his accounts
		if (strings.size() >= 3)
		{
			// Remove connected accounts
			ips.put(ip, new ArrayList<>());
			// Kick
			strings.forEach(uid -> api.kickClientFromServer("Trop de comptes", api.getClientByUId(uid)));
		}
	}
	
	public static void onQuit(int clientId)
	{
		// No link between current client ID and unique client identifier, we don't care.
		if (!ids.containsKey(clientId))
		{
			return;
		}
		
		// Get API
		TS3Api api = Main.getTeamSpeak().getApi();
		
		// Get unique client identifier
		String uniqueClientIdentifier = ids.get(clientId);
		// Get last used IP
		String ip = api.getDatabaseClientByUId(uniqueClientIdentifier).getLastIp();
		
		// Remove temporary link between clientId<->uniqueClientIdentifier
		ids.remove(clientId);

		// Get all unique identifiers connected with this IP
		List<String> strings = ips.get(ip);
		// If the list doesn't exist, create it
		if (strings == null) strings = new ArrayList<>();
		// Remove unique client identifier
		strings.remove(uniqueClientIdentifier);
		
		// Update the list of the IP
		ips.put(ip, strings);
	}

}

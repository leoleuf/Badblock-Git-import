package fr.xmalware.teamspeakbot.features;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;

import com.github.theholywaffle.teamspeak3.TS3Api;
import com.github.theholywaffle.teamspeak3.api.PermissionGroupDatabaseType;
import com.github.theholywaffle.teamspeak3.api.wrapper.ServerGroup;
import com.google.common.io.ByteStreams;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

import fr.xmalware.teamspeakbot.Main;
import fr.xmalware.teamspeakbot.db.BadblockDatabase;
import fr.xmalware.teamspeakbot.db.Request;
import fr.xmalware.teamspeakbot.db.Request.RequestType;
import fr.xmalware.teamspeakbot.utils.Callback;
import fr.xmalware.teamspeakbot.utils.ColorUtils;

public class LinkedRanks
{

	private static int 						customRankSeparatorGroupId		= 437;
	private static int 						rankSeparatorGroupId			= 432;

	private static Map<String, Integer>		customRankPermissions			= new HashMap<>();

	private static Map<String, Integer>		maps = new HashMap<>();
	private static Map<String, Integer> 	groupId = new HashMap<>();

	static
	{
		// Rank priorities
		maps.put("obsidienne", 4);
		maps.put("emeraude", 3);
		maps.put("diamant", 2);
		maps.put("gold", 1);

		// Group ids
		groupId.put("obsidienne", 377);
		groupId.put("emeraude", 378);
		groupId.put("diamant", 379);
		groupId.put("gold", 375);

		// Custom rank permissions
		customRankPermissions.put("b_channel_create_temporary", 1);
		customRankPermissions.put("b_channel_create_with_password", 1);
		customRankPermissions.put("b_channel_create_modify_with_codec_speex8", 1);
		customRankPermissions.put("b_channel_create_modify_with_codec_speex16", 1);
		customRankPermissions.put("b_channel_create_modify_with_codec_speex32", 1);
		customRankPermissions.put("b_channel_create_modify_with_codec_opusvoice", 1);
		customRankPermissions.put("b_channel_create_modify_with_codec_opusmusic", 1);
		customRankPermissions.put("i_channel_create_modify_with_codec_maxquality", 10);
		customRankPermissions.put("i_channel_create_modify_with_codec_latency_factor_min", 1);
		customRankPermissions.put("i_channel_modify_power", 10);
		customRankPermissions.put("b_channel_join_permanent", 1);
		customRankPermissions.put("b_channel_join_semi_permanent", 1);
		customRankPermissions.put("b_channel_join_temporary", 1);
		customRankPermissions.put("i_channel_join_power", 6);
		customRankPermissions.put("i_channel_subscribe_power", 10);
		customRankPermissions.put("i_channel_description_view_power", 10);
		customRankPermissions.put("i_channel_max_depth", 5);
		customRankPermissions.put("i_group_needed_modify_power", 74);
		customRankPermissions.put("i_group_needed_member_add_power", 20);
		customRankPermissions.put("i_group_needed_member_remove_power", 60);
		customRankPermissions.put("b_group_is_permanent", 1);
		customRankPermissions.put("i_group_sort_id", 50001);
		customRankPermissions.put("i_group_show_name_in_tree", 1);
		customRankPermissions.put("i_client_needed_kick_from_server_power", 15);
		customRankPermissions.put("i_client_needed_kick_from_channel_power", 10);
		customRankPermissions.put("i_client_needed_ban_power", 30);
		customRankPermissions.put("i_client_needed_move_power", 15);
		customRankPermissions.put("i_client_complain_power", 10);
		customRankPermissions.put("i_client_needed_complain_power", 20);
		customRankPermissions.put("i_client_private_textmessage_power", 10);
		customRankPermissions.put("b_client_channel_textmessage_send", 1);
		customRankPermissions.put("i_client_talk_power", 28);
		customRankPermissions.put("i_client_poke_power", 10);
		customRankPermissions.put("i_client_whisper_power", 1);
		customRankPermissions.put("i_client_needed_whisper_power", 70);
		customRankPermissions.put("i_client_max_clones_uid", 0);
		customRankPermissions.put("i_client_max_avatar_filesize", -1);
		customRankPermissions.put("i_client_max_channel_subscriptions", -1);
		customRankPermissions.put("b_client_request_talker", 1);
	}

	public static void onLogin(int clientId, int clientDatabaseId, String uniqueClientIdentifier)
	{
		// Get API
		TS3Api api = Main.getTeamSpeak().getApi();

		// Work with custom ranks
		addCustomRank(api, clientDatabaseId, uniqueClientIdentifier, new Callback<Boolean>()
		{
			@Override
			public void done(Boolean result, Throwable error)
			{
				// If the custom rank is added, we delete his other ranks
				if (result)
				{
					removeOtherRanks(api, clientDatabaseId);
				}
				// Otherwise, we add common ranks
				else
				{
					addCommonRanks(api, clientDatabaseId, uniqueClientIdentifier);
				}
			}
		});
	}

	private static void addCustomRank(TS3Api api, int clientDatabaseId, String uniqueClientIdentifier, Callback<Boolean> callback)
	{
		BadblockDatabase.getInstance().addRequest(new Request("SELECT gradeperso, serverGroupId, customicon, pseudo FROM joueurs WHERE tsid = '" + uniqueClientIdentifier + "'", RequestType.GETTER) {
			@Override
			public void done(ResultSet resultSet) 
			{
				try {
					// If the player isn't linked with his TS id
					if (!resultSet.next())
					{
						callback.done(false, null);
						return;
					}

					// Get basic values
					String gradeperso = resultSet.getString("gradeperso");
					int serverGroupId = resultSet.getInt("serverGroupId");
					String customIcon = resultSet.getString("customicon");
					final int savedServerGroupId = serverGroupId;

					// If he hasn't configured custom rank 
					if (gradeperso == null || gradeperso.isEmpty())
					{
						callback.done(false, null);
						return;
					}

					// We get the real group name without special chars and colors
					String realGroupName = new String(ColorUtils.stripColor(gradeperso.replace("[", "").replace("]", "")).getBytes("UTF-8"));
					// We will check if we have to create the group
					boolean createGroup = false;
					// Check if a group with that name has been found
					Optional<ServerGroup> optional = api.getServerGroups().parallelStream().filter(serverGroup -> 
					serverGroup.getName().equals(realGroupName)).findAny();
					if (optional.isPresent())
					{
						// Group found, we get it and add it to the user
						ServerGroup serverGroup = optional.get();
						api.addClientToServerGroup(serverGroup.getId(), clientDatabaseId);
					}
					else
					{
						// No group associated with that name, we will check with the server group id
						optional = api.getServerGroups().parallelStream().
								filter(serverGroup -> serverGroup.getId() == savedServerGroupId).findAny();
						// If no server group is associated with the account or if it doesn't exist, 
						// we have to create a group
						if (serverGroupId <= 0 || !optional.isPresent())
						{
							createGroup = true;
						}
						else
						{
							// Nothing to create, we set the user into the group and change the name
							// because we don't found it above
							api.addClientToServerGroup(serverGroupId, clientDatabaseId);
							api.renameServerGroup(serverGroupId, realGroupName);
						}
					}

					// Then we create the group
					if (createGroup)
					{
						// We add the client to the separator group
						api.addClientToServerGroup(customRankSeparatorGroupId, clientDatabaseId);

						// We make a server group
						serverGroupId = api.addServerGroup(realGroupName, PermissionGroupDatabaseType.REGULAR);

						// Get as a final
						final int newServerGroupId = serverGroupId;

						// We add the client to his new server group
						api.addClientToServerGroup(serverGroupId, clientDatabaseId);

						// We save his new server group id
						BadblockDatabase.getInstance().addSyncRequest(new Request(
								"UPDATE joueurs SET serverGroupId = '" + serverGroupId + "' WHERE pseudo = '" + resultSet.getString("pseudo") + "'"
								, RequestType.SETTER));

						// We add all group permissions
						customRankPermissions.entrySet().forEach(entry ->
						{
							api.addServerGroupPermission(newServerGroupId, entry.getKey(), entry.getValue(), false, false);
							try
							{
								Thread.sleep(250);
							}
							catch (InterruptedException exception)
							{
								exception.printStackTrace();
							}	
						});
					}

					// We upload the custom icon
					if (serverGroupId > 0)
					{
						// Get custom icon
						if (customIcon != null && !customIcon.isEmpty())
						{
							// Getting image
							String httpsURL = customIcon;
							URL myurl = new URL(httpsURL);
							HttpURLConnection con = (HttpURLConnection)myurl.openConnection();
							con.setDoInput(true);
							con.setRequestProperty("User-Agent", "Mozilla/4.0 (compatible; MSIE 5.0;Windows98;DigExt)"); 
							DataInputStream input = new DataInputStream( con.getInputStream() );

							// Uploading icon
							long iconId = api.uploadIconDirect(ByteStreams.toByteArray(input));
							if (iconId != -1)
							{
								api.addServerGroupPermission(serverGroupId, "i_icon_id", (int) iconId, false, false);
							}

							// Close input stream
							input.close();
						}
					}
					callback.done(true, null);
				}
				catch (Exception exception)
				{
					exception.printStackTrace();
				}
			}
		});
	}

	private static void addCommonRanks(TS3Api api, int clientDatabaseId, String uniqueClientIdentifier)
	{

		BadblockDatabase.getInstance().addRequest(new Request("SELECT pseudo FROM joueurs WHERE tsid = '" + uniqueClientIdentifier + "'", RequestType.GETTER) {
			@Override
			public void done(ResultSet resultSet) 
			{
				try
				{
					// If the player isn't linked with his TS id
					if (!resultSet.next())
					{
						return;
					}

					// Getting basic values
					String pseudo = resultSet.getString("pseudo");

					// Ladder API request to get his ranks
					String httpsURL = "http://node01-int.clusprv.badblock-network.fr:8080/players/getData/";

					URL myurl = new URL(httpsURL);

					HttpURLConnection con = (HttpURLConnection)myurl.openConnection();
					String query = "name=" + pseudo;
					con.setRequestMethod("POST");
					con.setRequestProperty("Content-length", String.valueOf(query.length())); 
					con.setRequestProperty("Content-Type","application/x-www-form-urlencoded"); 
					con.setRequestProperty("User-Agent", "Mozilla/4.0 (compatible; MSIE 5.0;Windows98;DigExt)"); 
					con.setDoOutput(true); 
					con.setDoInput(true); 

					DataOutputStream output = new DataOutputStream(con.getOutputStream());  
					output.writeBytes(query);
					output.close();

					DataInputStream input = new DataInputStream( con.getInputStream() );
					String o = "";
					for( int c = input.read(); c != -1; c = input.read() ) 
						o += ((char)c); 
					input.close(); 

					JsonElement jsonElement = Main.getTeamSpeak().getGson().fromJson(o, JsonElement.class);
					JsonObject jsonObject = jsonElement.getAsJsonObject();
					JsonObject data = jsonObject.get("data").getAsJsonObject();
					JsonObject permissions = data.get("permissions").getAsJsonObject();
					String group = permissions.get("group").getAsString();
					JsonObject alternateGroups = permissions.get("alternateGroups").getAsJsonObject();

					String currentGroup = group;
					boolean a = false;

					for (Entry<String, Integer> entry : maps.entrySet()) {
						if (alternateGroups.has(entry.getKey()))
						{
							if (maps.containsKey(currentGroup) && maps.get(currentGroup) > entry.getValue())
							{
								continue;
							}
							currentGroup = entry.getKey();
						}
					}

					if (groupId.containsKey(currentGroup))
					{
						int id = groupId.get(currentGroup);
						a = true;
						Main.getTeamSpeak().getApi().addClientToServerGroup(id, clientDatabaseId);
						for (int idd : groupId.values())
						{
							if (idd != id)
							{
								Main.getTeamSpeak().getApi().removeClientFromServerGroup(idd, clientDatabaseId);
							}
						}
					}
					else 
					{
						for (int idd : groupId.values())
						{
							Main.getTeamSpeak().getApi().removeClientFromServerGroup(idd, clientDatabaseId);
						}
					}
					if (a)
					{
						Main.getTeamSpeak().getApi().addClientToServerGroup(65, clientDatabaseId);
					}
				}
				catch (Exception error)
				{
					error.printStackTrace();
				}
			}
		});
	}

	private static void removeOtherRanks(TS3Api api, int clientDatabaseId)
	{
		// Remove spacer rank
		api.removeClientFromServerGroup(rankSeparatorGroupId, clientDatabaseId);
		// Remove other ranks
		for (int idd : groupId.values())
		{
			api.removeClientFromServerGroup(idd, clientDatabaseId);
		}
	}

}

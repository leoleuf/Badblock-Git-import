package fr.xmalware.badblock.secure.listeners;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.text.Normalizer;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;

import fr.badblock.ladder.api.Ladder;
import fr.badblock.ladder.api.entities.Player;
import fr.badblock.ladder.api.events.EventHandler;
import fr.badblock.ladder.api.events.Listener;
import fr.badblock.ladder.api.events.all.PlayerJoinEvent;
import fr.badblock.ladder.api.events.all.ServerSwitchEvent;
import fr.xmalware.badblock.secure.BadBlockSecure;
import fr.xmalware.badblock.secure.i18n.I18N;

public class ServerConnectListener implements Listener {

	public static final String bilip = "§e§k!§b§k!§a§k!§c§k!§d§k!";

	@EventHandler
	public void onJoin(PlayerJoinEvent event) {
		Player player = event.getPlayer();
		player.canJoinHimself(true);
		player.setPlayersWithHim(new ArrayList<>());
		String name = player.getName();
		if (name.length() > 16) {
			event.setCancelled(true);
			event.setCancelReason(I18N.getTranslatedMessage("connect.toolong"));
			return;
		}
		if (name.contains(" ") || hasDiacritics(name)) {
			event.setCancelled(true);
			event.setCancelReason(I18N.getTranslatedMessage("connect.specialcharacters"));
			return;
		}
		if (BadBlockSecure.getInstance().maintenanceEnabled)
			if (!player.hasPermission("badblock.maintenance.bypass")) {
				event.setCancelled(true);
				event.setCancelReason(BadBlockSecure.getInstance().maintenanceConnection);
			}
		if (!player.hasPermission("others.vpn.bypass")) {
			new Thread("vpn_" + player.getUniqueId() + "_" + new Random().nextInt(999999)) {
				@Override
				public void run() {
					try {
						String hostString = player.getAddress().getHostString();
						for (String string : BadBlockSecure.getInstance().configuration.getStringList("vpn"))
							if (hostString.startsWith(string)) {
								player.disconnect(I18N.getTranslatedMessages("vpnkick"));
								return;
							}
						if (BadBlockSecure.getInstance().configuration.getStringList("vpnexceptions").contains(hostString)) return;
						URL url = new URL("http://iphub.info/api.php?ip=" + hostString);
						BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
						String inputLine = "";
						while ((inputLine = in.readLine()) != null) {
							String[] splitter = inputLine.split(">");
							if (splitter.length == 12) {
								String value = splitter[9].split("<")[0];
								if (value.contains("OVH SAS")) break;
								value = splitter[11].split("<")[0];
								if (value.equals("1")) {
									player.disconnect(I18N.getTranslatedMessages("vpnkick"));
								}
							}
						}
						in.close();
					}catch(Exception error) {
						Ladder.getInstance().getLogger().log(Level.WARNING, "iphub.info seems to be down (" + error.getMessage() + ").");
						error.printStackTrace();
					}
				}
			}.start();
		}
	}

	private boolean hasDiacritics(String s) {
		String s2 = Normalizer.normalize(s, Normalizer.Form.NFD);
		return s2.matches("(?s).*\\p{InCombiningDiacriticalMarks}.*");
	}

	@EventHandler
	public void onServerConnect(ServerSwitchEvent event) {
		Player player = event.getPlayer();
		// Maintenance
		if (!player.hasPermission("badblock.maintenance.bypass")) {
			if (BadBlockSecure.getInstance().maintenanceEnabled && BadBlockSecure.getInstance().maintenanceDisconnectWhenServerChanged) {
				player.disconnect(BadBlockSecure.getInstance().maintenanceConnection);
				return;
			}
		}
	}

}

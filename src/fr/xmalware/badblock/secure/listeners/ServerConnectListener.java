package fr.xmalware.badblock.secure.listeners;

import java.text.Normalizer;
import java.util.ArrayList;

import fr.badblock.ladder.api.entities.Player;
import fr.badblock.ladder.api.events.EventHandler;
import fr.badblock.ladder.api.events.Listener;
import fr.badblock.ladder.api.events.all.PlayerJoinEvent;
import fr.badblock.ladder.api.events.all.ServerSwitchEvent;
import fr.xmalware.badblock.secure.BadBlockSecure;
import fr.xmalware.badblock.secure.i18n.I18N;

public class ServerConnectListener implements Listener {

	public static final String bilip = "§e§k!§b§k!§a§k!§c§k!§d§k!";

	@EventHandler
	public void onJoin(PlayerJoinEvent event) {
		Player player = event.getPlayer();
		player.canJoinHimself(true);
		player.setPlayersWithHim(new ArrayList<>());
		String name = player.getName();
		if (name.length() > 16) {
			event.setCancelled(true);
			event.setCancelReason(I18N.getTranslatedMessage("connect.toolong"));
			return;
		}
		if (name.contains(" ") || hasDiacritics(name)) {
			event.setCancelled(true);
			event.setCancelReason(I18N.getTranslatedMessage("connect.specialcharacters"));
			return;
		}
		if (BadBlockSecure.getInstance().maintenanceEnabled)
			if (!player.hasPermission("badblock.maintenance.bypass")) {
				event.setCancelled(true);
				event.setCancelReason(BadBlockSecure.getInstance().maintenanceConnection);
			}
	}

	private boolean hasDiacritics(String s) {
		String s2 = Normalizer.normalize(s, Normalizer.Form.NFD);
		return s2.matches("(?s).*\\p{InCombiningDiacriticalMarks}.*");
	}

	@EventHandler
	public void onServerConnect(ServerSwitchEvent event) {
		Player player = event.getPlayer();
		// Maintenance
		if (!player.hasPermission("badblock.maintenance.bypass")) {
			if (BadBlockSecure.getInstance().maintenanceEnabled && BadBlockSecure.getInstance().maintenanceDisconnectWhenServerChanged) {
				player.disconnect(BadBlockSecure.getInstance().maintenanceConnection);
				return;
			}
		}
	}

}

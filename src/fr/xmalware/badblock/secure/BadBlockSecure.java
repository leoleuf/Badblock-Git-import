package fr.xmalware.badblock.secure;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.List;

import fr.badblock.ladder.api.Ladder;
import fr.badblock.ladder.api.chat.ChatColor;
import fr.badblock.ladder.api.chat.Motd;
import fr.badblock.ladder.api.config.Configuration;
import fr.badblock.ladder.api.config.ConfigurationProvider;
import fr.badblock.ladder.api.config.YamlConfiguration;
import fr.badblock.ladder.api.plugins.Plugin;
import fr.badblock.ladder.api.plugins.PluginsManager;
import fr.badblock.ladder.api.utils.FileUtils;
import fr.xmalware.badblock.secure.commands.BadBlockOthersReloadCommand;
import fr.xmalware.badblock.secure.commands.ChangePasswordCommand;
import fr.xmalware.badblock.secure.commands.MaintenanceCommand;
import fr.xmalware.badblock.secure.commands.RemovePasswordCommand;
import fr.xmalware.badblock.secure.commands.ScaleCommand;
import fr.xmalware.badblock.secure.i18n.I18N;
import fr.xmalware.badblock.secure.listeners.ServerConnectListener;
import fr.xmalware.badblock.secure.security.XAUTH;
import lombok.Getter;
import lombok.Setter;

public class BadBlockSecure extends Plugin {

	@Getter @Setter private static BadBlockSecure		instance;
	public boolean				  maintenanceEnabled = false;
	public boolean				  maintenanceDisconnectWhenServerChanged;
	public String				  maintenanceMotd;
	public String				  maintenanceConnection;
	public File					  configFile;
	public Configuration		  configuration;
	@Getter private XAUTH 			hasher;
	
	@Override
	public void onEnable() {
		instance = this;
		hasher = new XAUTH();
		File file = this.getDataFolder();
		if (!file.exists()) file.mkdir();
		configFile = new File(file, "config.yml");
		try {
			configuration = ConfigurationProvider.getProvider(YamlConfiguration.class).load(configFile);
		} catch (IOException e) {
			e.printStackTrace();
		}
		maintenanceEnabled = configuration.getBoolean("maintenance.enabled");
		maintenanceDisconnectWhenServerChanged = configuration.getBoolean("maintenance.disconnectWhenServerChanged");
		maintenanceMotd = readFile(new File("plugins/BadBlockOthers/maintenance.motd"));
		maintenanceConnection = readFile(new File("plugins/BadBlockOthers/connection.motd"));
		if (maintenanceEnabled) {
			Motd motd = (Motd)FileUtils.load(new File("motd.json"), Motd.class);
			motd.setMotd(I18N.getTranslatedMessages("maintenance.motd"));
			List<String> strings = configuration.getStringList("lang.maintenance.players");
			String[] str = new String[] {};
			str = strings.toArray(str);
			motd.setPlayers(str);
			motd.setMaxPlayers(configuration.getInt("lang.maintenance.maxplayers"));
			motd.setVersion(configuration.getString("lang.maintenance.version"));
			Ladder.getInstance().getMotd().setMaxPlayers(motd.getMaxPlayers());
			Ladder.getInstance().getMotd().setMotd(motd.getMotd());
			Ladder.getInstance().getMotd().setPlayers(motd.getPlayers());
			Ladder.getInstance().getMotd().setVersion(motd.getVersion());
		}
		PluginsManager pluginsManager = this.getLadder().getPluginsManager();
		pluginsManager.registerEvents(this, new ServerConnectListener());
		pluginsManager.registerCommand(this, new BadBlockOthersReloadCommand());
		pluginsManager.registerCommand(this, new RemovePasswordCommand());
		pluginsManager.registerCommand(this, new MaintenanceCommand());
		pluginsManager.registerCommand(this, new ScaleCommand());
		pluginsManager.registerCommand(this, new ChangePasswordCommand());
	}
	
	@Override
	public void onDisable() {
		
	}
	
	public String readFile(File file) {
		String line = "";
		if (file.exists()) {
			try {
				BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF8"));
				String str;
				while ((str = in.readLine()) != null) {
					line += str + "\n";
				}
				in.close();
			} catch (UnsupportedEncodingException e) {
				System.out.println(e.getMessage());
			} catch (IOException e)	{
				System.out.println(e.getMessage());
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
		if ("".equals(line)) line = I18N.getTranslatedMessage("error");
		return ChatColor.translateAlternateColorCodes('&', line);
	}
	
}

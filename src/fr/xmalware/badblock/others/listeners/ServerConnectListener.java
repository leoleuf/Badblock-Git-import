package fr.xmalware.badblock.others.listeners;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.text.Normalizer;
import java.util.ArrayList;
import java.util.Random;
import java.util.UUID;
import java.util.logging.Level;

import fr.badblock.ladder.api.Ladder;
import fr.badblock.ladder.api.entities.Bukkit;
import fr.badblock.ladder.api.entities.Player;
import fr.badblock.ladder.api.events.EventHandler;
import fr.badblock.ladder.api.events.Listener;
import fr.badblock.ladder.api.events.all.PlayerJoinEvent;
import fr.badblock.ladder.api.events.all.ServerSwitchEvent;
import fr.xmalware.badblock.api.I18N;
import fr.xmalware.badblock.others.BadBlockOthers;
import fr.xmalware.badblock.others.friends.FriendPlayer;

public class ServerConnectListener implements Listener {

	public static final String bilip = "§e§k!§b§k!§a§k!§c§k!§d§k!";

	@EventHandler
	public void onJoin(PlayerJoinEvent event) {
		Player player = event.getPlayer();
		player.canJoinHimself(true);
		player.setPlayersWithHim(new ArrayList<>());
		FriendPlayer.load(player);
		FriendPlayer friendPlayer = FriendPlayer.get(player);
	}

	@EventHandler
	public void onServerConnect(ServerSwitchEvent event) {
		Player player = event.getPlayer();
		if (event.getTo().getName().contains("anim")) {
			if (!BadBlockOthers.getInstance().animCommand.accessible && !player.hasPermission("animation.bypass")) {
				Bukkit bukkit = Ladder.getInstance().getBukkitServer("lobby");
				if (bukkit != null && bukkit.getPlayers() != null)
					player.connect(bukkit);
				else player.disconnect(I18N.getTranslatedMessage("anim.nolobby"));
			}
		}
		// Reload 
		if (event.getTo().getName().startsWith("lobby")) {
			FriendPlayer friendPlayer = FriendPlayer.get(player);
			if (friendPlayer != null) {
				friendPlayer.send(player);
				if (friendPlayer.party == null) {
					player.canJoinHimself(true);
					player.setPlayersWithHim(new ArrayList<UUID>());
					return;
				}
				if (friendPlayer.party.getLeader().equalsIgnoreCase(player.getName())) {
					if (friendPlayer.groupFollow) {
						player.canJoinHimself(true);
						player.setPlayersWithHim(friendPlayer.party.getFollowUUIDs(player.getName()));
						return;
					}
					player.canJoinHimself(true);
					player.setPlayersWithHim(new ArrayList<UUID>());
				}else{
					if (friendPlayer.groupFollow) {
						Player lo = Ladder.getInstance().getPlayer(friendPlayer.party.getLeader());
						boolean joinHimself = false;
						if (lo != null) {
							FriendPlayer lf = FriendPlayer.get(lo);
							if (lf != null) {
								if (!lf.groupFollow)
									joinHimself = true;
								else {
									lo.setPlayersWithHim(friendPlayer.party.getFollowUUIDs(lo.getName()));
								}
							}else{
								joinHimself = true;
								player.setPlayersWithHim(new ArrayList<>());
							}
						}else{
							joinHimself = true;
							player.setPlayersWithHim(new ArrayList<>());
						}
						player.canJoinHimself(joinHimself);
						return;
					}
					player.canJoinHimself(true);
					player.setPlayersWithHim(new ArrayList<UUID>());
				}
			}
		}
	}

}

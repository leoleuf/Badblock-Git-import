package fr.xmalware.badblock.others.friends;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.UUID;
import java.util.stream.Collectors;

import fr.badblock.ladder.api.Ladder;
import fr.badblock.ladder.api.entities.Player;

public class Party {

	public static Map<String, Party> parties = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);

	private String leader;
	private List<String> nicknames;
	private List<String> waitingNicknames;

	public Party(String leader) {
		this.nicknames = new ArrayList<>();
		this.waitingNicknames = new ArrayList<>();
		nicknames.add(leader);
		this.setLeader(leader);
		sendToBeChangedInSQL();
	}

	public void setLeader(String pseudo) {
		if (leader != null)
			parties.remove(leader);
		this.leader = pseudo;
		sendToBeChangedInSQL();
		this.register();
	}

	public List<UUID> getOnlineUUIDs(String withoutPseudo) {
		if (this.getPlayers() == null || this.getPlayers().size() == 0)
			return new ArrayList<UUID>();
		List<UUID> result = new ArrayList<>();
		for (String player : getPlayers()) {
			if (withoutPseudo.equalsIgnoreCase(player))
				continue;
			Player lo = Ladder.getInstance().getPlayer(player);
			if (lo == null)
				continue;
			if (lo.getBukkitServer() == null || lo.getBukkitServer().getName().startsWith("login"))
				continue;
			result.add(lo.getUniqueId());
		}
		return result;
	}

	public List<UUID> getFollowUUIDs(String withoutPseudo) {
		if (this.getPlayers() == null || this.getPlayers().size() == 0)
			return new ArrayList<UUID>();
		List<UUID> result = new ArrayList<>();
		for (String player : getPlayers()) {
			if (withoutPseudo.equalsIgnoreCase(player))
				continue;
			Player lo = Ladder.getInstance().getPlayer(player);
			if (lo == null)
				continue;
			if (lo.getBukkitServer() == null || lo.getBukkitServer().getName().startsWith("login"))
				continue;
			FriendPlayer fo = FriendPlayer.get(lo);
			if (fo == null)
				continue;
			if (fo.groupFollow)
				result.add(lo.getUniqueId());
		}
		return result;
	}

	public void sendToBeChangedInSQL() {
		for (UUID uuid : getOnlineUUIDs("")) {
			Player lo = Ladder.getInstance().getPlayer(uuid);
			if (lo == null)
				continue;
			FriendPlayer fromPlayer = FriendPlayer.get(lo);
			if (fromPlayer == null)
				continue;
			fromPlayer.hasNewChanges = true;
		}
	}

	public List<String> getPlayers() {
		return this.nicknames;
	}

	public List<String> getWaitingPlayers() {
		return this.waitingNicknames;
	}

	public List<String> getPlayersWithoutLeader() {
		return this.nicknames.parallelStream().filter(name -> !name.equalsIgnoreCase(leader))
				.collect(Collectors.toList());
	}

	public String getLeader() {
		return leader;
	}

	public void register() {
		if (parties.containsKey(this.leader))
			return;
		parties.put(this.leader, this);
	}

	public static Party getAuthentic(Party party) {
		if (parties.containsKey(party.getLeader()))
			return parties.get(party.getLeader());
		return party;
	}

}

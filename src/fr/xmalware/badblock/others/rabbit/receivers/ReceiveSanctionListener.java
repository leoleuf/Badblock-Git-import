package fr.xmalware.badblock.others.rabbit.receivers;

import java.sql.ResultSet;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;

import fr.badblock.ladder.api.Ladder;
import fr.badblock.ladder.api.chat.ChatColor;
import fr.badblock.ladder.api.config.Configuration;
import fr.badblock.ladder.api.entities.OfflinePlayer;
import fr.badblock.ladder.api.entities.Player;
import fr.xmalware.badblock.api.I18N;
import fr.xmalware.badblock.others.BadBlockOthers;
import fr.xmalware.badblock.others.commands.mod.punish.CommandBan;
import fr.xmalware.badblock.others.commands.mod.punish.CommandBanip;
import fr.xmalware.badblock.others.commands.mod.punish.CommandKick;
import fr.xmalware.badblock.others.commands.mod.punish.CommandMute;
import fr.xmalware.badblock.others.commands.mod.punish.CommandTempban;
import fr.xmalware.badblock.others.commands.mod.punish.CommandTempbanip;
import fr.xmalware.badblock.others.commands.mod.punish.CommandUnban;
import fr.xmalware.badblock.others.commands.mod.punish.CommandUnbanip;
import fr.xmalware.badblock.others.commands.mod.punish.CommandUnmute;
import fr.xmalware.badblock.others.database.BadblockDatabase;
import fr.xmalware.badblock.others.database.Request;
import fr.xmalware.badblock.others.database.Request.RequestType;
import fr.xmalware.badblock.others.objects.SanctionFactory;
import fr.xmalware.badblock.rabbitconnector.RabbitConnector;
import fr.xmalware.badblock.rabbitconnector.RabbitListener;
import fr.xmalware.badblock.rabbitconnector.RabbitListenerType;

public class ReceiveSanctionListener extends RabbitListener {

	public ReceiveSanctionListener() {
		super(RabbitConnector.getInstance().getService("default"), "sanction", false, RabbitListenerType.MESSAGE_BROKER);
	}

	@Override
	public void onPacketReceiving(String string) {
		if (string == null) return;
		SanctionFactory sanctionFactory = BadBlockOthers.getInstance().getGson().fromJson(string, SanctionFactory.class);
		if (sanctionFactory == null) return;
		OfflinePlayer offlinePlayer = Ladder.getInstance().getOfflinePlayer(sanctionFactory.getPseudo());
		if (offlinePlayer == null) {
			System.out.println("[SANCTION] " + sanctionFactory.getPseudo() + " has never played before.");
			return;
		}
		if (offlinePlayer == null || !offlinePlayer.hasPlayed()) {
			System.out.println("[SANCTION] " + sanctionFactory.getPseudo() + " has never played before.");
			return;
		}
		if (sanctionFactory.isAuto()) {
			Configuration config = BadBlockOthers.getInstance().getConfig().getSection("lang.punishments.table");
			String reason = sanctionFactory.getReason();
			if (!config.contains(reason)) {
				System.out.println("[SANCTION] Unknown '" + reason + "' reason.");
				return;
			}
			List<Entry<String, Integer>> list = new ArrayList<>();
			for (String key : config.getSection(reason).getKeys()) {
				Configuration c = config.getSection(reason).getSection(key);
				list.add(new AbstractMap.SimpleEntry(c.getString("type"), c.getInt("time")));
			}
			BadblockDatabase.getInstance().addRequest(new Request("SELECT COUNT(*) AS count FROM sanctions WHERE pseudo = '" + BadblockDatabase.getInstance().mysql_real_escape_string(offlinePlayer.getName()) + "' AND reason = '" + reason + "'", RequestType.GETTER) {
				@Override
				public void done(ResultSet resultSet) {
					try {
						if (resultSet.next()) {
							int count = resultSet.getInt("count");
							int next = count + 1;
							Entry<String, Integer> entry = list.size() >= next ? list.get(count) : list.get(list.size() - 1);
							if (entry == null) {
								System.out.println("[SANCTION] Unknown '" + reason + "' entries.");
								return;
							}
							sanctionFactory.setType(entry.getKey());
							sanctionFactory.setExpire(System.currentTimeMillis() + (entry.getValue() * 1000));
							apply(sanctionFactory, offlinePlayer);
						}
					}catch(Exception error) {
						error.printStackTrace();
					}
				}
			});
		}else apply(sanctionFactory, offlinePlayer);
	}

	public void apply(SanctionFactory sanctionFactory, OfflinePlayer offlinePlayer) {
		switch (sanctionFactory.getType()) {
		case "ban":
			offlinePlayer.getAsPunished().setBan(true);
			offlinePlayer.getAsPunished().setBanEnd(-1L);
			offlinePlayer.getAsPunished().setBanner(sanctionFactory.getBanner());
			offlinePlayer.getAsPunished().setBanReason(sanctionFactory.getReason());
			offlinePlayer.savePunishions();
			break;
		case "bban":
			offlinePlayer.getAsPunished().setBan(true);
			offlinePlayer.getAsPunished().setBanEnd(-1L);
			offlinePlayer.getAsPunished().setBanner(sanctionFactory.getBanner());
			offlinePlayer.getAsPunished().setBanReason(sanctionFactory.getReason());
			offlinePlayer.savePunishions();
			offlinePlayer.getIpAsPunished().setBan(true);
			offlinePlayer.getIpAsPunished().setBanEnd(-1L);
			offlinePlayer.getIpAsPunished().setBanner(sanctionFactory.getBanner());
			offlinePlayer.getIpAsPunished().setBanReason(sanctionFactory.getReason());
			offlinePlayer.getIpData().savePunishions();
			break;
		case "banip":
			offlinePlayer.getIpAsPunished().setBan(true);
			offlinePlayer.getIpAsPunished().setBanEnd(-1L);
			offlinePlayer.getIpAsPunished().setBanner(sanctionFactory.getBanner());
			offlinePlayer.getIpAsPunished().setBanReason(sanctionFactory.getReason());
			offlinePlayer.getIpData().savePunishions();
			break;
		case "kick":
			Player player = Ladder.getInstance().getPlayer(sanctionFactory.getPseudo());
			if (player == null) {
				System.out.println("[SANCTION] " + sanctionFactory.getPseudo() + " is offline, unable to kick him.");
				return;
			}
			break;
		case "mute":
			offlinePlayer.getAsPunished().setMute(true);
			offlinePlayer.getAsPunished().setMuteEnd(sanctionFactory.getTimestamp());
			offlinePlayer.getAsPunished().setMuter(sanctionFactory.getBanner());
			offlinePlayer.getAsPunished().setMuteReason(sanctionFactory.getReason());
			offlinePlayer.savePunishions();
			offlinePlayer.getIpAsPunished().setMute(true);
			offlinePlayer.getIpAsPunished().setMuteEnd(sanctionFactory.getTimestamp());
			offlinePlayer.getIpAsPunished().setMuter(sanctionFactory.getBanner());
			offlinePlayer.getIpAsPunished().setMuteReason(sanctionFactory.getReason());
			offlinePlayer.getIpData().savePunishions();
			break;
		case "tempban":
			offlinePlayer.getAsPunished().setBan(true);
			offlinePlayer.getAsPunished().setBanEnd(sanctionFactory.getExpire());
			offlinePlayer.getAsPunished().setBanner(sanctionFactory.getBanner());
			offlinePlayer.getAsPunished().setBanReason(sanctionFactory.getReason());
			offlinePlayer.savePunishions();
			break;
		case "btempban":
			offlinePlayer.getAsPunished().setBan(true);
			offlinePlayer.getAsPunished().setBanEnd(sanctionFactory.getExpire());
			offlinePlayer.getAsPunished().setBanner(sanctionFactory.getBanner());
			offlinePlayer.getAsPunished().setBanReason(sanctionFactory.getReason());
			offlinePlayer.savePunishions();
			offlinePlayer.getIpAsPunished().setBan(true);
			offlinePlayer.getIpAsPunished().setBanEnd(sanctionFactory.getExpire());
			offlinePlayer.getIpAsPunished().setBanner(sanctionFactory.getBanner());
			offlinePlayer.getIpAsPunished().setBanReason(sanctionFactory.getReason());
			offlinePlayer.getIpData().savePunishions();
			break;
		case "tempbanip":
			offlinePlayer.getIpAsPunished().setBan(true);
			offlinePlayer.getIpAsPunished().setBanEnd(sanctionFactory.getExpire());
			offlinePlayer.getIpAsPunished().setBanner(sanctionFactory.getBanner());
			offlinePlayer.getIpAsPunished().setBanReason(sanctionFactory.getReason());
			offlinePlayer.getIpData().savePunishions();
			break;
		case "unban":
			offlinePlayer.getAsPunished().setBan(false);
			offlinePlayer.getAsPunished().setBanEnd(-1);
			offlinePlayer.savePunishions();
			break;
		case "unbanip":
			offlinePlayer.getIpAsPunished().setBan(false);
			offlinePlayer.getIpAsPunished().setBanEnd(-1);
			offlinePlayer.getIpData().savePunishions();
			break;
		case "bpardon":
			offlinePlayer.getAsPunished().setBan(false);
			offlinePlayer.getAsPunished().setBanEnd(-1);
			offlinePlayer.savePunishions();
			offlinePlayer.getIpAsPunished().setBan(false);
			offlinePlayer.getIpAsPunished().setBanEnd(-1);
			offlinePlayer.getIpData().savePunishions();
			break;
		case "unmute":
			offlinePlayer.getAsPunished().setMute(false);
			offlinePlayer.getAsPunished().setMuteEnd(-1);
			offlinePlayer.savePunishions();
			offlinePlayer.getIpAsPunished().setMute(false);
			offlinePlayer.getIpAsPunished().setMuteEnd(-1);
			offlinePlayer.getIpData().savePunishions();
			break;
		default:
			System.out.println("[SANCTION] Unknown '" + sanctionFactory.getReason() + "' reason!");
			return;
		}
		BadblockDatabase.getInstance().addRequest(new Request("INSERT INTO sanctions(pseudo, ip, type, expire, timestamp, date, reason, banner, fromIp, proof) " +
				"VALUES('" + offlinePlayer.getName() + "', '" + offlinePlayer.getLastAddress().getHostAddress() + "', '" + BadblockDatabase.getInstance().mysql_real_escape_string(sanctionFactory.getType()) +
				"', '" + sanctionFactory.getExpire() + "', '" + sanctionFactory.getTimestamp() + "', '" + 
				BadBlockOthers.getInstance().simpleDateFormat.format(new Date(sanctionFactory.getTimestamp())) + "', '" + 
				BadblockDatabase.getInstance().mysql_real_escape_string(sanctionFactory.getReason()) + "', '" + 
				BadblockDatabase.getInstance().mysql_real_escape_string(sanctionFactory.getBanner()) + "', '" + BadblockDatabase.getInstance().mysql_real_escape_string(sanctionFactory.getFromIp()) + "', '" + BadblockDatabase.getInstance().mysql_real_escape_string(sanctionFactory.getProof()) + "')", RequestType.SETTER));
	}

}

package fr.xmalware.badblock.others.utils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.common.collect.Lists;

import fr.badblock.ladder.api.chat.ChatColor;
import fr.badblock.ladder.api.config.Configuration;
import fr.xmalware.badblock.others.BadBlockOthers;

public class I18N {
	
	public static String getTranslatedMessage(String node, boolean color, Object... params) {
		BadBlockOthers instance = BadBlockOthers.getInstance();
		Configuration configuration = instance.getConfig();
		String configNode = "lang." + node;
		String message = configuration.getString(configNode);
		if (message == null) {
			message = configuration.getString("lang.commands." + node);
			if (message == null) {
				String unknownKey = configuration.getString("lang.config.unknownkey");
				if (unknownKey != null) {
					System.out.println(unknownKey.replace("@0", "lang." + node));
					return unknownKey.replace("@0", "lang." + node);
				}
				else{
					System.out.print("Unknown key lang." + node);
					return "Unknown key lang." + node;
				}
			}
		}
		if (params != null) {
			if (!color)
				message = ChatColor.translateAlternateColorCodes('&', message);
			int i = -1;
			for (Object param : params) {
				i++;
				message = message.replace("@" + i, param.toString());
			}
			if (color)
				message = ChatColor.translateAlternateColorCodes('&', message);
		}else
			message = ChatColor.translateAlternateColorCodes('&', message);
		return message;
	}
	
	public static String getTranslatedMessageWithoutColor(String node, Object... params) {
		return getTranslatedMessage(node, false, params);
	}
	
	public static String getTranslatedMessage(String node, Object... params) {
		return getTranslatedMessage(node, true, params);
	}
	
	public static List<String> getTranslatedListMessages(String node, Object... params) {
		BadBlockOthers instance = BadBlockOthers.getInstance();
		Configuration configuration = instance.getConfig();
		String configNode = "lang." + node;
		if (!configuration.contains(configNode))
			configNode = "lang.commands." + node;
		if (!configuration.contains(configNode)) {
			String unknownKey = configuration.getString("lang.config.unknownkey");
			if (unknownKey != null) {
				System.out.println(unknownKey.replace("@0", "lang." + node));
				return Arrays.asList(unknownKey.replace("@0", "lang." + node));
			}
			else{
				System.out.println("Unknown key lang." + node);
				return Arrays.asList("Unknown key lang." + node);
			}
		}
		List<String> messages = configuration.getStringList(configNode);
		List<String> finalMessages = new ArrayList<>();
		for (String message : messages) {
			if (params != null) {
				int i = -1;
				for (Object param : params) {
					i++;
					message = message.replace("@" + i, param.toString());
				}
			}
			message = ChatColor.translateAlternateColorCodes('&', message);
			finalMessages.add(message);
		}
		return finalMessages;
	}
	
	public static String[] getTranslatedMessages(String node, Object... params) {
		return getTranslatedMessages(node, true, params);
	}
	
	public static String[] getTranslatedMessagesWithoutColor(String node, Object... params) {
		return getTranslatedMessages(node, false, params);
	}
	
	public static String[] getTranslatedMessages(String node, boolean color, Object... params) {
		BadBlockOthers instance = BadBlockOthers.getInstance();
		Configuration configuration = instance.getConfig();
		String configNode = "lang." + node;
		if (!configuration.contains(configNode))
			configNode = "lang.commands." + node;
		if (!configuration.contains(configNode)) {
			String unknownKey = configuration.getString("lang.config.unknownkey");
			if (unknownKey != null) {
				System.out.print(unknownKey.replace("@0", "lang." + node));
				return new String[] { unknownKey.replace("@0", "lang." + node) };
			}
			else{
				System.out.print("Unknown key lang." + node);
				return new String[] { "Unknown key lang." + node };
			}
		}
		List<String> messages = configuration.getStringList(configNode);
		List<String> finalMessages = new ArrayList<>();
		for (String message : messages) {
			if (!color) message = ChatColor.translateAlternateColorCodes('&', message);
			if (params != null) {
				int i = -1;
				for (Object param : params) {
					i++;
					message = message.replace("@" + i, param.toString());
				}
			}
			if (color)
				message = ChatColor.translateAlternateColorCodes('&', message);
			finalMessages.add(message);
		}
		String[] array = new String[finalMessages.size()];
		array = finalMessages.toArray(array);
		return array;
	}
	
}

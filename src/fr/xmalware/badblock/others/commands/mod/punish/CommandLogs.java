package fr.xmalware.badblock.others.commands.mod.punish;

import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import fr.badblock.ladder.api.Ladder;
import fr.badblock.ladder.api.commands.Command;
import fr.badblock.ladder.api.entities.CommandSender;
import fr.badblock.ladder.api.entities.OfflinePlayer;
import fr.badblock.ladder.api.entities.Player;
import fr.badblock.ladder.api.utils.Punished;
import fr.badblock.ladder.api.utils.Time;
import fr.xmalware.badblock.others.database.BadblockDatabase;
import fr.xmalware.badblock.others.database.Request;
import fr.xmalware.badblock.others.database.Request.RequestType;

public class CommandLogs extends SanctionCommand {

	public static CommandLogs instance;
	
	public CommandLogs() {
		super("logs", "ladder.command.logs");
		instance = this;
	}

	public void run(CommandSender sender, String[] args) {
		if (args.length == 0) {
			sender.sendMessage("§cUsage: /logs <pseudo> [page]");
			return;
		}
		Ladder ladder = Ladder.getInstance();
		if (args[0].equals("")) {
			sender.sendMessage("§cLe pseudo ne doit pas être vide.");
			return;
		}
		OfflinePlayer ofPlayer = ladder.getOfflinePlayer(args[0]);
		// Unknown player?
		if (!ofPlayer.hasPlayed()) {
			sender.sendMessage("§c➤ " + args[0] + " ne s'est jamais connecté sur le serveur.");
			return;
		}

		// If it's a player (not a console, etc.)
		if (sender instanceof Player) {
			Player banner = (Player) sender;
			int bannerLevel = ModUtils.getLevel(banner);
			int bannedLevel = ModUtils.getLevel(ofPlayer);
			// Rank level
			if (bannerLevel != 100 && bannerLevel <= bannedLevel && !banner.getName().equalsIgnoreCase(ofPlayer.getName())) {
				sender.sendMessage("§c➤ Ce joueur est plus haut gradé/au même grade que vous, impossible de voir ses logs !");
				return;	
			}
		}

		new Thread() {
			@Override
			public void run() {
				/*sender.sendMessage("§7➤ Sanctions §aactives §7de §b" + offlinePlayer.getName() + " §7:");
				try {
					Thread.sleep(50);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				for (String sanction : sanctions) {
					sender.sendMessage(sanction);
					try {
						Thread.sleep(50);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}*/

				int nb = 1;
				if (args.length == 2) {
					try {
						nb = Integer.parseInt(args[1]);
						if (nb < 1) nb = 1;
					}catch(Exception error) {
						sender.sendMessage("§c➤ La page doit être un nombre.");
						return;
					}
				}
				final int nbPage = nb;
				int limitPerPage = 8;
				int firstEntry = (nb - 1) * limitPerPage; 
				BadblockDatabase.getInstance().addRequest(new Request("SELECT COUNT(*) AS count FROM sanctions WHERE banner = '" + BadblockDatabase.getInstance().mysql_real_escape_string(ofPlayer.getName()) + "';", RequestType.GETTER) {
					@Override
					public void done(ResultSet resultSet) {
						this.setDoNotClose(true);
						
						try {
							resultSet.next();
							final int count = resultSet.getInt("count");
							final double totalPage = (count / limitPerPage);
							final int totalPages = (int) (totalPage % 1 != 0 ? totalPage + 1 : totalPage);
							resultSet.close();
							BadblockDatabase.getInstance().addRequest(new Request("SELECT * FROM sanctions WHERE banner = '" + BadblockDatabase.getInstance().mysql_real_escape_string(ofPlayer.getName()) + "' ORDER BY id DESC LIMIT " + firstEntry + "," + limitPerPage + ";", RequestType.GETTER) {
								@Override
								public void done(ResultSet resultSet) {
									try {
										List<String> activeTypes = new ArrayList<>();
										boolean first = true;
										while (resultSet.next()) {
											if (first) {
												first = false;
												sender.sendMessage("§7➤ §bSanctions §7effectués par §b" + ofPlayer.getName() + " (page " + nbPage + "/" + totalPages + ") §7:");
												Thread.sleep(100);
											}
											String player = resultSet.getString("pseudo");
											OfflinePlayer offlinePlayer = ladder.getOfflinePlayer(player);
											if (offlinePlayer == null) continue;
											String active = "§cINACTIVE";
											String sanction = "?";
											String type = resultSet.getString("type");
											long timestamp = resultSet.getLong("timestamp");
											long expire = resultSet.getLong("expire");
											String banner = resultSet.getString("banner");
											String reason = resultSet.getString("reason");
											String date = resultSet.getString("date");
											String time = "";
											if (type.equals("mute")) {
												sanction = "Bâillon";
												if ((expire > System.currentTimeMillis() || expire == -1) && reason.equals(offlinePlayer.getAsPunished().getMuteReason()) &&
														banner.equals(offlinePlayer.getAsPunished().getMuter()) && offlinePlayer.getAsPunished().getMuteEnd() == expire) 
													active = "§aON";
											}
											if (type.equals("muteip")) {
												sanction = "BâillonIP";
												if ((expire > System.currentTimeMillis() || expire == -1) && reason.equals(offlinePlayer.getIpAsPunished().getMuteReason()) &&
														banner.equals(offlinePlayer.getIpAsPunished().getMuter()) && offlinePlayer.getIpAsPunished().getMuteEnd() == expire) 
													active = "§aON";
											}
											if (type.equals("ban") || type.equals("tempban")) {
												sanction = "Bannissement";
												if ((expire > System.currentTimeMillis() || expire == -1) && reason.equals(offlinePlayer.getAsPunished().getBanReason()) &&
														banner.equals(offlinePlayer.getAsPunished().getBanner()) && offlinePlayer.getAsPunished().getBanEnd() == expire) 
													active = "§aON";
											}
											if (type.equals("banip") || type.equals("tempbanip")) {
												sanction = "BannissementIP";
												if ((expire > System.currentTimeMillis() || expire == -1) && reason.equals(offlinePlayer.getIpAsPunished().getBanReason()) &&
														banner.equals(offlinePlayer.getIpAsPunished().getBanner()) && offlinePlayer.getIpAsPunished().getBanEnd() == expire) 
													active = "§aON";
											}
											if (type.equals("§aON")) {
												if (activeTypes.contains(sanction)) continue;
												activeTypes.add(sanction);
											}
											if (type.equals("kick")) {
												active = "§7DONE";
												sanction = "Kick";
											}
											if (type.equals("unban")) {
												sanction = "Débannissement";
												active = "§7DONE";
											}
											if (type.equals("unbanip")) {
												sanction = "DébannissementIP";
												active = "§7DONE";
											}
											if (type.equals("unmute")) {
												sanction = "Débâillonnement";
												active = "§7DONE";
											}
											if (active.equals("§aON") && type.equals("mute")) time = offlinePlayer.getAsPunished().buildMuteTime();
											else if (active.equals("§aON") && type.equals("muteip")) time = offlinePlayer.getIpAsPunished().buildMuteTime();
											else if (active.equals("§aON") && type.equals("tempban")) time = offlinePlayer.getAsPunished().buildBanTime();
											else if (active.equals("§aON") && type.equals("tempbanip")) time = offlinePlayer.getIpAsPunished().buildBanTime();
											else if (active.equals("§aON")) time = "?";
											else if (active.equals("§cINACTIVE") && expire != -1) time = buildTime(expire, timestamp);
											else time = "?";
											sender.sendMessage("§b➤ §8[" + active + "§8] §7" + sanction + " — §b" + player + " §7pour §b" + (!reason.isEmpty() ? " §7pour §b" + reason : "") + "§7 par §b" + banner + (!time.equals("?") ? " §7(§b" + time + "§7)" : "") + " [§b" + date + "§7]");
											Thread.sleep(100);
										}
										if (first) {
											sender.sendMessage("§c➤ " + ofPlayer.getName() + " n'a aucune log sur cette page.");
										}
									}catch(Exception error) {
										error.printStackTrace();
									}
								}
							});
						}catch(Exception error) {
							error.printStackTrace();
						}
					}
				});
			}
		}.start();
	}

	private String hideIp(String ip) {
		String[] part = ip.split("\\.");

		return part[0] + "." + part[1] + ".*.*";
	}

	public String buildTime(long expire, long time) {
		if (time != -1L) return Time.MILLIS_SECOND.toFrench(Math.abs(expire - time), Time.MINUTE, Time.DAY);
		return "à vie";
	}

}
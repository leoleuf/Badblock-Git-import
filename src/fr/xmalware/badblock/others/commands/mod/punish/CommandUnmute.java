package fr.xmalware.badblock.others.commands.mod.punish;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import fr.badblock.ladder.api.Ladder;
import fr.badblock.ladder.api.chat.ChatColor;
import fr.badblock.ladder.api.commands.Command;
import fr.badblock.ladder.api.entities.CommandSender;
import fr.badblock.ladder.api.entities.OfflinePlayer;
import fr.badblock.ladder.api.entities.Player;
import fr.badblock.ladder.api.utils.Punished;
import fr.badblock.ladder.api.utils.StringUtils;
import fr.xmalware.badblock.others.BadBlockOthers;
import fr.xmalware.badblock.others.database.BadblockDatabase;
import fr.xmalware.badblock.others.database.Request;
import fr.xmalware.badblock.others.database.Request.RequestType;

public class CommandUnmute extends Command {

	public static CommandUnmute instance;
	
	public CommandUnmute() {
		super("unmute", "ladder.command.unmute", "um");
		instance = this;
	}

	public void executeCommand(CommandSender sender, String[] args) {
		if (args.length < 2 && !sender.hasPermission("ladder.command.punish.bypassreasonpardon")) {
			sender.sendMessage("§cUsage: /unmute <pseudo> <raison>");
			return;
		}else if (args.length < 1 && sender.hasPermission("ladder.command.punish.bypassreasonpardon")) {
			sender.sendMessage("§cUsage: /unmute <pseudo> [raison]");
			return;
		}
		if (args.length == 1) {
			args = Arrays.copyOf(args, args.length + 1);
			args[1] = "";
		}
		String reason = ChatColor.replaceColor(StringUtils.join(args, " ", 1));
		if (reason.length() < 4 && !sender.hasPermission("ladder.command.punish.bypassreason")) {
			sender.sendMessage("§c➤ Le motif doit faire au minimum 4 caractères.");
			return;
		}
		Ladder ladder = Ladder.getInstance();
		OfflinePlayer offlinePlayer = ladder.getOfflinePlayer(args[0]);
		// Unknown player?
		if (!offlinePlayer.hasPlayed()) {
			sender.sendMessage("§c➤ " + args[0] + " ne s'est jamais connecté sur le serveur.");
			return;
		}

		// If it isn't banned
		if (!offlinePlayer.getAsPunished().isMute() && !offlinePlayer.getIpAsPunished().isMute()) {
			sender.sendMessage("§c➤ " + args[0] + " n'est pas baîllonné.");
			return;
		}

		// If it's a player (not a console, etc.)
		if (sender instanceof Player) {
			Player unmuter = (Player) sender;
			List<String> muters = new ArrayList<>();
			if (offlinePlayer.getAsPunished().isMute()) muters.add(offlinePlayer.getAsPunished().getMuter());
			if (offlinePlayer.getIpAsPunished().isMute()) muters.add(offlinePlayer.getIpAsPunished().getMuter());
			for (String muterName : muters) {
				OfflinePlayer muter = ladder.getOfflinePlayer(muterName);
				int muterLevel = muter.getName().equals("CONSOLE") ? 100 : 0;
				if (muter.hasPlayed()) muterLevel = ModUtils.getLevel(muter);
				int unmuterLevel = ModUtils.getLevel(unmuter);
				// Rank level
				if (unmuterLevel != 100 && muterLevel >= unmuterLevel && !unmuter.getName().equalsIgnoreCase(muter.getName())) {
					sender.sendMessage("§c➤ Vous n'avez pas le pouvoir de débaîllonner ce joueur !");
					return;	
				}
			}
		}

		// Unpunish
		unpunish(offlinePlayer.getAsPunished(), offlinePlayer.getIpAsPunished());
		
		// Save datas
		offlinePlayer.getIpData().savePunishions();
		offlinePlayer.getIpData().saveData();
		offlinePlayer.savePunishions();
		offlinePlayer.saveData();
		String bannerIp = sender instanceof Player ? ((Player) sender).getLastAddress().getHostAddress() : "127.0.0.1";
		BadblockDatabase.getInstance().addRequest(new Request("INSERT INTO sanctions(pseudo, ip, type, expire, timestamp, date, reason, banner, fromIp) " +
				"VALUES('" + offlinePlayer.getName() + "', '" + offlinePlayer.getLastAddress().getHostAddress() + "', 'unmute', '-1', '" + System.currentTimeMillis() + "', '" + 
				BadBlockOthers.getInstance().simpleDateFormat.format(new Date()) + "', '" + BadblockDatabase.getInstance().mysql_real_escape_string(args[1]) + "', '" + sender.getName() + "', '" + bannerIp + "')", RequestType.SETTER));
		sender.sendMessage("§a➤ Débaîllonnement appliqué envers " + offlinePlayer.getName() + ".");

	}

	private void unpunish(Punished... punisheds) {
		for (Punished punished : punisheds)
			punished.setMute(false);
	}

}

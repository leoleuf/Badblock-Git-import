package fr.xmalware.badblock.others.commands;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import fr.badblock.ladder.api.Ladder;
import fr.badblock.ladder.api.chat.RawMessage;
import fr.badblock.ladder.api.chat.RawMessage.ClickEventType;
import fr.badblock.ladder.api.chat.RawMessage.HoverEventType;
import fr.badblock.ladder.api.commands.Command;
import fr.badblock.ladder.api.entities.CommandSender;
import fr.badblock.ladder.api.entities.Player;
import fr.xmalware.badblock.others.BadBlockOthers;
import fr.xmalware.badblock.others.database.BadblockDatabase;
import fr.xmalware.badblock.others.database.Request;
import fr.xmalware.badblock.others.database.Request.RequestType;
import fr.xmalware.badblock.others.friends.FriendPlayer;
import fr.xmalware.badblock.others.friends.Party;
import fr.xmalware.badblock.others.mp.AcceptType;
import fr.xmalware.badblock.others.utils.AntiHackColor;
import fr.xmalware.badblock.others.utils.I18N;

public class LWhitelistCommand extends Command {

	public LWhitelistCommand() {
		super("lwhitelist", null);
	}

	@Override
	public void executeCommand(CommandSender sender, String[] args) {
		if (!(sender instanceof Player)) {
			sender.sendMessage(I18N.getTranslatedMessage("party.onlyplayers"));
			return;
		}
		Player player = (Player) sender;
		// player.sendMessage(prefix + "§cLa commande de groupe a été désactivée
		// temporairement, navré du dérangement.");
		if (args.length == 0) {
			help(player, args);
			return;
		}
		if (args[0].equalsIgnoreCase("help") || args[0].equalsIgnoreCase("aide")) {
			help(player, args);
			return;
		}
		if (args[0].equalsIgnoreCase("list") || args[0].equalsIgnoreCase("liste") || args[0].equalsIgnoreCase("l")) {
			list(player);
			return;
		}
		if (args[0].equalsIgnoreCase("ajouter") || args[0].equalsIgnoreCase("a") || args[0].equalsIgnoreCase("add")) {
			invite(player, args);
			return;
		}
		if (args[0].equalsIgnoreCase("rm") || args[0].equalsIgnoreCase("remove")) {
			leave(player, args);
			return;
		}
		player.sendMessage(I18N.getTranslatedMessage("lwhitelist.unknowncommand"));
	}

	public void msg(Player player, String[] args) {
		FriendPlayer fPlayer = FriendPlayer.get(player);
		if (fPlayer == null)
			return;
		if (fPlayer.party == null) {
			player.sendMessage(I18N.getTranslatedMessage("party.admin.youarenotinagroup"));
			return;
		}
		String message = "";
		int i = 0;
		for (String arg : args) {
			i++;
			if (i == 1)
				continue;
			String spacer = " ";
			if (args.length == i)
				spacer = "";
			message += arg + spacer;
		}
		if (AntiHackColor.isHacking(player, message) || message.contains("§")) {
			return;
		}
		if (message.length() < 1) {
			player.sendMessages(I18N.getTranslatedMessages("party.emptymsg"));
			return;
		}
		for (UUID uuid : fPlayer.party.getOnlineUUIDs("")) {
			Player proxiedPlayer = Ladder.getInstance().getPlayer(uuid);
			if (proxiedPlayer != null) {
				proxiedPlayer.sendMessages(I18N.getTranslatedMessagesWithoutColor("party.msg",
						(fPlayer.party.getLeader().equalsIgnoreCase(player.getName()) ? "§c[Leader] " : "§8"),
						player.getName(), message));
			}
		}
	}

	double round(double value, int places) {
		if (places < 0)
			throw new IllegalArgumentException();

		BigDecimal bd = new BigDecimal(value);
		bd = bd.setScale(places, RoundingMode.HALF_UP);
		return bd.doubleValue();
	}

	private void infos(Player player) {
		if (Party.parties.size() == 0) {
			player.sendMessage(I18N.getTranslatedMessage("party.infos.nogroup"));
			return;
		}
		int online = Party.parties.values().parallelStream().filter(party -> party.getOnlineUUIDs("").size() != 0)
				.collect(Collectors.toList()).size();
		int offline = Party.parties.size() - online;
		player.sendMessage(I18N.getTranslatedMessage("party.infos.memory", Party.parties.size(), online,
				round(online / Party.parties.size() * 100, 2), offline, round(offline / Party.parties.size(), 2)));
	}

	private void cancel(Player player, String[] args) {
		if (args.length != 2) {
			player.sendMessage(I18N.getTranslatedMessage("party.cancel.usage"));
			return;
		}
		FriendPlayer fp = FriendPlayer.get(player);
		String pseudo = args[1];
		if (fp == null)
			return;
		if (fp.getParty() != null && fp.getParty().getLeader().equalsIgnoreCase(pseudo)) {
			player.forceCommand("party leave");
			return;
		}
		if (!isOnline(pseudo)) {
			player.sendMessage(I18N.getTranslatedMessage("party.offline"));
			return;
		}
		Player pl = Ladder.getInstance().getPlayer(pseudo);
		if (pl == null) {
			player.sendMessage(I18N.getTranslatedMessage("party.offline"));
			return;
		}
		FriendPlayer toP = FriendPlayer.get(pl);
		if (toP == null || !toP.connected || !toP.isOkay) {
			player.sendMessage(I18N.getTranslatedMessage("party.offline"));
			return;
		}
		Party party = toP.getParty();
		if (party == null) {
			player.sendMessage(I18N.getTranslatedMessage("party.cancel.unknownparty"));
			return;
		}
		if (!party.getLeader().equalsIgnoreCase(toP.getName())) {
			player.sendMessage(I18N.getTranslatedMessage("party.cancel.unknownparty"));
			return;
		}
		if (party.getWaitingPlayers().contains(player.getName())) {
			party.getWaitingPlayers().remove(player.getName());
			player.sendMessage(I18N.getTranslatedMessage("party.cancel.refused_to", party.getLeader()));
			pl.sendMessage(I18N.getTranslatedMessage("party.cancel.refused_from", player.getName()));
			return;
		}
		player.sendMessage(I18N.getTranslatedMessage("party.cancel.unknownparty"));
	}

	private void help(Player player, String[] args) {
		List<String> helpText = I18N.getTranslatedListMessages("party.help.text");
		List<String> helpClick = I18N.getTranslatedListMessages("party.help.click");
		List<String> helpHover = I18N.getTranslatedListMessages("party.help.hover");
		if (helpText.size() != helpClick.size() || helpText.size() != helpHover.size()) {
			player.sendMessage("§cSynchronization error in the I18N language file: ");
			player.sendMessage("Length: [Text: " + helpText.size() + "];[Click: " + helpClick.size() + "];[Hover: "
					+ helpHover.size() + "]");
			player.sendMessage(
					"§cPlease have the same length in the groupe.help.text, groupe.help.click and groupe.help.hover I18N keys");
			return;
		}
		Iterator<String> textIterator = helpText.iterator();
		Iterator<String> clickIterator = helpClick.iterator();
		Iterator<String> hoverIterator = helpHover.iterator();
		Ladder ladder = Ladder.getInstance();
		while (textIterator.hasNext()) {
			String textMessage = textIterator.next();
			String clickMessage = clickIterator.next();
			String hoverMessage = hoverIterator.next();
			RawMessage component = ladder.createRawMessage(textMessage);
			boolean special = false;
			if (!clickMessage.equalsIgnoreCase("NOTHING")) {
				special = true;
				String[] splitter = clickMessage.split(";");
				if (splitter.length != 2) {
					player.sendMessage("§cUnable to split a ClickEvent (because != 2 / " + splitter.length + "): '"
							+ clickMessage + "'");
					return;
				}
				String clickEventTypeString = splitter[0];
				ClickEventType clickEventType = clickEventTypeString.equalsIgnoreCase("openfile")
						? ClickEventType.OPEN_FILE
						: clickEventTypeString.equalsIgnoreCase("openurl") ? ClickEventType.OPEN_URL
								: clickEventTypeString.equalsIgnoreCase("run") ? ClickEventType.RUN_COMMAND
										: clickEventTypeString.equalsIgnoreCase("suggest")
												? ClickEventType.SUGGEST_COMMAND : null;
				if (clickEventType == null) {
					player.sendMessage("§cUnknown ClickEventType: " + clickEventType);
					return;
				}
				component.setClickEvent(clickEventType, false, splitter[1]);
			}
			if (!hoverMessage.equalsIgnoreCase("NOTHING")) {
				special = true;
				component.setHoverEvent(HoverEventType.SHOW_TEXT, false, hoverMessage);
			}
			if (!special)
				player.sendMessage(textMessage);
			else
				component.send(player);
		}
		/*
		 * player.
		 * sendMessage("§8§l«§b§l-§8§l»§m------§f§8§l«§b§l-§8§l»§b §b§lGroupes §8§l«§b§l-§8§l»§m------§f§8§l«§b§l-§8§l»"
		 * ); RawMessage component = Ladder.getInstance().
		 * createRawMessage("§c> §6/groupe §bhelp§6: liste des commandes");
		 * component.setClickEvent(ClickEventType.RUN_COMMAND, false,
		 * "/groupe help"); component.setHoverEvent(HoverEventType.SHOW_TEXT,
		 * false, "§bVoir les commandes disponibles des joueurs");
		 * component.send(player); component = Ladder.getInstance().
		 * createRawMessage("§c> §6/groupe §blist§6: liste des membres de son groupe"
		 * ); component.setClickEvent(ClickEventType.RUN_COMMAND, false,
		 * "/groupe list"); component.setHoverEvent(HoverEventType.SHOW_TEXT,
		 * false, "§bVoir la liste des membres de son groupe");
		 * component.send(player); component = Ladder.getInstance().
		 * createRawMessage("§c> §6/groupe §btoggle§6: dire qui peut envoyer des requêtes de groupe"
		 * ); component.setClickEvent(ClickEventType.RUN_COMMAND, false,
		 * "/groupe set"); component.setHoverEvent(HoverEventType.SHOW_TEXT,
		 * false,
		 * "§bDéfinir quel type de personne peut vous envoyer des requêtes");
		 * component.send(player); component = Ladder.getInstance().
		 * createRawMessage("§c> §6/groupe §binvite <pseudo>§6: ajouter un joueur dans son groupe (auto-création)"
		 * ); component.setClickEvent(ClickEventType.SUGGEST_COMMAND, false,
		 * "/groupe invite "); component.setHoverEvent(HoverEventType.SHOW_TEXT,
		 * false, "§bInviter quelqu'un dans son groupe");
		 * component.send(player); component = Ladder.getInstance().
		 * createRawMessage("§c> §6/groupe §baccept <pseudo>§6: accepter un joueur de rejoindre son groupe"
		 * ); component.setClickEvent(ClickEventType.SUGGEST_COMMAND, false,
		 * "/groupe accept "); component.setHoverEvent(HoverEventType.SHOW_TEXT,
		 * false, "§bAller dans le groupe de quelqu'un");
		 * component.send(player); component = Ladder.getInstance().
		 * createRawMessage("§c> §6/groupe §bkick §b<pseudo> §6: éjecter un membre de son groupe"
		 * ); component.setClickEvent(ClickEventType.SUGGEST_COMMAND, false,
		 * "/groupe kick "); component.setHoverEvent(HoverEventType.SHOW_TEXT,
		 * false, "§bÉ jecter quelqu'un de son groupe"); component.send(player);
		 * component = Ladder.getInstance().
		 * createRawMessage("§c> §6/groupe §blead §b<pseudo> §6: remplacer le leader du groupe"
		 * ); component.setClickEvent(ClickEventType.SUGGEST_COMMAND, false,
		 * "/groupe admin "); component.setHoverEvent(HoverEventType.SHOW_TEXT,
		 * false, "§bInverser les roles (changement de leader)");
		 * component.send(player); component = Ladder.getInstance().
		 * createRawMessage("§c> §6/groupe §bleave §6: quitter un groupe");
		 * component.setClickEvent(ClickEventType.RUN_COMMAND, false,
		 * "/groupe leave"); component.setHoverEvent(HoverEventType.SHOW_TEXT,
		 * false, "§bQuitter son groupe"); component.send(player); component =
		 * Ladder.getInstance().
		 * createRawMessage("§c> §6/groupe §bfollow §6: activer le suivi ou non dans le groupe"
		 * ); component.setClickEvent(ClickEventType.RUN_COMMAND, false,
		 * "/groupe follow"); component.setHoverEvent(HoverEventType.SHOW_TEXT,
		 * false, "§bActiver ou désactiver le suivi dans le groupe");
		 * component.send(player); component = Ladder.getInstance().
		 * createRawMessage("§c> §6/groupe §btp <pseudo> §6: se téléporter dans la partie d'un membre du groupe"
		 * ); component.setClickEvent(ClickEventType.SUGGEST_COMMAND, false,
		 * "/groupe tp "); component.setHoverEvent(HoverEventType.SHOW_TEXT,
		 * false, "§bSe téléporter dans la partie d'un membre du groupe");
		 * component.send(player); component = Ladder.getInstance().
		 * createRawMessage("§c> §b% §6: caractère dans le chat pour parler en groupe"
		 * ); component.setClickEvent(ClickEventType.SUGGEST_COMMAND, false,
		 * "%"); component.setHoverEvent(HoverEventType.SHOW_TEXT, false,
		 * "§bParler avec les autres membres du groupe avec le prefix %");
		 * component.send(player); player.sendMessage(
		 * "§8§l«§b§l-§8§l»§m--------------------------§f§8§l«§b§l-§8§l»§b");
		 */
	}

	public void list(Player player) {
		FriendPlayer fp = FriendPlayer.get(player);
		if (fp == null)
			return;
		if (!fp.isInParty()) {
			player.sendMessage(I18N.getTranslatedMessage("party.list.notinagroup"));
			return;
		}
		String[] strings = I18N.getTranslatedMessages("party.show_list");
		new Thread() {
			@Override
			public void run() {
				for (String string : strings) {
					if (string.equals("@0")) {
						Party party = fp.getParty();
						player.sendMessages(I18N.getTranslatedMessages("commands.party.list.leader", party.getLeader(),
								(isOnline(party.getLeader()) ? (hasFollow(party.getLeader())
										? I18N.getTranslatedMessage("party.list.follow_on")
										: I18N.getTranslatedMessage("party.list.follow_off")) + " §7: §b"
										+ getServer(party.getLeader()) + " §7(§a" + getBungeeServer(party.getLeader())
										+ "§7)"
										: " " + I18N.getTranslatedMessage("party.list.offline"))));
						try {
							Thread.sleep(50);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						for (String name : party.getPlayersWithoutLeader()) {
							player.sendMessages(
									I18N.getTranslatedMessages("commands.party.list.player", name,
											(isOnline(name)
													? (hasFollow(name)
															? I18N.getTranslatedMessage("party.list.follow_on")
															: I18N.getTranslatedMessage("party.list.follow_off"))
															+ " §7: §b" + getServer(name) + " §7(§a"
															+ getBungeeServer(name) + "§7)"
													: " " + I18N.getTranslatedMessage("party.list.offline"))));
							try {
								Thread.sleep(50);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
					} else
						player.sendMessage(string);
					try {
						Thread.sleep(50);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		}.start();
	}

	public void set(Player player, String[] args) {
		if (args.length < 2) {
			String[] strings = I18N.getTranslatedMessages("party.set.onlyfor");
			for (String string : strings) {
				if (string.equals("@0")) {
					RawMessage component = Ladder.getInstance()
							.createRawMessage(I18N.getTranslatedMessage("party.set.all.message"));
					component.setClickEvent(ClickEventType.RUN_COMMAND, false, "/groupe set ALL");
					component.setHoverEvent(HoverEventType.SHOW_TEXT, false,
							I18N.getTranslatedMessage("party.set.all.hover"));
					RawMessage component2 = Ladder.getInstance()
							.createRawMessage(I18N.getTranslatedMessage("party.set.friends.message"));
					component2.setClickEvent(ClickEventType.RUN_COMMAND, false, "/groupe set FRIENDS");
					component2.setHoverEvent(HoverEventType.SHOW_TEXT, false,
							I18N.getTranslatedMessage("party.set.friends.hover"));
					RawMessage component3 = Ladder.getInstance()
							.createRawMessage(I18N.getTranslatedMessage("party.set.noone.message"));
					component3.setClickEvent(ClickEventType.RUN_COMMAND, false, "/groupe set NOTHING");
					component3.setHoverEvent(HoverEventType.SHOW_TEXT, false,
							I18N.getTranslatedMessage("party.set.noone.hover"));
					component.send(player);
					component2.send(player);
					component3.send(player);
				} else
					player.sendMessage(string);
			}
			return;
		}
		String arg = args[1];
		FriendPlayer fromPlayer = FriendPlayer.get(player);
		if (fromPlayer == null)
			return;
		if (arg.equalsIgnoreCase("ALL")) {
			if (fromPlayer.hasAcceptGroups().equals(AcceptType.ALL_PEOPLE)) {
				player.sendMessage(I18N.getTranslatedMessage("party.set.all.already"));
				return;
			}
			fromPlayer.setAcceptedGroups(AcceptType.ALL_PEOPLE);
			fromPlayer.hasNewChanges = true;
			player.sendMessage(I18N.getTranslatedMessage("party.set.all.done"));
			return;
		}
		if (arg.equalsIgnoreCase("FRIENDS")) {
			if (fromPlayer.hasAcceptGroups().equals(AcceptType.ONLY_FRIENDS)) {
				player.sendMessage(I18N.getTranslatedMessage("party.set.friends.already"));
				return;
			}
			fromPlayer.setAcceptedGroups(AcceptType.ONLY_FRIENDS);
			fromPlayer.hasNewChanges = true;
			player.sendMessage(I18N.getTranslatedMessage("party.set.friends.done"));
			return;
		}
		if (arg.equalsIgnoreCase("NOTHING")) {
			if (fromPlayer.hasAcceptGroups().equals(AcceptType.NO_ONE)) {
				player.sendMessage(I18N.getTranslatedMessage("party.set.noone.already"));
				return;
			}
			fromPlayer.setAcceptedGroups(AcceptType.NO_ONE);
			fromPlayer.hasNewChanges = true;
			player.sendMessage(I18N.getTranslatedMessage("party.set.noone.done"));
			return;
		}
		player.sendMessage(I18N.getTranslatedMessage("party.set.invalid"));
		return;
	}

	public void invite(Player player, String[] args) {
		if (args.length != 2) {
			player.sendMessage(I18N.getTranslatedMessage("party.invite.usage"));
			return;
		}
		FriendPlayer fp = FriendPlayer.get(player);
		String pseudo = args[1];
		if (fp == null)
			return;
		if (fp.isInParty()) {
			if (!fp.getParty().getLeader().equalsIgnoreCase(player.getName())) {
				player.sendMessage(I18N.getTranslatedMessage("party.invite.notaleader"));
				return;
			}
		}
		if (pseudo.equalsIgnoreCase(player.getName())) {
			player.sendMessage(I18N.getTranslatedMessage("party.himself"));
			return;
		}
		if (!isOnline(pseudo)) {
			player.sendMessage(I18N.getTranslatedMessage("party.offline"));
			return;
		}
		Player toPlayer = Ladder.getInstance().getPlayer(pseudo);
		FriendPlayer to = FriendPlayer.get(toPlayer);
		if (to == null) {
			player.sendMessage(I18N.getTranslatedMessage("party.foo"));
			return;
		}
		if (fp.party != null && to.party != null && to.party.equals(fp.party)) {
			player.sendMessage(I18N.getTranslatedMessage("party.alreadyingroup"));
			return;
		}
		if (fp.isInParty() && fp.getParty().getPlayers().contains(to.getName())) {
			player.sendMessage(I18N.getTranslatedMessage("party.alreadyingroup"));
			return;
		}
		if (to.hasAcceptGroups().equals(AcceptType.NO_ONE)) {
			player.sendMessage(I18N.getTranslatedMessage("party.set.noone.error"));
			return;
		}
		if (to.hasAcceptGroups().equals(AcceptType.ONLY_FRIENDS) && !to.getFriendsMap().containsKey(player.getName())) {
			player.sendMessage(I18N.getTranslatedMessage("party.set.friends.error"));
			return;
		}
		if (fp.party != null && fp.party.getWaitingPlayers().contains(to.getName())) {
			player.sendMessage(I18N.getTranslatedMessage("party.waitingfor"));
			return;
		}
		if (fp.party != null && fp.party.getPlayers().size() + fp.party.getWaitingPlayers().size() >= 16) {
			player.sendMessage(I18N.getTranslatedMessage("party.maxslots"));
			return;
		}
		Party party = fp.party;
		if (party == null) {
			party = new Party(fp.getName());
			fp.party = party;
		}
		fp.party.getWaitingPlayers().add(to.getName());
		fp.party.sendToBeChangedInSQL();
		this.updateFollow(fp, player);
		/*
		 * toPlayer.sendMessage(I18N.getTranslatedMessage("party.new",
		 * player.getName())); RawMessage componentAccept =
		 * Ladder.getInstance().createRawMessage(I18N.getTranslatedMessage(
		 * "commands.party.acceptyeah"));
		 * componentAccept.setClickEvent(ClickEventType.RUN_COMMAND, false,
		 * "/groupe accept " + player.getName());
		 * componentAccept.setHoverEvent(HoverEventType.SHOW_TEXT, false,
		 * I18N.getTranslatedMessage("party.hoveraccept", player.getName()));
		 * RawMessage rawMessage = Ladder.getInstance().createRawMessage("");
		 * rawMessage.add(componentAccept);
		 */
		new Thread() {
			@Override
			public void run() {
				String[] strings = I18N.getTranslatedMessages("commands.party.new", player.getName());
				for (String string : strings) {
					String message = "";
					boolean o = false;
					boolean raw = false;
					RawMessage rawMessage = null;
					for (Character character : string.toCharArray()) {
						String stringChar = character.toString();
						if (stringChar.equals("@")) {
							o = true;
						} else {
							if (o) {
								if (stringChar.equals("1") || stringChar.equals("2")) {
									rawMessage = Ladder.getInstance().createRawMessage(message);
									if (stringChar.equals("1")) {
										raw = true;
										RawMessage componentAccept = Ladder.getInstance().createRawMessage(
												I18N.getTranslatedMessage("commands.party.acceptyeah"));
										componentAccept.setClickEvent(ClickEventType.RUN_COMMAND, false,
												"/groupe accept " + player.getName());
										componentAccept.setHoverEvent(HoverEventType.SHOW_TEXT, false,
												I18N.getTranslatedMessage("party.hoveraccept", player.getName()));
										rawMessage.add(componentAccept);
									} else if (stringChar.equals("2")) {
										raw = true;
										RawMessage componentAccept = Ladder.getInstance().createRawMessage(
												I18N.getTranslatedMessage("commands.party.removeyeah"));
										componentAccept.setClickEvent(ClickEventType.RUN_COMMAND, false,
												"/groupe cancel " + player.getName());
										componentAccept.setHoverEvent(HoverEventType.SHOW_TEXT, false,
												I18N.getTranslatedMessage("party.hoverremove", player.getName()));
										rawMessage.add(componentAccept);
									}
									break;
								} else
									message += stringChar;
								o = false;
							} else
								message += stringChar;
						}
					}
					if (rawMessage == null) {
						rawMessage = Ladder.getInstance().createRawMessage(message);
					}
					int i = 0;
					String msg = "";
					boolean ok = false;
					for (Character character : string.toCharArray()) {
						i++;
						if (i < message.length() + 4)
							continue;
						String stringChar = character.toString();
						if (stringChar.equals("@")) {
							o = true;
						} else {
							if (o) {
								if (stringChar.equals("1")) {
									raw = true;
									ok = true;
									RawMessage componentAccept = Ladder.getInstance()
											.createRawMessage(I18N.getTranslatedMessage("commands.party.acceptyeah"));
									componentAccept.setClickEvent(ClickEventType.RUN_COMMAND, false,
											"/groupe accept " + player.getName());
									componentAccept.setHoverEvent(HoverEventType.SHOW_TEXT, false,
											I18N.getTranslatedMessage("party.hoveraccept", player.getName()));
									rawMessage.add(componentAccept);
									break;
								} else if (stringChar.equals("2")) {
									raw = true;
									ok = true;
									RawMessage componentAccept = Ladder.getInstance()
											.createRawMessage(I18N.getTranslatedMessage("commands.party.removeyeah"));
									componentAccept.setClickEvent(ClickEventType.RUN_COMMAND, false,
											"/groupe cancel " + player.getName());
									componentAccept.setHoverEvent(HoverEventType.SHOW_TEXT, false,
											I18N.getTranslatedMessage("party.hoverremove", player.getName()));
									rawMessage.add(componentAccept);
									break;
								} else
									msg += stringChar;
								o = false;
							} else
								msg += stringChar;
						}
					}
					if (!ok && !msg.equals("")) {
						RawMessage addedMessage = Ladder.getInstance().createRawMessage(msg);
						rawMessage.add(addedMessage);
					}
					if (!raw)
						toPlayer.sendMessage(string);
					else
						rawMessage.send(toPlayer);
					try {
						Thread.sleep(50);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		}.start();
		player.sendMessage(I18N.getTranslatedMessage("party.sended", toPlayer.getName()));
		// rawMessage.send(toPlayer);
	}

	public void accept(Player player, String[] args) {
		if (args.length != 2) {
			player.sendMessage(I18N.getTranslatedMessage("party.accept.usage"));
			return;
		}
		FriendPlayer fp = FriendPlayer.get(player);
		String pseudo = args[1];
		if (fp == null)
			return;
		if (pseudo.equalsIgnoreCase(player.getName())) {
			player.sendMessage(I18N.getTranslatedMessage("party.himself"));
			return;
		}
		if (fp.isInParty()) {
			player.sendMessage(I18N.getTranslatedMessage("party.accept.alreadyingroup"));
			return;
		}
		if (!isOnline(pseudo)) {
			player.sendMessage(I18N.getTranslatedMessage("party.offline"));
			return;
		}
		Player toPlayer = Ladder.getInstance().getPlayer(pseudo);
		if (toPlayer == null) {
			player.sendMessage(I18N.getTranslatedMessage("party.offline"));
			return;
		}
		FriendPlayer to = FriendPlayer.get(toPlayer);
		if (to == null)
			return;
		if (to.party == null) {
			player.sendMessage(I18N.getTranslatedMessage("party.alreadyingroup"));
			return;
		}
		if (!to.party.getWaitingPlayers().contains(player.getName())) {
			player.sendMessage(I18N.getTranslatedMessage("party.accept.expire"));
			return;
		}
		if (to.party.equals(fp.party)) {
			player.sendMessage(I18N.getTranslatedMessage("party.accept.already"));
			return;
		}
		if (!to.party.getLeader().equalsIgnoreCase(toPlayer.getName())) {
			player.sendMessage(I18N.getTranslatedMessage("party.accept.notleader", toPlayer.getName()));
			return;
		}
		fp.groupFollow = true;
		player.canJoinHimself(true);
		fp.party = to.party;
		fp.party.getWaitingPlayers().remove(player.getName());
		fp.party.getPlayers().add(player.getName());
		player.setPlayersWithHim(new ArrayList<UUID>());
		if (to.groupFollow)
			toPlayer.setPlayersWithHim(fp.party.getFollowUUIDs(toPlayer.getName()));
		fp.party.sendToBeChangedInSQL();
		this.updateFollow(fp, player);
		for (String pl : fp.party.getPlayers())
			if (isOnline(pl))
				Ladder.getInstance().getPlayer(pl).sendMessage(
						I18N.getTranslatedMessage("party.accept.join", player.getName(), fp.party.getPlayers().size()));
	}

	public void kick(Player player, String[] args) {
		if (args.length != 2) {
			player.sendMessage(I18N.getTranslatedMessage("party.kick.usage"));
			return;
		}
		FriendPlayer fp = FriendPlayer.get(player);
		String pseudo = args[1];
		if (fp == null)
			return;
		if (!fp.isInParty()) {
			player.sendMessage(I18N.getTranslatedMessage("party.kick.youarenotinagroup"));
			return;
		};
		if (fp.isInParty()) {
			if (!fp.getParty().getLeader().equalsIgnoreCase(player.getName())) {
				player.sendMessage(I18N.getTranslatedMessage("party.invite.notaleader"));
				return;
			}
		}
		if (pseudo.equalsIgnoreCase(player.getName())) {
			player.sendMessage(I18N.getTranslatedMessage("party.himself"));
			return;
		}
		if (fp.party != null && !fp.getParty().getPlayers().contains(pseudo)
				&& !fp.party.getWaitingPlayers().contains(pseudo)) {
			player.sendMessage(I18N.getTranslatedMessage("party.notinyourgroup"));
			return;
		}
		if (fp.party != null && fp.party.getWaitingPlayers().contains(pseudo)) {
			fp.party.getWaitingPlayers().remove(pseudo);
			Player toPlayer = Ladder.getInstance().getPlayer(pseudo);
			if (toPlayer != null)
				toPlayer.sendMessage(I18N.getTranslatedMessage("party.kick.cancelled_from", fp.getName()));
			player.sendMessage(I18N.getTranslatedMessage("party.kick.cancelled_to", pseudo));
			return;
		}
		if (fp.isInParty() && !fp.getParty().getPlayers().contains(pseudo)) {
			player.sendMessage(I18N.getTranslatedMessage("party.notinyourgroup"));
			return;
		}
		fp.party.getPlayers().remove(pseudo);
		for (String pl : fp.party.getPlayers()) {
			Player plo = Ladder.getInstance().getPlayer(pl);
			if (plo != null) {
				plo.sendMessage(I18N.getTranslatedMessage("party.kick.message", pseudo, fp.party.getPlayers().size()));
			}
		}
		if (fp.groupFollow)
			player.setPlayersWithHim(fp.party.getFollowUUIDs(player.getName()));
		fp.party.sendToBeChangedInSQL();
		this.updateFollow(fp, player);
		Player toPlayer = Ladder.getInstance().getPlayer(pseudo);
		if (toPlayer != null) {
			FriendPlayer toP = FriendPlayer.get(toPlayer);
			if (toP == null) {
				player.sendMessage(I18N.getTranslatedMessage("party.kick.notloaded"));
				return;
			}
			if (toP.party == null) {
				player.sendMessage(I18N.getTranslatedMessage("party.notinagroup"));
				return;
			}
			toP.party.sendToBeChangedInSQL();
			toP.party = null;
			toPlayer.setPlayersWithHim(new ArrayList<UUID>());
			toPlayer.canJoinHimself(true);
			this.updateFollow(toP, toPlayer);
			toPlayer.sendMessage(I18N.getTranslatedMessage("party.kick.kicked"));
			if (fp.party.getPlayersWithoutLeader().size() == 0) {
				player.sendMessage(I18N.getTranslatedMessage("party.kick.bye"));
				player.forceCommand("groupe leave");
			}
		} else {
			BadblockDatabase.getInstance()
					.addRequest(new Request(
							"UPDATE friends SET party = 'NULL' WHERE pseudo = '"
									+ BadblockDatabase.getInstance().mysql_real_escape_string(pseudo) + "'",
							RequestType.SETTER));
		}
		if (fp.party != null)
			fp.party.sendToBeChangedInSQL();
	}

	public void admin(Player player, String[] args) {
		if (args.length != 2) {
			player.sendMessage(I18N.getTranslatedMessage("party.admin.usage"));
			return;
		}
		FriendPlayer fp = FriendPlayer.get(player);
		String pseudo = args[1];
		if (fp == null)
			return;
		if (!fp.isInParty()) {
			player.sendMessage(I18N.getTranslatedMessage("party.admin.youarenotinagroup"));
			return;
		}
		if (fp.isInParty()) {
			if (!fp.getParty().getLeader().equalsIgnoreCase(player.getName())) {
				player.sendMessage(I18N.getTranslatedMessage("party.admin.notaleader"));
				return;
			}
		}
		if (pseudo.equalsIgnoreCase(player.getName())) {
			player.sendMessage(I18N.getTranslatedMessage("party.himself"));
			return;
		}
		if (!fp.getParty().getPlayers().contains(pseudo)) {
			if (fp.getParty().getWaitingPlayers().contains(pseudo)) {
				player.sendMessage(I18N.getTranslatedMessage("party.admin.notnow"));
				return;
			}
			player.sendMessage(I18N.getTranslatedMessage("party.admin.notinyourgroup"));
			return;
		}
		fp.getParty().sendToBeChangedInSQL();
		fp.getParty().setLeader(pseudo);
		if (isOnline(pseudo)) {
			Player po = Ladder.getInstance().getPlayer(pseudo);
			if (po != null)
				po.setPlayersWithHim(fp.getParty().getFollowUUIDs(po.getName()));
		}
		if (fp.groupFollow)
			player.setPlayersWithHim(new ArrayList<UUID>());
		for (String pl : fp.getParty().getPlayers())
			if (isOnline(pl))
				Ladder.getInstance().getPlayer(pl)
						.sendMessage(I18N.getTranslatedMessage("party.admin.message", pseudo));
		this.updateFollow(fp, player);
	}

	public void follow(Player player, String[] args) {
		if (args.length != 1) {
			player.sendMessage(I18N.getTranslatedMessage("party.follow.usage"));
			return;
		}
		FriendPlayer fp = FriendPlayer.get(player);
		if (fp == null)
			return;
		if (!fp.isInParty()) {
			player.sendMessage(I18N.getTranslatedMessage("party.follow.youarenotinagroup"));
			return;
		}
		if (fp.lastGroupSetFollow > System.currentTimeMillis()) {
			player.sendMessage(I18N.getTranslatedMessage("party.follow.antispam"));
			return;
		}
		if (fp.groupFollow) {
			fp.groupFollow = false;
			for (String pl : fp.getParty().getPlayers()) {
				if (isOnline(pl)) {
					Player lo = Ladder.getInstance().getPlayer(pl);
					if (fp.getParty().getLeader().equalsIgnoreCase(player.getName())) {
						lo.canJoinHimself(true);
						lo.sendMessage(I18N.getTranslatedMessage("party.follow.leaderdisabled", player.getName()));
						lo.sendMessage(I18N.getTranslatedMessage("party.follow.leaderdisabledinfo"));
					} else {
						lo.sendMessage(I18N.getTranslatedMessage("party.follow.disabled", player.getName()));
					}
				}
			}
			if (fp.getParty().getLeader().equalsIgnoreCase(player.getName())) {
				player.canJoinHimself(true);
				player.setPlayersWithHim(new ArrayList<UUID>());
			} else {
				player.sendMessage(I18N.getTranslatedMessage("party.follow.enabledmessage"));
				player.canJoinHimself(true);
				Player lo = Ladder.getInstance().getPlayer(fp.getParty().getLeader());
				if (lo != null) {
					lo.setPlayersWithHim(fp.getParty().getFollowUUIDs(lo.getName()));
				}
			}
		} else {
			fp.groupFollow = true;
			for (String pl : fp.getParty().getPlayers()) {
				if (isOnline(pl)) {
					Player lo = Ladder.getInstance().getPlayer(pl);
					lo.sendMessage(I18N.getTranslatedMessage("party.follow.enabled", player.getName()));
					if (fp.getParty().getLeader().equalsIgnoreCase(player.getName())) {
						lo.canJoinHimself(!fp.groupFollow);
						lo.sendMessage(I18N.getTranslatedMessage("party.follow.leaderenabledinfo"));
					}
				}
			}
			if (fp.getParty().getLeader().equalsIgnoreCase(player.getName())) {
				player.setPlayersWithHim(fp.getParty().getFollowUUIDs(player.getName()));
				player.canJoinHimself(true);
			} else {
				player.canJoinHimself(false);
				player.sendMessage(I18N.getTranslatedMessage("party.follow.notnow"));
				Player lo = Ladder.getInstance().getPlayer(fp.getParty().getLeader());
				if (lo != null) {
					lo.setPlayersWithHim(fp.getParty().getFollowUUIDs(lo.getName()));
				}
			}
		}
		this.updateFollow(fp, player);
		fp.party.sendToBeChangedInSQL();
		fp.lastGroupSetFollow = System.currentTimeMillis() + 15_000L;
	}

	public void leave(Player player, String[] args) {
		if (args.length != 1) {
			player.sendMessage(I18N.getTranslatedMessage("party.leave.usage"));
			return;
		}
		FriendPlayer fp = FriendPlayer.get(player);
		if (fp == null)
			return;
		if (fp.party == null) {
			player.sendMessage(I18N.getTranslatedMessage("party.leave.youarenotinagroup"));
			return;
		}
		if (!fp.party.getPlayers().contains(player.getName())) {
			fp.party = null;
			player.sendMessage(I18N.getTranslatedMessage("party.leave.youarenotinagroup"));
			return;
		}
		// C'est le leader
		if (fp.party.getLeader().equalsIgnoreCase(player.getName())) {
			for (String pl : fp.party.getPlayers())
				if (isOnline(pl)) {
					Player lo = Ladder.getInstance().getPlayer(pl);
					FriendPlayer toPlayer = FriendPlayer.get(lo);
					if (toPlayer == null)
						continue;
					toPlayer.party = null;
					lo.canJoinHimself(true);
					lo.setPlayersWithHim(new ArrayList<UUID>());
					lo.sendMessage(I18N.getTranslatedMessage("party.leave.messageremoved", player.getName()));
				} else
					BadblockDatabase.getInstance()
							.addRequest(new Request(
									"UPDATE friends SET party = 'NULL' WHERE pseudo = '"
											+ BadblockDatabase.getInstance().mysql_real_escape_string(pl) + "'",
									RequestType.SETTER));
			player.sendMessage(I18N.getTranslatedMessage("party.leave.messageremovedandquit"));
			player.setPlayersWithHim(new ArrayList<UUID>());
			player.canJoinHimself(true);
			if (fp.party != null)
				fp.party.sendToBeChangedInSQL();
			fp.party = null;
			fp.hasNewChanges = true;
		} else {
			fp.party.getPlayers().remove(player.getName());
			for (String pl : fp.party.getPlayers())
				if (isOnline(pl)) {
					Player lo = Ladder.getInstance().getPlayer(pl);
					lo.sendMessage(I18N.getTranslatedMessage("party.leave.message", player.getName(),
							fp.party.getPlayers().size()));
				} else
					BadblockDatabase.getInstance()
							.addRequest(
									new Request(
											"UPDATE friends SET party = '"
													+ BadblockDatabase.getInstance()
															.mysql_real_escape_string(BadBlockOthers.getInstance()
																	.getGson().toJson(fp.party))
													+ "' WHERE pseudo = '"
													+ BadblockDatabase.getInstance().mysql_real_escape_string(pl) + "'",
											RequestType.SETTER));
			player.canJoinHimself(true);
			player.sendMessage(I18N.getTranslatedMessage("party.leave.messagefy"));
			Player pp = Ladder.getInstance().getPlayer(fp.party.getLeader());
			if (pp != null) {
				FriendPlayer pfp = FriendPlayer.get(pp);
				if (pfp != null)
					if (pfp.party != null && pfp.groupFollow)
						pp.setPlayersWithHim(pfp.party.getFollowUUIDs(pp.getName()));
			}
			if (fp.party.getPlayersWithoutLeader().size() == 0) {
				Player lo = Ladder.getInstance().getPlayer(fp.party.getLeader());
				if (lo != null) {
					FriendPlayer toPlayer = FriendPlayer.get(lo);
					if (toPlayer != null) {
						lo.sendMessage(I18N.getTranslatedMessage("party.leave.nomoreplayers"));
						lo.forceCommand("groupe leave");
					}
				} else {
					BadblockDatabase.getInstance()
							.addRequest(new Request(
									"UPDATE friends SET party = 'NULL' WHERE pseudo = '" + BadblockDatabase
											.getInstance().mysql_real_escape_string(fp.party.getLeader()) + "'",
									RequestType.SETTER));
				}
			}
			fp.party.sendToBeChangedInSQL();
			fp.hasNewChanges = true;
			this.updateFollow(fp, player);
			fp.party = null;
		}
	}

	public void tp(Player player, String[] args) {
		FriendPlayer fp = FriendPlayer.get(player);
		if (fp == null)
			return;
		if (!fp.isInParty()) {
			player.sendMessage(I18N.getTranslatedMessage("party.tp.youarenotinagroup"));
			return;
		}
		if (args.length != 2) {
			if (fp.getParty().getLeader().equalsIgnoreCase(player.getName())) {
				player.sendMessage(I18N.getTranslatedMessage("party.tp.usage"));
				return;
			}
			if (!isOnline(fp.getParty().getLeader())) {
				player.sendMessage(I18N.getTranslatedMessage("party.tp.offlineleader"));
				return;
			}
			Player po = Ladder.getInstance().getPlayer(fp.getParty().getLeader());
			if (po != null) {
				if (po.getBukkitServer().getName().startsWith("login")) {
					player.sendMessage(I18N.getTranslatedMessage("party.tp.leaderatloginserver"));
					return;
				}
				player.connect(po.getBukkitServer());
			}
			return;
		}
		String pseudo = args[1];
		if (pseudo.equalsIgnoreCase(player.getName())) {
			player.sendMessage(I18N.getTranslatedMessage("party.himself"));
			return;
		}
		if (!isOnline(pseudo)) {
			player.sendMessage(I18N.getTranslatedMessage("party.tp.offlineplayer"));
			return;
		}
		Player po = Ladder.getInstance().getPlayer(pseudo);
		if (po != null) {
			if (!fp.getParty().getOnlineUUIDs(player.getName()).contains(po.getUniqueId())) {
				player.sendMessage(I18N.getTranslatedMessage("party.tp.notinyourgroup"));
				return;
			}
			if (po.getBukkitServer().getName().startsWith("login")) {
				player.sendMessage(I18N.getTranslatedMessage("party.tp.playeratloginserver"));
				return;
			}
			player.connect(po.getBukkitServer());
		}
	}

	public String getServer(String pseudo) {
		if (!isOnline(pseudo))
			return I18N.getTranslatedMessage("party.unknown");
		Player player = Ladder.getInstance().getPlayer(pseudo);
		if (player != null)
			return player.getBukkitServer().getName();
		return I18N.getTranslatedMessage("party.unknown");
	}

	public String getBungeeServer(String pseudo) {
		if (!isOnline(pseudo))
			return I18N.getTranslatedMessage("party.unknown");
		Player player = Ladder.getInstance().getPlayer(pseudo);
		if (player != null)
			return player.getBungeeServer().getName();
		return I18N.getTranslatedMessage("party.unknown");
	}

	public boolean isOnline(String pseudo) {
		Player player = Ladder.getInstance().getPlayer(pseudo);
		return player != null && player.getBukkitServer() != null && player.getBungeeServer() != null
				&& !player.getBukkitServer().getName().startsWith("login");
	}

	public FriendPlayer get(String pseudo) {
		Player player = Ladder.getInstance().getPlayer(pseudo);
		if (player == null)
			return null;
		return FriendPlayer.get(player);
	}

	public boolean hasFollow(String pseudo) {
		FriendPlayer fp = get(pseudo);
		if (fp == null)
			return false;
		return fp.hasGroupFollowing();
	}

	public AcceptType getType(String pseudo) {
		return get(pseudo).hasAcceptGroups();
	}

	public void updateFollow(FriendPlayer friendPlayer, Player player) {
		if (friendPlayer.party == null) {
			player.canJoinHimself(true);
			player.setPlayersWithHim(new ArrayList<UUID>());
			return;
		}
		if (friendPlayer.party.getLeader().equalsIgnoreCase(player.getName())) {
			if (friendPlayer.groupFollow) {
				player.canJoinHimself(true);
				player.setPlayersWithHim(friendPlayer.party.getFollowUUIDs(player.getName()));
				return;
			}
			player.canJoinHimself(true);
			player.setPlayersWithHim(new ArrayList<UUID>());
		} else {
			if (friendPlayer.groupFollow) {
				Player lo = Ladder.getInstance().getPlayer(friendPlayer.party.getLeader());
				boolean joinHimself = false;
				boolean onlineLeader = false;
				if (lo != null) {
					onlineLeader = true;
					FriendPlayer lf = FriendPlayer.get(lo);
					if (lf != null) {
						if (!lf.groupFollow)
							joinHimself = true;
						else {
							lo.setPlayersWithHim(friendPlayer.party.getFollowUUIDs(lo.getName()));
						}
					} else {
						joinHimself = true;
						player.setPlayersWithHim(new ArrayList<>());
					}
				} else {
					joinHimself = true;
					player.setPlayersWithHim(new ArrayList<>());
				}
				if (!onlineLeader) {
					joinHimself = true;
					player.setPlayersWithHim(new ArrayList<>());
				}
				player.canJoinHimself(joinHimself);
				return;
			}
			Player lo = Ladder.getInstance().getPlayer(friendPlayer.party.getLeader());
			if (lo != null) {
				FriendPlayer lf = FriendPlayer.get(lo);
				if (lf != null) {
					lo.setPlayersWithHim(friendPlayer.party.getFollowUUIDs(lo.getName()));
				}
			}
			player.canJoinHimself(true);
			player.setPlayersWithHim(new ArrayList<UUID>());
		}
	}

}

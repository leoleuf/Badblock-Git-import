package fr.xmalware.badblock.others.commands;

import java.sql.ResultSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Timer;
import java.util.stream.Stream;

import fr.badblock.ladder.api.Ladder;
import fr.badblock.ladder.api.chat.RawMessage;
import fr.badblock.ladder.api.chat.RawMessage.ClickEventType;
import fr.badblock.ladder.api.chat.RawMessage.HoverEventType;
import fr.badblock.ladder.api.commands.Command;
import fr.badblock.ladder.api.entities.CommandSender;
import fr.badblock.ladder.api.entities.Player;
import fr.xmalware.badblock.others.BadBlockOthers;
import fr.xmalware.badblock.others.database.BadblockDatabase;
import fr.xmalware.badblock.others.database.Request;
import fr.xmalware.badblock.others.database.Request.RequestType;
import fr.xmalware.badblock.others.friends.Friend;
import fr.xmalware.badblock.others.friends.FriendPlayer;
import fr.xmalware.badblock.others.friends.FriendStatus;
import fr.xmalware.badblock.others.utils.I18N;

public class FriendCommand extends Command {
	
	private static RawMessage	 spacerComponent 		 = Ladder.getInstance().createRawMessage(" - ");
	
	public FriendCommand() {
		super ("friends", null, "friend", "ami", "amis", "a");
	}
	
	@Override
	public void executeCommand(CommandSender sender, String[] args) {
		if (!(sender instanceof Player)) {
			sender.sendMessage(I18N.getTranslatedMessage("commands.friend.onlyplayers"));
			return;
		}
		Player player = (Player) sender;
		if (args.length == 0) {
			help(player);
			return;
		}
		if (args[0].equalsIgnoreCase("help") || args[0].equalsIgnoreCase("aide")) {
			help(player);
			return;
		}
		if (args[0].equalsIgnoreCase("remove") || args[0].equalsIgnoreCase("delete") || args[0].equalsIgnoreCase("supprimer")) {
			remove(player, args);
			return;
		}
		if (args[0].equalsIgnoreCase("add") || args[0].equalsIgnoreCase("ajouter") || args[0].equalsIgnoreCase("invite")) {
			add(player, args);
			return;
		}
		if (args[0].equalsIgnoreCase("on") || args[0].equalsIgnoreCase("off")) {
			state(player, args);
			return;
		}
		if (args[0].equalsIgnoreCase("list")) {
			list(player);
			return;
		}
		player.sendMessage(I18N.getTranslatedMessage("commands.friend.unknowncommand"));
	}
	
	public void clear(Player player) {
		FriendPlayer from = FriendPlayer.get(player);
		if (from == null) return;
		int nb = from.getFriendsMap().size();
		for (String f : from.getFriendsMap().keySet())
			player.forceCommand("friends remove " + f);
		player.sendMessage(I18N.getTranslatedMessage("commands.friend.clear"));
		from.hasNewChanges = true;
	}
	
	public void addall(Player player) {
		final String name = player.getName();
		new Thread() {
			@Override
			public void run() {
				Player prpl = Ladder.getInstance().getPlayer(name);
				if (prpl != null) {
					for (Player player : BadBlockOthers.getInstance().getLadder().getOnlinePlayers()) {
						prpl.forceCommand("friends add " + player.getName());
						try {
							Thread.sleep(10);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}
			}
		}.start();
	}
	
	public void addall2(Player player) {
		FriendPlayer from = FriendPlayer.get(player);
		if (from == null) return;
		from.hasNewChanges = true;
		BadblockDatabase.getInstance().addRequest(new Request("SELECT * FROM friends", RequestType.GETTER, "") {
			@Override
			public void done(ResultSet resultSet) {
				try {
					while (resultSet.next()) {
						try {
							String pseudo = resultSet.getString("pseudo");
							Player pl = Ladder.getInstance().getPlayer(pseudo);
							if (pl == null) {
								if (!pl.hasPermission("others.friendsbypass") && from.getFriendsMap().size() >= 500) {
									player.sendMessage(I18N.getTranslatedMessage("commands.friend.reachedlimit"));
									return;
								}
								Map<String, Friend> friends = BadBlockOthers.getInstance().getGson().fromJson(resultSet.getString("friends"), FriendPlayer.collectionType);
								// Demande déjà envoyée, réponse donc
								if (friends.containsKey(player.getName())) {
									if (friends.get(player.getName()).getStatus().equals(FriendStatus.WAITING) && friends.get(player.getName()).getDemander().equalsIgnoreCase(player.getName())) {
										player.sendMessage(I18N.getTranslatedMessage("commands.friend.already.wait"));
										continue;
									}
									if (friends.get(player.getName()).getStatus().equals(FriendStatus.OK)) {
										player.sendMessage(I18N.getTranslatedMessage("commands.friend.already.inlist"));
										continue;
									}
									Friend friend = from.getFriendsMap().get(pseudo);
									if (friend == null) continue;
									friend.setStatus(FriendStatus.OK);
									friends.get(player.getName()).setStatus(FriendStatus.OK);
									from.lastFriendsManage.put(pseudo, System.currentTimeMillis() + 30_000L);
									from.hasNewChanges = true;
									BadblockDatabase.getInstance().addRequest(new Request("UPDATE friends SET friends = '" +
											BadblockDatabase.getInstance().mysql_real_escape_string(BadBlockOthers.getInstance().getGson().toJson(friends))
											+ "' WHERE pseudo = '" + BadblockDatabase.getInstance().mysql_real_escape_string(pseudo) + "'", RequestType.SETTER));
									player.sendMessage(I18N.getTranslatedMessage("commands.friend.done", pseudo));
									continue;
								}
								FriendStatus status = FriendStatus.OK;
								if (!player.hasPermission("friends.bypass") && !from.tail) {
									status = FriendStatus.WAITING;
									String acceptRequest = resultSet.getString("acceptRequests");
									boolean acceptRequests = Boolean.parseBoolean(acceptRequest);
									if (!acceptRequests) {
										player.sendMessage(I18N.getTranslatedMessage("friend.set_on_ondemand"));
										continue;
									}
								}
								friends.put(player.getName(), new Friend(player.getName(), pseudo, status));
								from.getFriendsMap().put(pseudo, new Friend(player.getName(), pseudo, status));
								from.lastFriendsManage.put(pseudo, System.currentTimeMillis() + 30_000L);
								from.hasNewChanges = true;
								BadblockDatabase.getInstance().addRequest(new Request("UPDATE friends SET friends = '" + 
										BadblockDatabase.getInstance().mysql_real_escape_string(BadBlockOthers.getInstance().getGson().toJson(friends)) +
										"' WHERE pseudo = '" + BadblockDatabase.getInstance().mysql_real_escape_string(pseudo) + "'", RequestType.SETTER));
								if (status.equals(FriendStatus.OK)) {
									player.sendMessage(I18N.getTranslatedMessage("commands.friend.done", pseudo));
								}else
									player.sendMessage(I18N.getTranslatedMessage("commands.friend.sended", pseudo));
							}
						}catch(Exception error) {
							error.printStackTrace();
						}
						try {
							Thread.sleep(10);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
					player.sendMessage(I18N.getTranslatedMessage("commands.friend.bomberfriendsdone"));
				}catch(Exception error) {
					error.printStackTrace();
				}
			}
		});
	}
	
	public void help(Player player) {
		player.sendMessages(I18N.getTranslatedMessages("commands.friend.help"));
		/*player.sendMessages("§8§l«§b§l-§8§l»§m------§f§8§l«§b§l-§8§l»§b §b§lAmis §8§l«§b§l-§8§l»§m------§f§8§l«§b§l-§8§l»",
				"§c> §6/friends §bhelp §6: liste des commandes", 
				"§c> §6/friends §badd <pseudo> §6: ajouter/accepter un joueur à ses amis",
				"§c> §6/friends §bremove <pseudo> §6: retirer un joueur de ses amis",
				"§c> §6/friends §bon/off §6: activer/désactiver les nouvelles demandes d'amis",
				"§c> §6/friends §blist §6: liste de vos amis",
				"§8§l«§b§l-§8§l»§m----------------------§f§8§l«§b§l-§8§l»§b");*/
	}
	
	public void add(Player player, String[] args) {
		// Usage: /friends add <pseudo>
		if (args.length != 2) {
			player.sendMessage(I18N.getTranslatedMessage("commands.friend.add.usage"));
			return;
		}
		String pseudo = args[1];
		if (pseudo.equalsIgnoreCase(player.getName())) {
			player.sendMessage(I18N.getTranslatedMessage("commands.friend.himself", pseudo));
			return;
		}
		FriendPlayer from = FriendPlayer.get(player);
		if (from == null) return;
		if (!player.hasPermission("others.friendsbypass") && from.getFriendsMap().size() >= 500) {	
			player.sendMessage(I18N.getTranslatedMessage("commands.friend.reachedlimit"));
			return;
		}
		if (from.lastFriendsManage.containsKey(pseudo) && from.lastFriendsManage.get(pseudo) > System.currentTimeMillis()) {
			player.sendMessage(I18N.getTranslatedMessage("commands.friend.remove.waitbetweeninteractions"));
			return;
		}
		Player toPlayer = BadBlockOthers.getInstance().getLadder().getPlayer(pseudo);
		if (toPlayer == null) {
			BadblockDatabase.getInstance().addRequest(new Request("SELECT * FROM friends WHERE pseudo = '" 
		+ BadblockDatabase.getInstance().mysql_real_escape_string(pseudo) + "'", RequestType.GETTER, "") {
				@Override
				public void done(ResultSet resultSet) {
					try {
						if (resultSet.next()) {
							try {
								Map<String, Friend> friends = BadBlockOthers.getInstance().getGson().fromJson(resultSet.getString("friends"), FriendPlayer.collectionType);
								// Demande déjà envoyée, réponse donc
								if (friends.containsKey(player.getName())) {
									if (friends.get(player.getName()).getStatus().equals(FriendStatus.WAITING) && friends.get(player.getName()).getDemander().equalsIgnoreCase(player.getName())) {
										player.sendMessage(I18N.getTranslatedMessage("commands.friend.already.wait"));
										return;
									}
									if (friends.get(player.getName()).getStatus().equals(FriendStatus.OK)) {
										player.sendMessage(I18N.getTranslatedMessage("commands.friend.already.inlist"));
										return;
									}
									Friend friend = from.getFriendsMap().get(pseudo);
									if (friend == null) return;
									friend.setStatus(FriendStatus.OK);
									friends.get(player.getName()).setStatus(FriendStatus.OK);
									from.lastFriendsManage.put(pseudo, System.currentTimeMillis() + 30_000L);
									from.hasNewChanges = true;
									BadblockDatabase.getInstance().addRequest(new Request("UPDATE friends SET friends = '" + 
											BadblockDatabase.getInstance().mysql_real_escape_string(BadBlockOthers.getInstance().getGson().toJson(friends))
											+ "' WHERE pseudo = '" + BadblockDatabase.getInstance().mysql_real_escape_string(pseudo) + "'", RequestType.SETTER));
									player.sendMessage(I18N.getTranslatedMessage("commands.friend.done", pseudo));
									return;
								}
								FriendStatus status = FriendStatus.OK;
								if (!player.hasPermission("friends.bypass") && !from.tail) {
									status = FriendStatus.WAITING;
									String acceptRequest = resultSet.getString("acceptRequests");
									boolean acceptRequests = Boolean.parseBoolean(acceptRequest);
									if (!acceptRequests) {
										player.sendMessage(I18N.getTranslatedMessage("friend.set_on_ondemand"));
										return;
									}
								}
								friends.put(player.getName(), new Friend(player.getName(), pseudo, status));
								from.getFriendsMap().put(pseudo, new Friend(player.getName(), pseudo, status));
								from.lastFriendsManage.put(pseudo, System.currentTimeMillis() + 30_000L);
								from.hasNewChanges = true;
								BadblockDatabase.getInstance().addRequest(new Request("UPDATE friends SET friends = '" + 
										BadblockDatabase.getInstance().mysql_real_escape_string(BadBlockOthers.getInstance().getGson().toJson(friends)) + "' WHERE pseudo = '" + BadblockDatabase.getInstance().mysql_real_escape_string(pseudo) + "'", RequestType.SETTER));
								if (status.equals(FriendStatus.WAITING))
									player.sendMessage(I18N.getTranslatedMessage("commands.friend.sended", pseudo));
								else player.sendMessage(I18N.getTranslatedMessage("commands.friend.done", pseudo));
							}catch(Exception error) {
								error.printStackTrace();
							}
						}else{
							player.sendMessage(I18N.getTranslatedMessage("commands.friend.unknownplayer", pseudo));
						}
					}catch(Exception error) {
						error.printStackTrace();
					}
				}
			}); 
			return;
		}
		FriendPlayer to = FriendPlayer.get(toPlayer);
		if (to == null) return;
		// Acceptation à une demande d'ami
		if (to.hasDemandedFriend(player)) {
			if (from.hasAcceptedFriend(toPlayer)) {
				player.sendMessage(I18N.getTranslatedMessage("commands.friend.already.inlist", pseudo));
				return;
			}
			Friend friend = to.getFriendsMap().get(player.getName());
			friend.setStatus(FriendStatus.OK);
			if (from.getFriendsMap().get(pseudo) == null) {
				from.getFriendsMap().put(to.getName(), friend);
			}else{
				from.getFriendsMap().get(to.getName()).setStatus(FriendStatus.OK);
			}
			from.hasNewChanges = true;
			to.hasNewChanges = true;
			player.sendMessage(I18N.getTranslatedMessage("commands.friend.done", toPlayer.getName()));
			toPlayer.sendMessage(I18N.getTranslatedMessage("commands.friend.done", player.getName()));
			from.lastFriendsManage.put(pseudo, System.currentTimeMillis() + 30_000L);
			return;
		}
		if (from.hasAcceptedFriend(toPlayer)) {
			player.sendMessage(I18N.getTranslatedMessage("commands.friend.already.inlist"));
			return;
		}
		if (from.hasWaitingFriend(toPlayer)) {
			player.sendMessage(I18N.getTranslatedMessage("commands.friend.already.wait"));
			return;
		}
		FriendStatus status = FriendStatus.OK;
		if (!player.hasPermission("friends.bypass") && !from.tail) {
			status = FriendStatus.WAITING;
			if (!to.hasAcceptRequests()) {
				player.sendMessage(I18N.getTranslatedMessage("friend.set_on_ondemand"));
				return;
			}
		}
		to.getFriendsMap().put(player.getName(), new Friend(player.getName(), to.getName(), status));
		from.getFriendsMap().put(toPlayer.getName(), new Friend(player.getName(), to.getName(), status));
		from.hasNewChanges = true;
		to.hasNewChanges = true;
		if (status.equals(FriendStatus.WAITING)) {
			new Thread() {
				@Override
				public void run() {
					String[] strings = I18N.getTranslatedMessages("commands.friend.received", player.getName());
					for (String string : strings) {
						String message = "";
						boolean o = false;
						boolean raw = false;
						RawMessage rawMessage = null;
						for (Character character : string.toCharArray()) {
							String stringChar = character.toString();
							if (stringChar.equals("@"))	{
								o = true;
							}else{
								if (o) {
									if (stringChar.equals("1") || stringChar.equals("2")) {
										rawMessage = Ladder.getInstance().createRawMessage(message);
										if (stringChar.equals("1")) {
											raw = true;
											RawMessage addedMessage = Ladder.getInstance().createRawMessage(I18N.getTranslatedMessage("commands.friend.accept", player.getName()));
											addedMessage.setClickEvent(ClickEventType.RUN_COMMAND, false, "/friends add " + player.getName());
											addedMessage.setHoverEvent(HoverEventType.SHOW_TEXT, false, I18N.getTranslatedMessage("commands.friend.accepthover", player.getName()));
											rawMessage.add(addedMessage);
										}else if (stringChar.equals("2")) {
											raw = true;
											RawMessage addedMessage = Ladder.getInstance().createRawMessage(I18N.getTranslatedMessage("commands.friend.refuse", player.getName()));
											addedMessage.setClickEvent(ClickEventType.RUN_COMMAND, false, "/friends remove " + player.getName());
											addedMessage.setHoverEvent(HoverEventType.SHOW_TEXT, false, I18N.getTranslatedMessage("commands.friend.refusedhover", player.getName()));
											rawMessage.add(addedMessage);
										}
										break;
									}else message += stringChar;
									o = false;
								}else
									message += stringChar;
							}
						}
						if (rawMessage == null) {
							rawMessage = Ladder.getInstance().createRawMessage(message);
						}
						int i = 0;
						String msg = "";
						boolean ok = false;
						for (Character character : string.toCharArray()) {
							i++;
							if (i < message.length() + 4) continue;
							String stringChar = character.toString();
							if (stringChar.equals("@"))	{
								o = true;
							}else{
								if (o) {
									if (stringChar.equals("1") || stringChar.equals("2")) {
										if (stringChar.equals("1")) {
											raw = true;
											ok = true;
											RawMessage addedMessage = Ladder.getInstance().createRawMessage(msg + I18N.getTranslatedMessage("commands.friend.accept", player.getName()));
											addedMessage.setClickEvent(ClickEventType.RUN_COMMAND, false, "/friends add " + player.getName());
											addedMessage.setHoverEvent(HoverEventType.SHOW_TEXT, false, I18N.getTranslatedMessage("commands.friend.accepthover", player.getName()));
											rawMessage.add(addedMessage);
										}else if (stringChar.equals("2")) {
											raw = true;
											RawMessage addedMessage = Ladder.getInstance().createRawMessage(msg + I18N.getTranslatedMessage("commands.friend.refuse", player.getName()));
											addedMessage.setClickEvent(ClickEventType.RUN_COMMAND, false, "/friends remove " + player.getName());
											addedMessage.setHoverEvent(HoverEventType.SHOW_TEXT, false, I18N.getTranslatedMessage("commands.friend.refusedhover", player.getName()));
											rawMessage.add(addedMessage);
										}
										break;
									}else msg += stringChar;
									o = false;
								}else msg += stringChar;
							}
						}
						if (!ok && !msg.equals("")) {
							RawMessage addedMessage = Ladder.getInstance().createRawMessage(msg);
							rawMessage.add(addedMessage);
						}
						if (!raw) toPlayer.sendMessage(string);
						else rawMessage.send(toPlayer);
						try {
							Thread.sleep(50);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}
			}.start();
			player.sendMessage(I18N.getTranslatedMessage("commands.friend.sended", toPlayer.getName()));
			/*	String message = "";
			RawMessage generalRawMessage = Ladder.getInstance().createRawMessage("");
			RawMessage rawMessage = Ladder.getInstance().createRawMessage(I18N.getTranslatedMessage("commands.friend.accept", player.getName()) + " - ");
			rawMessage.setClickEvent(ClickEventType.RUN_COMMAND, false, "/friends add " + player.getName());
			rawMessage.setHoverEvent(HoverEventType.SHOW_TEXT, false, I18N.getTranslatedMessage("commands.friend.accepthover", player.getName()));
			generalRawMessage.add(rawMessage);
			RawMessage rawReject = Ladder.getInstance().createRawMessage(I18N.getTranslatedMessage("commands.friend.refuse", player.getName()));
			rawReject.setClickEvent(ClickEventType.RUN_COMMAND, false, "/friends remove " + player.getName());
			rawReject.setHoverEvent(HoverEventType.SHOW_TEXT, false, I18N.getTranslatedMessage("commands.friend.refusedhover", player.getName()));
			generalRawMessage.add(spacerComponent);
			generalRawMessage.add(rawReject);
			from.lastFriendsManage.put(pseudo, System.currentTimeMillis() + 30_000L);*/
		}else{
			from.lastFriendsManage.put(pseudo, System.currentTimeMillis() + 30_000L);
			player.sendMessage(I18N.getTranslatedMessage("commands.friend.done", toPlayer.getName()));
			toPlayer.sendMessage(I18N.getTranslatedMessage("commands.friend.done", player.getName()));
		}
	}
	
	public void remove(Player player, String[] args) {
		if (args.length != 2) {
			player.sendMessage(I18N.getTranslatedMessage("commands.friend.remove.usage", player.getName()));
			return;
		}
		String pseudo = args[1];
		if (pseudo.equalsIgnoreCase(player.getName())) {
			player.sendMessage(I18N.getTranslatedMessage("commands.friend.himself", player.getName()));
			return;
		}
		FriendPlayer from = FriendPlayer.get(player);
		if (from == null) return;
		if (from.lastFriendsManage.containsKey(pseudo) && from.lastFriendsManage.get(pseudo) > System.currentTimeMillis()) {
			player.sendMessage(I18N.getTranslatedMessage("commands.friend.remove.waitbetweeninteractions", player.getName()));
			return;
		}
		Player toPlayer = BadBlockOthers.getInstance().getLadder().getPlayer(pseudo);
		if (toPlayer == null) {
			if (from.hasWaitingFriend(pseudo)) {
				BadblockDatabase.getInstance().addRequest(new Request("SELECT * FROM friends WHERE pseudo = '" + BadblockDatabase.getInstance().mysql_real_escape_string(pseudo) + "'", RequestType.GETTER, "") {
					@Override
					public void done(ResultSet resultSet) {
						try {
							if (resultSet.next()) {
								if (!resultSet.getString("bypass").equals("true")) {
									try {
										Map<String, Friend> friends = BadBlockOthers.getInstance().getGson().fromJson(resultSet.getString("friends"), FriendPlayer.collectionType);
										if (!friends.containsKey(player.getName())) {
											player.sendMessage(I18N.getTranslatedMessage("commands.friend.nope", player.getName()));
											return;
										}
										Friend friend = from.getFriendsMap().get(pseudo);
										if (friend == null) return;
										friends.remove(player.getName());
										from.getFriendsMap().remove(pseudo);
										from.lastFriendsManage.put(pseudo, System.currentTimeMillis() + 30_000L);
										from.hasNewChanges = true;
										BadblockDatabase.getInstance().addRequest(new Request("UPDATE friends SET friends = '" + BadblockDatabase.getInstance().mysql_real_escape_string(BadBlockOthers.getInstance().getGson().toJson(friends)) 
												+ "' WHERE pseudo = '" + BadblockDatabase.getInstance().mysql_real_escape_string(pseudo) + "'", RequestType.SETTER));
										if (friend.getDemander().equalsIgnoreCase(player.getName()))
											player.sendMessage(I18N.getTranslatedMessage("commands.friend.cancelled", pseudo));
										else player.sendMessage(I18N.getTranslatedMessage("commands.friend.refused", pseudo));
									}catch(Exception error) {
										error.printStackTrace();
									}
								}else{
									player.sendMessage(I18N.getTranslatedMessage("friend.remove.unknownerror"));
									return;
								}
							}else{
								player.sendMessage(I18N.getTranslatedMessage("commands.friend.unknownplayer", pseudo));
							}
						}catch(Exception error) {
							error.printStackTrace();
						}
					}
				}); 
				return;
			}
			if (!from.hasAcceptedFriend(pseudo)) {
				player.sendMessage(I18N.getTranslatedMessage("commands.friend.nowith", pseudo));
				return;
			}
			BadblockDatabase.getInstance().addRequest(new Request("SELECT * FROM friends WHERE pseudo = '" + BadblockDatabase.getInstance().mysql_real_escape_string(pseudo) + "'", RequestType.GETTER, "") {
				@Override
				public void done(ResultSet resultSet) {
					try {
						if (resultSet.next()) {
							if (!resultSet.getString("bypass").equals("true")) {
								try {
									Map<String, Friend> friends = BadBlockOthers.getInstance().getGson().fromJson(resultSet.getString("friends"), FriendPlayer.collectionType);
									if (!friends.containsKey(player.getName())) {
										player.sendMessage(I18N.getTranslatedMessage("commands.friend.nope", pseudo));
										return;
									}
									friends.remove(player.getName());
									from.getFriendsMap().remove(pseudo);
									from.lastFriendsManage.put(pseudo, System.currentTimeMillis() + 30_000L);
									from.hasNewChanges = true;
									BadblockDatabase.getInstance().addRequest(new Request("UPDATE friends SET friends = '" +
											BadblockDatabase.getInstance().mysql_real_escape_string(BadBlockOthers.getInstance().getGson().toJson(friends))
											+ "' WHERE pseudo = '" + BadblockDatabase.getInstance().mysql_real_escape_string(pseudo) + "'", RequestType.SETTER));
									player.sendMessage(I18N.getTranslatedMessage("commands.friend.removedfromyourlist", pseudo));
								}catch(Exception error) {
									error.printStackTrace();
								}
							}else{
								player.sendMessage(I18N.getTranslatedMessage("friend.remove.unknownerror"));
								return;
							}
						}else{
							player.sendMessage(I18N.getTranslatedMessage("commands.friend.unknownplayer", pseudo));
						}
					}catch(Exception error) {
						error.printStackTrace();
					}
				}
			}); 
			return;
		}
		FriendPlayer to = FriendPlayer.get(toPlayer);
		if (to == null) return;
		if (from.hasWaitingFriend(toPlayer)) {
			Friend friend = from.getFriendsMap().get(pseudo);
			if (friend == null) return;
			if (toPlayer.hasPermission("friends.bypass") || from.tail) {
				player.sendMessage(I18N.getTranslatedMessage("friend.remove.unknownerror"));
				return;
			}
			to.getFriendsMap().remove(player.getName());
			from.getFriendsMap().remove(pseudo);
			from.lastFriendsManage.put(pseudo, System.currentTimeMillis() + 30_000L);
			from.hasNewChanges = true;
			if (friend.getDemander().equalsIgnoreCase(player.getName()))
				player.sendMessage(I18N.getTranslatedMessage("commands.friend.cancelled", pseudo));
			else player.sendMessage(I18N.getTranslatedMessage("commands.friend.refused", pseudo));
			return;
		}
		if (!from.hasAcceptedFriend(toPlayer)) {
			player.sendMessage(I18N.getTranslatedMessage("commands.friend.nowith", pseudo));
			return;
		}
		if (toPlayer.hasPermission("friends.bypass") || from.tail) {
			player.sendMessage(I18N.getTranslatedMessage("friend.remove.unknownerror"));
			return;
		}
		to.getFriendsMap().remove(player.getName());
		from.getFriendsMap().remove(to.getName());
		to.hasNewChanges = true;
		from.hasNewChanges = true;
		from.lastFriendsManage.put(pseudo, System.currentTimeMillis() + 30_000L);
		player.sendMessage(I18N.getTranslatedMessage("commands.friend.removedfromyourlist", toPlayer.getName()));
		toPlayer.sendMessage(I18N.getTranslatedMessage("commands.friend.removedfromyourlist", player.getName()));
	}
	
	public void state(Player player, String[] args) {
		FriendPlayer from = FriendPlayer.get(player);
		if (from == null) return;
		if (args[0].equalsIgnoreCase("on")) {
			if (from.hasAcceptRequests()) {
				player.sendMessage(I18N.getTranslatedMessage("friend.set_on_already"));
				return;
			}
			from.setAcceptedDemands(true);
			player.sendMessage(I18N.getTranslatedMessage("friend.set_on_done"));
		}else if (args[0].equalsIgnoreCase("off")) {
			if (!from.hasAcceptRequests()) {
				player.sendMessage(I18N.getTranslatedMessage("friend.set_off_already"));
				return;
			}
			from.setAcceptedDemands(false);
			player.sendMessage(I18N.getTranslatedMessage("friend.set_off_done"));
		}else{
			
		}
	}
	
	public void list(Player player) {
		FriendPlayer from = FriendPlayer.get(player);
		if (from == null) return;
		Stream<Entry<String, Friend>> onlineFriends = from.getFriendsMap().entrySet().parallelStream().filter(entry -> entry.getValue().getStatus().equals(FriendStatus.OK));
		String onlinesString = "";
		Iterator<Entry<String, Friend>> iterator = onlineFriends.iterator(); 
		Ladder bungeeCord = BadBlockOthers.getInstance().getLadder();
		while (iterator.hasNext()) {
			Entry<String, Friend> entry = iterator.next(); 
			Player pl = bungeeCord.getPlayer(entry.getKey());
			String color = "§a";
			if (pl == null) color = "§c";
			String spacer = ", "; 
			onlinesString += color + "[" + entry.getKey() + "]";
			if (iterator.hasNext()) 
				onlinesString += spacer;
		}
		Stream<Entry<String, Friend>> waitingFriends = from.getFriendsMap().entrySet().parallelStream().filter(entry -> entry.getValue().getStatus().equals(FriendStatus.WAITING));
		String waitingString = "";
		iterator = waitingFriends.iterator();
		while (iterator.hasNext()) {
			Entry<String, Friend> entry = iterator.next(); 
			Player pl = bungeeCord.getPlayer(entry.getKey());
			String color = "§a";
			if (pl == null) color = "§c";
			String spacer = ", "; 
			waitingString += color + "[" + entry.getKey() + "]";
			if (iterator.hasNext()) 
				waitingString += spacer;
		}
		String noOne = I18N.getTranslatedMessage("commands.friend.noone2");
		if (waitingString.equals("")) waitingString = noOne;
		if (onlinesString.equals("")) onlinesString = noOne;
		player.sendMessages(I18N.getTranslatedMessage("commands.friend.list.accepted", onlinesString),
				I18N.getTranslatedMessage("commands.friend.list.waiting", waitingString));
	}
	
}

package fr.xmalware.badblock.others.commands;

import java.io.File;
import java.io.IOException;
import java.util.List;

import fr.badblock.ladder.api.Ladder;
import fr.badblock.ladder.api.chat.Motd;
import fr.badblock.ladder.api.commands.Command;
import fr.badblock.ladder.api.config.ConfigurationProvider;
import fr.badblock.ladder.api.config.YamlConfiguration;
import fr.badblock.ladder.api.entities.BungeeCord;
import fr.badblock.ladder.api.entities.CommandSender;
import fr.badblock.ladder.api.entities.Player;
import fr.badblock.ladder.api.utils.FileUtils;
import fr.xmalware.badblock.api.I18N;
import fr.xmalware.badblock.others.BadBlockOthers;
import fr.xmalware.badblock.others.friends.FriendPlayer;

public class MaintenanceCommand extends Command {
	
	public static  String 		 prefix 				 = "§4§l[Alerte] §f";
	
	public MaintenanceCommand() {
		super ("maintenance", null, "mn");
	}
	
	@Override
	public void executeCommand(CommandSender sender, String[] args) {
		boolean tail = false;
		if (sender instanceof Player) {
			FriendPlayer friendPlayer = FriendPlayer.get((Player) sender);
			tail = friendPlayer.tail;
		}
		if (!sender.hasPermission("badblock.maintenance") && !tail) {
			sender.sendMessage(I18N.getTranslatedMessage("commands.permission"));
			return;
		}
		if (!BadBlockOthers.getInstance().maintenanceEnabled) {
			BadBlockOthers.getInstance().maintenanceEnabled = true;
			Motd motd = (Motd)FileUtils.load(new File("motd.json"), Motd.class);
			motd.setMotd(I18N.getTranslatedMessages("maintenance.motd"));
			List<String> strings = BadBlockOthers.getInstance().configuration.getStringList("lang.maintenance.players");
			String[] str = new String[] {};
			str = strings.toArray(str);
			motd.setPlayers(str);
			motd.setMaxPlayers(BadBlockOthers.getInstance().configuration.getInt("lang.maintenance.maxplayers"));
			motd.setVersion(BadBlockOthers.getInstance().configuration.getString("lang.maintenance.version"));
			Ladder.getInstance().getMotd().setMaxPlayers(motd.getMaxPlayers());
			Ladder.getInstance().getMotd().setMotd(motd.getMotd());
			Ladder.getInstance().getMotd().setPlayers(motd.getPlayers());
			Ladder.getInstance().getMotd().setVersion(motd.getVersion());
			for (BungeeCord bungee : Ladder.getInstance().getServers()) {
				bungee.sendMotd(motd);
			}
			sender.sendMessages(I18N.getTranslatedMessages("maintenance.true_message"));
			Ladder.getInstance().broadcast(I18N.getTranslatedMessages("maintenance.true_broadcast"));
			BadBlockOthers.getInstance().configuration.set("maintenance.enabled", true);
			try {
				ConfigurationProvider.getProvider(YamlConfiguration.class).save(BadBlockOthers.getInstance().configuration, BadBlockOthers.getInstance().configFile);
			} catch (IOException e) {
				e.printStackTrace();
			}
			for (Player player : BadBlockOthers.getInstance().getLadder().getOnlinePlayers()) {
				if (player.getBukkitServer() != null && player.getBukkitServer().getName().startsWith("lobby") && !player.hasPermission("badblock.maintenance.bypass")) {
					player.disconnect(BadBlockOthers.getInstance().maintenanceConnection);
				}
			}
			return;
		}
		BadBlockOthers.getInstance().maintenanceEnabled = false;
		
		Motd motd = (Motd)FileUtils.load(new File("motd.json"), Motd.class);
		Ladder.getInstance().getMotd().setMotd(motd.getMotd());
		Ladder.getInstance().getMotd().setPlayers(motd.getPlayers());
		Ladder.getInstance().getMotd().setMaxPlayers(motd.getMaxPlayers());
		Ladder.getInstance().getMotd().setVersion(motd.getVersion());
		for (BungeeCord bungee : Ladder.getInstance().getServers()) {
			bungee.sendMotd(motd);
		}
		
		sender.sendMessages(I18N.getTranslatedMessages("maintenance.false_message"));
		Ladder.getInstance().getMotd().setMotd(I18N.getTranslatedMessages("maintenance.motd"));
		BadBlockOthers.getInstance().configuration.set("maintenance.enabled", false);
		try {
			ConfigurationProvider.getProvider(YamlConfiguration.class).save(BadBlockOthers.getInstance().configuration, BadBlockOthers.getInstance().configFile);
		} catch (IOException e) {
			e.printStackTrace();
		}
		Ladder.getInstance().broadcast(I18N.getTranslatedMessages("maintenance.false_broadcast"));
	}
	
}

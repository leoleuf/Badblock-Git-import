package fr.xmalware.badblock.bungeecord.badblockbungeeothers;


import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;

import com.cloudflare.api.CloudflareAccess;
import com.cloudflare.api.constants.RecordType;
import com.cloudflare.api.requests.dns.DNSAddRecord;
import com.cloudflare.api.requests.dns.DNSDeleteRecord;
import com.cloudflare.api.utils.TimeUnit;
import com.cloudflare.api.utils.TimeUnit.UnitType;

import fr.badblock.rabbitconnector.RabbitConnector;
import fr.badblock.rabbitconnector.RabbitService;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.commands.BListCommand;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.commands.BOAddInsultCommand;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.commands.BOReloadCommand;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.commands.BORemoveInsultCommand;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.database.BadblockDatabase;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.listeners.PlayerQuitListener;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.listeners.PreLoginListener;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.logs.filters.IHConnectedFilter;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.logs.filters.IHResetByPeerFilter;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.logs.filters.InjectableFilter;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.modules.BadAdvertsModule;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.modules.BadCommunitySpookerModule;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.modules.BadInsultModule;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.modules.BadPseudoModule;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.modules.GuardianModule;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.modules.PartyChatModule;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.receivers.PlayersUpdateListener;
import lombok.Getter;
import lombok.Setter;
import net.md_5.bungee.BungeeCord;
import net.md_5.bungee.api.ProxyServer;
import net.md_5.bungee.api.plugin.Plugin;
import net.md_5.bungee.api.plugin.PluginManager;
import net.md_5.bungee.config.Configuration;
import net.md_5.bungee.config.ConfigurationProvider;
import net.md_5.bungee.config.YamlConfiguration;
import net.sf.json.JSONObject;

@Getter @Setter public class BadBlockBungeeOthers extends Plugin {

	@Getter @Setter private static BadBlockBungeeOthers instance;

	private Configuration							    configuration;
	private List<InjectableFilter> 						filters 			= new LinkedList<>();
	private RabbitService								rabbitService;
	private	int											players;
	private List<UUID>									reengagedUUIDs;
	private TimerTask									timerTask;
	private boolean										done = false;
	private boolean										deleted = false;
	private int											recordId = -1;
	private long										deleteTime = -1;
	
	@SuppressWarnings("deprecation")
	@Override
	public void onEnable() {
		instance = this;
		reengagedUUIDs = new ArrayList<>();
		ProxyServer proxy = this.getProxy();
		// fichier de config
		try {
			if (!this.getDataFolder().exists()) this.getDataFolder().mkdirs();
			File file = new File(this.getDataFolder(), "config.yml");
			if (!file.exists()) file.createNewFile();
			configuration = ConfigurationProvider.getProvider(YamlConfiguration.class).load(file);
		} catch (IOException e) {
			e.printStackTrace();
		}
		String host = configuration.getString("db.host");
		int port = configuration.getInt("db.port");
		String user = configuration.getString("db.user");
		String pass = configuration.getString("db.pass");
		String db = configuration.getString("db.db");
		BadblockDatabase.getInstance().connect(host, port, user, pass, db);
		CloudflareAccess access = new CloudflareAccess(configuration.getString("cloudflare.email"), configuration.getString("cloudflare.key"));
		System.out.println(ProxyServer.getInstance().getConfig().getListeners().iterator().next().getHost().getHostString());
		rabbitService = RabbitConnector.getInstance().newService("default", configuration.getString("rabbit.hostname"), configuration.getInt("rabbit.port"), configuration.getString("rabbit.username"),
				configuration.getString("rabbit.password"), configuration.getString("rabbit.virtualhost"));
		new PlayersUpdateListener();
		PluginManager pluginManager = proxy.getPluginManager();
		pluginManager.registerListener(this, new PartyChatModule());
		pluginManager.registerListener(this, new PreLoginListener());
		pluginManager.registerListener(this, new PlayerQuitListener());
		pluginManager.registerListener(this, new BadInsultModule());
		pluginManager.registerListener(this, new BadCommunitySpookerModule());
		pluginManager.registerListener(this, new BadAdvertsModule());
		pluginManager.registerListener(this, new GuardianModule());
		pluginManager.registerListener(this, new BadPseudoModule());
		pluginManager.registerCommand(this, new BOReloadCommand());
		pluginManager.registerCommand(this, new BListCommand());
		//pluginManager.registerCommand(this, new TrackCommand());
		pluginManager.registerCommand(this, new BOAddInsultCommand());
		pluginManager.registerCommand(this, new BORemoveInsultCommand());
		proxy.getPlayers().forEach(player -> Player.get(player));

		filters.clear();
		filters.add(new IHConnectedFilter());
		filters.add(new IHResetByPeerFilter());
		for (InjectableFilter filter : filters) {
			filter.inject();
		}
		proxy.registerChannel("GuardianBroad");
		proxy.registerChannel("GuardianReport");
		proxy.registerChannel("GuardianKick");
		proxy.registerChannel("GuardianBan");

		DNSAddRecord dns = new DNSAddRecord(access, "badblock.fr", RecordType.IPV4Address, "roundrobin.badblock.fr", ProxyServer.getInstance().getConfig().getListeners().iterator().next().getHost().getHostString(), new TimeUnit(UnitType.MINUTES, 2));
		try {
			JSONObject object = dns.executeBasic();
			if (object != null) {
				if (object.has("rec")) {
					JSONObject rec = object.getJSONObject("rec");
					if (rec != null) {
						if (rec.has("obj")) {
							JSONObject obj = rec.getJSONObject("obj");
							if (obj != null) {
								if (obj.has("rec_id")) {
									recordId = obj.getInt("rec_id");
								}
							}
						}
					}
				}
				System.out.println("/!\\ BUNGEEDNS<ADDED/" + BadBlockBungeeOthers.getInstance().getPlayers() + "> /!\\");
			}else System.out.println("/!\\ BUNGEEDNS<NOT-ADDED/" + BadBlockBungeeOthers.getInstance().getPlayers() + "> /!\\");
			dns.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		timerTask = new TimerTask() {
			@Override
			public void run() {
				System.out.println("/!\\ BUNGEEDNS<RUNNING/" + BadBlockBungeeOthers.getInstance().getPlayers() + "> /!\\");
				if (done && isDeleted() && BungeeCord.getInstance().getPlayers().size() <= 0) {
					System.out.println("/!\\ BUNGEEDNS!<EVENT-BYEBUNGEE!/" + BadBlockBungeeOthers.getInstance().getPlayers() + "> /!\\");
					System.exit(-1);
				}
				if (done && !isDeleted()) {
					setDeleted(true);
					DNSDeleteRecord dns = new DNSDeleteRecord(access, "badblock.fr", recordId);
					try {
						dns.executeBasic();
						dns.close();
					} catch (Exception e) {
						e.printStackTrace();
					}
					deleteTime = System.currentTimeMillis() + 300_000L;
					System.out.println("/!\\ BUNGEEDNS!<EVENT-BYEDNS!/" + BadBlockBungeeOthers.getInstance().getPlayers() + "> /!\\");
				}
			}
		};
		new Timer().schedule(timerTask, 1000L, 1000L);
	}

	@Override
	public void onDisable() {
		filters.forEach(filter -> filter.reset());
		if (timerTask != null) timerTask.cancel();
	}

	public String getMessage(List<String> list) {
		StringBuilder stringBuilder = new StringBuilder();
		Iterator<String> iterator = list.iterator();
		while (iterator.hasNext()) {
			String message = iterator.next();
			stringBuilder.append(message);
			if (iterator.hasNext())
				stringBuilder.append(System.lineSeparator());
		}
		return stringBuilder.toString();
	}

	private static SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");

	public static String getDate() {
		return dateFormat.format(new Date());
	}

}

package fr.xmalware.badblock.bungeecord.badblockbungeeothers;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.locks.ReentrantReadWriteLock;

import fr.badblock.rabbitconnector.RabbitConnector;
import fr.badblock.rabbitconnector.RabbitService;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.commands.AddServerCommand;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.commands.BOAddInsultCommand;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.commands.BOReloadCommand;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.commands.BORemoveInsultCommand;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.commands.RemoveServerCommand;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.listeners.PlayerQuitListener;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.listeners.PreLoginListener;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.logs.filters.IHConnectedFilter;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.logs.filters.IHResetByPeerFilter;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.logs.filters.InjectableFilter;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.modules.BadAdvertsModule;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.modules.BadCommunitySpookerModule;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.modules.BadInsultModule;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.modules.BadPseudoModule;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.modules.GuardianModule;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.modules.PartyChatModule;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.receivers.PlayersUpdateListener;
import lombok.Getter;
import lombok.Setter;
import net.md_5.bungee.BungeeCord;
import net.md_5.bungee.UserConnection;
import net.md_5.bungee.api.ProxyServer;
import net.md_5.bungee.api.plugin.Plugin;
import net.md_5.bungee.api.plugin.PluginManager;
import net.md_5.bungee.config.Configuration;
import net.md_5.bungee.config.ConfigurationProvider;
import net.md_5.bungee.config.YamlConfiguration;

@Getter @Setter public class BadBlockBungeeOthers extends Plugin {

	@Getter @Setter private static BadBlockBungeeOthers instance;

	private Configuration							    configuration;
	private List<InjectableFilter> 						filters 			= new LinkedList<>();
	private RabbitService								rabbitService;
	private	int											players;
	private List<UUID>									reengagedUUIDs;
	
	@Override
	public void onEnable() {
		instance = this;
		reengagedUUIDs = new ArrayList<>();
		ProxyServer proxy = this.getProxy();
		// fichier de config
		try {
			if (!this.getDataFolder().exists()) this.getDataFolder().mkdirs();
			File file = new File(this.getDataFolder(), "config.yml");
			if (!file.exists()) file.createNewFile();
			configuration = ConfigurationProvider.getProvider(YamlConfiguration.class).load(file);
		} catch (IOException e) {
			e.printStackTrace();
		}
		rabbitService = RabbitConnector.getInstance().newService("default", configuration.getString("rabbit.hostname"), configuration.getInt("rabbit.port"), configuration.getString("rabbit.username"),
				configuration.getString("rabbit.password"), configuration.getString("rabbit.virtualhost"));
		new PlayersUpdateListener();
		PluginManager pluginManager = proxy.getPluginManager();
		pluginManager.registerListener(this, new PartyChatModule());
		pluginManager.registerListener(this, new PreLoginListener());
		pluginManager.registerListener(this, new PlayerQuitListener());
		pluginManager.registerListener(this, new BadInsultModule());
		pluginManager.registerListener(this, new BadCommunitySpookerModule());
		pluginManager.registerListener(this, new BadAdvertsModule());
		pluginManager.registerListener(this, new GuardianModule());
		pluginManager.registerListener(this, new BadPseudoModule());
		pluginManager.registerCommand(this, new BOReloadCommand());
		//pluginManager.registerCommand(this, new TrackCommand());
		pluginManager.registerCommand(this, new AddServerCommand());
		pluginManager.registerCommand(this, new RemoveServerCommand());
		pluginManager.registerCommand(this, new BOAddInsultCommand());
		pluginManager.registerCommand(this, new BORemoveInsultCommand());
		proxy.getPlayers().forEach(player -> Player.get(player));

		filters.clear();
		filters.add(new IHConnectedFilter());
		filters.add(new IHResetByPeerFilter());
		for (InjectableFilter filter : filters) {
			filter.inject();
		}
		proxy.registerChannel("GuardianBroad");
		proxy.registerChannel("GuardianReport");
		proxy.registerChannel("GuardianKick");
		proxy.registerChannel("GuardianBan");
	}

	@Override
	public void onDisable() {
		filters.forEach(filter -> filter.reset());
	}

	public String getMessage(List<String> list) {
		StringBuilder stringBuilder = new StringBuilder();
		Iterator<String> iterator = list.iterator();
		while (iterator.hasNext()) {
			String message = iterator.next();
			stringBuilder.append(message);
			if (iterator.hasNext())
				stringBuilder.append(System.lineSeparator());
		}
		return stringBuilder.toString();
	}

	private static SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");

	public static String getDate() {
		return dateFormat.format(new Date());
	}

}

package fr.xmalware.badblock.bungeecord.badblockbungeeothers.listeners;

import com.cloudflare.api.constants.RecordType;
import com.cloudflare.api.requests.dns.DNSAddRecord;
import com.cloudflare.api.utils.TimeUnit;
import com.cloudflare.api.utils.TimeUnit.UnitType;

import fr.xmalware.badblock.bungeecord.badblockbungeeothers.BadBlockBungeeOthers;
import net.md_5.bungee.api.ProxyServer;
import net.md_5.bungee.api.event.ProxyBoundEvent;
import net.md_5.bungee.api.event.ProxyUnableToBindEvent;
import net.md_5.bungee.api.plugin.Listener;
import net.md_5.bungee.event.EventHandler;
import net.md_5.bungee.event.EventPriority;
import net.sf.json.JSONObject;

public class ProxyBoundListener implements Listener {

	@EventHandler (priority = EventPriority.HIGHEST)
	public void onProxyBound(ProxyBoundEvent event) {
		BadBlockBungeeOthers bungeeOthers = BadBlockBungeeOthers.getInstance();
		@SuppressWarnings("deprecation")
		DNSAddRecord dns = new DNSAddRecord(bungeeOthers.getAccess(), "badblock.fr", RecordType.IPV4Address, "roundrobin.badblock.fr", ProxyServer.getInstance().getConfig().getListeners().iterator().next().getHost().getHostString(), new TimeUnit(UnitType.MINUTES, 2));
		try {
			JSONObject object = dns.executeBasic();
			if (object != null) {
				if (object.has("rec")) {
					JSONObject rec = object.getJSONObject("rec");
					if (rec != null) {
						if (rec.has("obj")) {
							JSONObject obj = rec.getJSONObject("obj");
							if (obj != null) {
								if (obj.has("rec_id")) {
									bungeeOthers.setRecordId(obj.getInt("rec_id"));
								}
							}
						}
					}
				}
				System.out.println("/!\\ BUNGEEDNS<ADDED/" + BadBlockBungeeOthers.getInstance().getPlayers() + "/" + BadBlockBungeeOthers.getInstance().getConnections() + "> /!\\");
			}else System.out.println("/!\\ BUNGEEDNS<NOT-ADDED/" + BadBlockBungeeOthers.getInstance().getPlayers() + "/" + BadBlockBungeeOthers.getInstance().getConnections() + "> /!\\");
			dns.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("Added RecordID: " + bungeeOthers.getRecordId());
	}

	@EventHandler (priority = EventPriority.HIGHEST)
	public void onProxyUnableToBind(ProxyUnableToBindEvent event) {
		System.out.println("Unable to bind!");
		System.exit(-1);
	}
	
}

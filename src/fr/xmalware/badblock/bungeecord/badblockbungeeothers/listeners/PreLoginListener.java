package fr.xmalware.badblock.bungeecord.badblockbungeeothers.listeners;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Field;
import java.net.URL;
import java.net.URLConnection;
import java.util.UUID;

import com.google.gson.Gson;

import fr.badblock.ladder.bungee.LadderBungee;
import fr.badblock.skins.format.SkinProfile;
import fr.badblock.skins.format.SkinProperty;
import fr.badblock.skins.storage.SkinStorage;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.BadBlockBungeeOthers;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.Player;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.UUIDData;
import net.md_5.bungee.api.ProxyServer;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.api.event.LoginEvent;
import net.md_5.bungee.api.event.ServerSwitchEvent;
import net.md_5.bungee.api.plugin.Listener;
import net.md_5.bungee.connection.InitialHandler;
import net.md_5.bungee.connection.LoginResult;
import net.md_5.bungee.connection.LoginResult.Property;
import net.md_5.bungee.event.EventHandler;
import net.md_5.bungee.event.EventPriority;

public class PreLoginListener implements Listener {

	private Gson 			gson = new Gson();

	private static Field profileField = getProfileField();

	private static Field getProfileField() {
		try {
			Field profileField = InitialHandler.class.getDeclaredField("loginProfile"); 
			profileField.setAccessible(true);
			return profileField;
		} catch (Throwable t) {
			System.err.println("Failed to get method handle for initial handel loginProfile field");
			t.printStackTrace();
		}
		return null;
	}


	@EventHandler (priority = EventPriority.HIGHEST)
	public void onPostLogin(ServerSwitchEvent event) {
		ProxiedPlayer proxiedPlayer = event.getPlayer();
		Player.get(proxiedPlayer);
		if (BadBlockBungeeOthers.getInstance().getPlayers() >= 500) {
			BadBlockBungeeOthers.getInstance().setDone(true);
		}
		final SkinProfile skinprofile = SkinStorage.getInstance().getOrCreateSkinData(event.getPlayer().getName());
		ProxyServer.getInstance().getScheduler().runAsync(LadderBungee.getInstance(), new Runnable() {
			@Override
			public void run() {
				try {
					URL url = new URL("https://api.mojang.com/users/profiles/minecraft/" + event.getPlayer().getName());
					URLConnection yc = url.openConnection();
					BufferedReader in = new BufferedReader(new InputStreamReader( yc.getInputStream(), "UTF-8"));
					String inputLine;
					while ((inputLine = in.readLine()) != null) {
						UUIDData uuidData = gson.fromJson(inputLine, UUIDData.class);
						if (uuidData != null) {
							if (uuidData.id != null) {
								skinprofile.attemptUpdateBungee();
								ProxyServer.getInstance().getScheduler().runAsync(LadderBungee.getInstance(), new Runnable() {
									@Override
									public void run() {


										SkinProfile skinprofile = SkinStorage.getInstance().getOrCreateSkinData(proxiedPlayer.getName().toLowerCase());
										skinprofile.applySkin(new SkinProfile.ApplyFunction() {
											@Override
											public void applySkin(SkinProperty property) {
												try {
													Property textures = new Property(property.getName(), property.getValue(), property.getSignature());
													InitialHandler handler = (InitialHandler) proxiedPlayer.getPendingConnection();

													LoginResult profile = new LoginResult(getUUID(uuidData.id).toString(), new Property[] { textures });
													Property[] present = profile.getProperties();
													Property[] newprops = new Property[present.length + 1];
													System.arraycopy(present, 0, newprops, 0, present.length);
													newprops[present.length] = textures;
													profile.getProperties()[0].setName(newprops[0].getName());
													profile.getProperties()[0].setValue(newprops[0].getValue());
													profile.getProperties()[0].setSignature(newprops[0].getSignature());
													profileField.set(handler, profile);
													String[][] props = new String[ profile.getProperties().length ][];
													for ( int i = 0; i < props.length; i++ )
													{
														props[ i ] = new String[]
																{
																		profile.getProperties()[ i ].getName(),
																		profile.getProperties()[ i ].getValue(),
																		profile.getProperties()[ i ].getSignature()
																};
													}
													if (proxiedPlayer.getServer()==null){
														return;
													}
													ByteArrayOutputStream b = new ByteArrayOutputStream();
												    DataOutputStream out = new DataOutputStream(b);
												    try
												    {
												      out.writeUTF("SkinUpdate");
												      if (textures != null)
												      {
												        out.writeUTF(textures.getName());
												        out.writeUTF(textures.getValue());
												        out.writeUTF(textures.getSignature());
												      }
												      proxiedPlayer.getServer().sendData("SkinsRestorer", b.toByteArray());
												    }
												    catch (Exception localException) {}
												} catch (Throwable t) {
													t.printStackTrace();
												}
											}
										});
									}
								}
										);
							}
						}
					}
					in.close();
				} catch (Exception e){
					e.printStackTrace();
				}
			}
		});
	}

	private static UUID getUUID(String id) {
		return UUID.fromString(id.substring(0, 8) + "-" + id.substring(8, 12) + "-" + id.substring(12, 16) + "-" + id.substring(16, 20) + "-" +id.substring(20, 32));
	}

	@EventHandler
	public void onLogin(LoginEvent event) {
		if (BadBlockBungeeOthers.getInstance().getDeleteTime() != -1 && BadBlockBungeeOthers.getInstance().getDelete() == -1 && BadBlockBungeeOthers.getInstance().getDeleteTime() < System.currentTimeMillis()) {
			event.setCancelled(true);
			event.setCancelReason("§cInstance indisponible (utilisez l'IP play.badblock.fr) ou patientez une à deux minutes.");
		}
	}

}

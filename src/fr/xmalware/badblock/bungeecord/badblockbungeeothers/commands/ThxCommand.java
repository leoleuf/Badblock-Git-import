package fr.xmalware.badblock.bungeecord.badblockbungeeothers.commands;

import java.lang.reflect.Type;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;

import fr.xmalware.badblock.bungeecord.badblockbungeeothers.database.BadblockDatabase;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.database.Request;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.database.Request.RequestType;
import fr.xmalware.badblock.bungeecord.badblockbungeeothers.tmputils.PlayerBooster;
import net.md_5.bungee.api.CommandSender;
import net.md_5.bungee.api.plugin.Command;

public class ThxCommand extends Command {

	private static final Type type = new TypeToken<Map<String, PlayerBooster>>() {}.getType();
	private static final Gson gson = new GsonBuilder().setPrettyPrinting().create();

	public ThxCommand() {
		super("thx");
	}

	public void execute(CommandSender sender, String[] args) {
		BadblockDatabase.getInstance().addRequest(new Request("SELECT value FROM keyValues WHERE `key` = 'booster'", RequestType.GETTER) {

			@SuppressWarnings("deprecation")
			@Override
			public void done(ResultSet result) {
				try {
					result.next();
					String value = result.getString("value");
					Map<String, PlayerBooster> updatedMap = gson.fromJson(value, type);
					sender.sendMessage("§8------------------------------");
					StringBuilder stringBuilder = new StringBuilder();
					List<String> dones = new ArrayList<>();
					for (Entry<String, PlayerBooster> entry : updatedMap.entrySet()) {
						if (!entry.getValue().isEnabled() || !entry.getValue().isValid()) continue;
						BadblockDatabase.getInstance().addSyncRequest(new Request("SELECT playerName FROM boosterThanks WHERE expire = '" + entry.getValue().getExpire() + "' AND playerName = '" + sender.getName().toLowerCase() + "'", RequestType.GETTER) {
							@Override
							public void done(ResultSet result) {
								try {
									if (result.next()) {
										sender.sendMessage("§6" + entry.getValue().getGameName().substring(0,1).toUpperCase() + entry.getValue().getGameName().substring(1).toLowerCase() + " §f➠ §e" + entry.getValue().getUsername() + " : §cRemerciement déjà apporté");
									}else{
										double randomBadcoins = new Random().nextInt(6) + 2;
										double randomXP = new Random().nextInt(2) + 2;
										if (entry.getValue().getAddedBadcoins() >= entry.getValue().getBooster().getMaxBadcoins()) randomBadcoins = 0;
										if (entry.getValue().getAddedXp() >= entry.getValue().getBooster().getMaxXP()) randomXP = 0;
										if (randomXP == 0 && randomBadcoins == 0) {
											BadblockDatabase.getInstance().addSyncRequest(new Request("INSERT INTO boosterThanks(playerName, expire) VALUES('" + entry.getValue().getUsername() + "', '" + entry.getValue().getExpire() + "')", RequestType.SETTER));
											BadblockDatabase.getInstance().addSyncRequest(new Request("INSERT INTO debts(playerName, xp, badcoins) VALUES('" + entry.getValue().getUsername() + "', '" + randomXP + "', '" + randomBadcoins + "')", RequestType.SETTER));
											sender.sendMessage("§6" + entry.getValue().getGameName().substring(0,1).toUpperCase() + entry.getValue().getGameName().substring(1).toLowerCase() + " §f➠ §e" + entry.getValue().getUsername() + " : §6+" + randomBadcoins + " BadCoin" + (randomBadcoins > 1 ? "s" : "") + " §7& §3+" + randomXP + " XP");
											if (dones.isEmpty()) {
												dones.add(entry.getKey());
												double randomBadcoinsPlayer = new Random().nextInt(3) + 2;
												double randomXPPlayer = new Random().nextInt(2) + 2;
												BadblockDatabase.getInstance().addSyncRequest(new Request("INSERT INTO debts(playerName, xp, badcoins) VALUES('" + sender.getName() + "', '" + randomXPPlayer + "', '" + randomBadcoinsPlayer + "')", RequestType.SETTER));
												stringBuilder.append("§aVous avez gagné §6+" + randomBadcoins + " BadCoin" + (randomBadcoins > 1 ? "s" : "") + " §7& §3+" + randomXP + " XP §asuite à votre reconnaissance envers les personnes ayant activés des Boosters (ils vont apparaître sur votre compte dans quelques minutes).");
											}
										}else{
											try {
												Thread.sleep(1000L);
											} catch (InterruptedException e) {
												e.printStackTrace();
											}
											sender.sendMessage("§8------------------------------");
											sender.sendMessage("§6" + entry.getValue().getGameName().substring(0,1).toUpperCase() + entry.getValue().getGameName().substring(1).toLowerCase() + " §f➠ §e" + entry.getValue().getUsername() + " : §cMaximum atteint (" + entry.getValue().getBooster().getMaxBadcoins() + " BadCoin" + (entry.getValue().getBooster().getMaxBadcoins() > 1 ? "s" : "") + " & §3" + entry.getValue().getBooster().getMaxXP() + " XP§c)");
											sender.sendMessage("§8------------------------------");
										}
									}
								} catch (SQLException e) {
									e.printStackTrace();
								}
							}
						});
					}
					sender.sendMessage("§8------------------------------");
					result.close(); // don't forget to close it
				} catch (Exception exception) {
					exception.printStackTrace();
				}
			}

		});
	}

}
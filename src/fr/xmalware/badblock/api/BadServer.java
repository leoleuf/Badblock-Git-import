package fr.xmalware.badblock.api;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

import fr.xmalware.badblock.others.BadBlockOthers;

public abstract class BadServer {
	
	private ServerSocket     server;
	private Socket	   	     client;
	private BufferedReader   in;
	private PrintWriter 	 out;
	private Thread		 	 thread;
	
	public BadServer(int port) {
		thread = new Thread(new Runnable() {
			String msg ;
			@Override
			public void run() {
				try {
					server = new ServerSocket(port);
					client = server.accept();
					out = new PrintWriter(client.getOutputStream());
					in = new BufferedReader(new InputStreamReader(client.getInputStream()));
					msg = in.readLine();
					if (msg != null) {
						BadPacket badPacket = BadBlockOthers.getInstance().getGson().fromJson(msg, BadPacket.class);
						if (badPacket != null)
							onReceiveMessage(badPacket);
					}
					while (msg != null) {
						msg = in.readLine();
						if (msg != null) {
							BadPacket badPacket = BadBlockOthers.getInstance().getGson().fromJson(msg, BadPacket.class);
							if (badPacket != null)
								onReceiveMessage(badPacket);
						}
					}
					out.close();
					client.close();
					server.close();
					thread.stop();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		});
		thread.start();
	}
	
	public abstract void onReceiveMessage(BadPacket badPacket);
	
	private void write(String string) {
		out.println(string);
		out.flush();
	}
	
	public void sendPacket(BadPacket badPacket) {
		if (server == null) return;
		if (server.isClosed()) return;
		write(badPacket.toJson());
	}
	
}

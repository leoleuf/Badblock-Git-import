
package fr.xmalware.badblock.hub.inventories.cosmetics.mounts.defaults;

import java.util.Arrays;
import java.util.List;

import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.block.Block;
import org.bukkit.entity.EntityType;
import org.bukkit.inventory.ItemStack;

import fr.badblock.gameapi.GameAPI;
import fr.badblock.gameapi.players.BadblockPlayer;
import fr.xmalware.badblock.hub.BadBlockHub;
import fr.xmalware.badblock.hub.inventories.abstracts.actions.ItemAction;
import fr.xmalware.badblock.hub.inventories.abstracts.inventories.CustomInventory;
import fr.xmalware.badblock.hub.inventories.abstracts.items.CustomItem;
import fr.xmalware.badblock.hub.inventories.cosmetics.mounts.settings.defaults.MountConfig;
import fr.xmalware.badblock.hub.inventories.cosmetics.mounts.settings.defaults.MountSettingsInventory;
import fr.xmalware.badblock.hub.objects.HubPlayer;
import fr.xmalware.badblock.hub.objects.HubStoredPlayer;
import fr.xmalware.badblock.hub.riders.MountManager;
import fr.xmalware.badblock.hub.utils.ConfigUtils;
import lombok.Getter;
import lombok.Setter;

@Getter @Setter public abstract class MountItem extends CustomItem {

	private EntityType	entityType;
	private String 		mountName;

	public MountItem(String mountName, Material material, byte data) {
		super("hub.items.mounts." + mountName + ".displayname", material, data, "hub.items.mount." + mountName + ".lore");
		this.setMountName(mountName);
		this.setEntityType(entityType);
	}

	@Override
	public List<ItemAction> getActions() {
		return Arrays.asList(ItemAction.INVENTORY_DROP, ItemAction.INVENTORY_LEFT_CLICK, ItemAction.INVENTORY_RIGHT_CLICK, ItemAction.INVENTORY_WHEEL_CLICK);
	}

	public int getNeededBadcoins() {
		return ConfigUtils.getInt(BadBlockHub.getInstance(), "mounts." + this.getMountName() + ".badcoins");
	}

	public boolean has(BadblockPlayer player) {
		return hasPermission() ? player.hasPermission("hub.mounts." + this.getMountName()) : HubStoredPlayer.get(player).getMounts().contains(this.getMountName());
	}

	public boolean hasFunMode() {
		return ConfigUtils.getBoolean(BadBlockHub.getInstance(), "mounts." + this.getMountName() + ".hasFunmode");
	}

	public boolean hasPegasusMode() {
		return ConfigUtils.getBoolean(BadBlockHub.getInstance(), "mounts." + this.getMountName() + ".hasPegasus");
	}

	public boolean hasPermission() {
		return ConfigUtils.getBoolean(BadBlockHub.getInstance(), "mounts." + this.getMountName() + ".permission");
	}

	public boolean hasResizableMode() {
		return ConfigUtils.getBoolean(BadBlockHub.getInstance(), "mounts." + this.getMountName() + ".hasResizableMode");
	}

	public boolean hasReverseMode() {
		return ConfigUtils.getBoolean(BadBlockHub.getInstance(), "mounts." + this.getMountName() + ".hasReverseMode");
	}
	
	public boolean isBuyable() {
		return ConfigUtils.getBoolean(BadBlockHub.getInstance(), "disguises." + this.getMountName() + ".buyable");
	}

	@Override
	public void onClick(BadblockPlayer player, ItemAction itemAction, Block clickedBlock) {
		if (player.getOpenInventory() != null && player.getOpenInventory().getTopInventory() != null && player.getOpenInventory().getTopInventory().getSize() == 27) return;
		player.closeInventory();
		if (this.getEntityType() == null) {
			player.sendTranslatedMessage("hub.mounts.invalid");
			return;
		}
		HubStoredPlayer hubStoredPlayer = HubStoredPlayer.get(player);
		HubPlayer.get(player).setClickedMountItem(this);
		// Buy system
		if (itemAction.equals(ItemAction.INVENTORY_RIGHT_CLICK)) {
			if (!isBuyable()) {
				player.sendTranslatedMessage("hub.disguises." + this.getMountName() + ".notbuyable");
				return;
			}
			if (has(player)) {
				player.sendTranslatedMessage("hub.mounts.alreadyowned");
				return;
			}
			if (hasPermission() && !player.hasPermission("hub.mounts." + this.getMountName())) {
				player.sendTranslatedMessage("hub.mounts." + this.getMountName() + ".nopermission");
				return;
			}
			int badcoins = player.getPlayerData().getBadcoins();
			if (badcoins < getNeededBadcoins()) {
				player.sendTranslatedMessage("hub.mounts.notenoughbadcoins", getNeededBadcoins() - badcoins);
				return;
			}
			player.getPlayerData().removeBadcoins(badcoins);
			hubStoredPlayer.getMounts().add(this.getMountName());
			hubStoredPlayer.getMountConfigs().put(this.getMountName(), new MountConfig(this.getName()));
			player.sendTranslatedMessage("hub.mounts." + this.getMountName() + ".bought");
			player.playSound(Sound.LEVEL_UP);
			CustomInventory.get(MountsInventory.class).open(player);
			return;
		}
		// Mount settings system
		if (itemAction.equals(ItemAction.INVENTORY_WHEEL_CLICK) || itemAction.equals(ItemAction.INVENTORY_DROP)) {
			if (!has(player)) {
				player.sendTranslatedMessage("hub.mounts.youmusthavethismounttoconfigit");
				return;
			}
			CustomInventory.get(MountSettingsInventory.class).open(player);
			return;
		}
		// Use system
		if (!has(player) && isBuyable()) {
			if (hasPermission()) player.sendTranslatedMessage("hub.mounts." + this.getMountName() + ".nopermission");
			else player.sendTranslatedMessage("hub.mounts." + this.getMountName() + ".unowned");
			return;
		}
		HubPlayer hubPlayer = HubPlayer.get(player);
		if (hubPlayer.getMountEntity() != null && hubPlayer.getMountEntity().isValid()) {
			MountItem mountItem = hubPlayer.getMounted();
			if (mountItem != null && mountItem.equals(this)) {
				player.sendTranslatedMessage("hub.mounts.alreadymounted");
				return;
			}
		}
		boolean mounted = true;
		if (hubStoredPlayer.getMountConfigs().containsKey(this.getName()) && hubStoredPlayer.getMountConfigs().get(this.getName()).isBaby())
			mounted = false;
		if (MountManager.rideEntity(player, this.getEntityType(), false, false, 0.3D, false, mounted)) {
			HubPlayer.get(player).setMounted(this);
			if (mounted) player.sendTranslatedMessage("hub.mounts." + this.getMountName() + ".mounted", GameAPI.i18n().get(this.getName()));
			else player.sendTranslatedMessage("hub.mounts." + this.getMountName() + ".mountedpet", GameAPI.i18n().get(this.getName()));
		}
	}

	@Override
	public ItemStack toItemStack(BadblockPlayer player) {
		boolean configuratorInventory = false;
		HubPlayer hubPlayer = HubPlayer.get(player);
		if (hubPlayer.getCurrentInventory() != null && hubPlayer.getCurrentInventory().getLines() < 6) configuratorInventory = true;
		String ownedKey = has(player) ? "hub.mounts.owned" : "hub.mounts.unowned";
		String ownedColorKey = ownedKey + ".color";
		String ownedSuffixKey = ownedKey + ".suffix";
		String configuratorKeySuffix = configuratorInventory ? ".description" : "";
		return build(this.getMaterial(), this.getAmount(), this.getData(), GameAPI.i18n().get(ownedColorKey)[0] + GameAPI.i18n().get(this.getName(), GameAPI.i18n().get(ownedSuffixKey)[0])[0], GameAPI.i18n().get(this.getLore() + configuratorKeySuffix, GameAPI.i18n().get(ownedKey), getNeededBadcoins()));
	}
	
	protected abstract EntityType getMountEntityType();

}

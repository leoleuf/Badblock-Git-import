
package fr.xmalware.badblock.hub.inventories.cosmetics.disguises.defaults;

import java.util.Arrays;
import java.util.List;

import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.block.Block;
import org.bukkit.entity.EntityType;
import org.bukkit.inventory.ItemStack;

import fr.badblock.gameapi.GameAPI;
import fr.badblock.gameapi.disguise.Disguise;
import fr.badblock.gameapi.players.BadblockPlayer;
import fr.xmalware.badblock.hub.BadBlockHub;
import fr.xmalware.badblock.hub.inventories.ItemAction;
import fr.xmalware.badblock.hub.inventories.abstracts.CustomInventory;
import fr.xmalware.badblock.hub.inventories.abstracts.CustomItem;
import fr.xmalware.badblock.hub.inventories.cosmetics.mounts.settings.defaults.MountConfig;
import fr.xmalware.badblock.hub.inventories.cosmetics.mounts.settings.defaults.MountSettingsInventory;
import fr.xmalware.badblock.hub.objects.HubPlayer;
import fr.xmalware.badblock.hub.objects.HubStoredPlayer;
import fr.xmalware.badblock.hub.utils.ConfigUtils;
import lombok.Getter;
import lombok.Setter;

@Getter @Setter public class DisguiseItem extends CustomItem {

	private String 		mountName;
	private EntityType	entityType;
	private Disguise	disguise;

	public DisguiseItem(String mountName, EntityType entityType, Material material, byte data) {
		super("hub.items.disguises." + mountName + ".displayname", material, data, "hub.items.disguises." + mountName + ".lore");
		this.setMountName(mountName);
		this.setEntityType(entityType);
		this.setDisguise(new Disguise(entityType, null, true, true));
	}

	@Override
	public void onClick(BadblockPlayer player, ItemAction itemAction, Block clickedBlock) {
		if (player.getOpenInventory() != null && player.getOpenInventory().getTopInventory() != null && player.getOpenInventory().getTopInventory().getSize() == 27) return;
		player.closeInventory();
		HubStoredPlayer hubStoredPlayer = HubStoredPlayer.get(player);
		// Buy system
		if (itemAction.equals(ItemAction.INVENTORY_RIGHT_CLICK)) {
			if (has(player)) {
				player.sendTranslatedMessage("hub.disguises.alreadyowned");
				return;
			}
			if (hasPermission()) {
				player.sendTranslatedMessage("hub.disguises." + this.getMountName() + ".nopermission");
				return;
			}
			int badcoins = player.getPlayerData().getBadcoins();
			if (badcoins < getNeededBadcoins()) {
				player.sendTranslatedMessage("hub.disguises.notenoughbadcoins", getNeededBadcoins() - badcoins);
				return;
			}
			player.getPlayerData().removeBadcoins(badcoins);
			hubStoredPlayer.getMounts().add(this.getMountName());
			hubStoredPlayer.getMountConfigs().put(this.getMountName(), new MountConfig(this.getName()));
			player.sendTranslatedMessage("hub.disguises." + this.getMountName() + ".bought");
			player.playSound(Sound.LEVEL_UP);
			CustomInventory.get(DisguisesInventory.class).open(player);
			return;
		}
		// Use system
		if (!has(player)) {
			if (hasPermission()) player.sendTranslatedMessage("hub.disguises." + this.getMountName() + ".nopermission");
			else player.sendTranslatedMessage("hub.disguises.unowned");
			return;
		}
		HubPlayer hubPlayer = HubPlayer.get(player);
		if (hubPlayer.getDisguise() != null) {
			DisguiseItem mountItem = hubPlayer.getDisguise();
			if (mountItem != null && mountItem.equals(this)) {
				player.sendTranslatedMessage("hub.disguises.alreadymounted");
				return;
			}
		}
		player.disguise(disguise);
	}

	@Override
	public ItemStack toItemStack(BadblockPlayer player) {
		boolean configuratorInventory = false;
		HubPlayer hubPlayer = HubPlayer.get(player);
		if (hubPlayer.getCurrentInventory() != null && hubPlayer.getCurrentInventory().getLines() < 6) configuratorInventory = true;
		String ownedKey = has(player) ? "hub.disguises.owned" : "hub.disguises.unowned";
		String ownedColorKey = ownedKey + ".color";
		String ownedSuffixKey = ownedKey + ".suffix";
		String configuratorKeySuffix = configuratorInventory ? ".description" : "";
		return build(this.getMaterial(), this.getAmount(), this.getData(), GameAPI.i18n().get(ownedColorKey)[0] + GameAPI.i18n().get(this.getName(), GameAPI.i18n().get(ownedSuffixKey)[0])[0], GameAPI.i18n().get(this.getLore() + configuratorKeySuffix, GameAPI.i18n().get(ownedKey), getNeededBadcoins()));
	}

	@Override
	public List<ItemAction> getActions() {
		return Arrays.asList(ItemAction.INVENTORY_DROP, ItemAction.INVENTORY_LEFT_CLICK, ItemAction.INVENTORY_RIGHT_CLICK, ItemAction.INVENTORY_WHEEL_CLICK);
	}

	public boolean has(BadblockPlayer player) {
		return hasPermission() ? player.hasPermission("hub.disguises." + this.getMountName()) : HubStoredPlayer.get(player).getMounts().contains(this.getMountName());
	}

	public boolean hasPermission() {
		return false;
	}

	public int getNeededBadcoins() {
		return ConfigUtils.getInt(BadBlockHub.getInstance(), "disguises." + this.getMountName() + ".badcoins");
	}

}

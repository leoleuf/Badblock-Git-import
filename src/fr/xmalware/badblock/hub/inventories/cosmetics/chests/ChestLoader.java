package fr.xmalware.badblock.hub.inventories.cosmetics.chests;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.inventory.ItemStack;
import org.bukkit.plugin.Plugin;

import fr.badblock.gameapi.players.BadblockPlayer;
import fr.badblock.gameapi.utils.ConfigUtils;
import fr.xmalware.badblock.hub.inventories.abstracts.inventories.CustomPlayerInventory;
import fr.xmalware.badblock.hub.objects.HubStoredPlayer;
import lombok.Data;
import lombok.Getter;
import lombok.Setter;

@Data public class ChestLoader {
	
	@Getter @Setter private static ChestLoader	instance;
	
	private FileConfiguration 		  config;
	private List<Location>	  		  openers	= new ArrayList<>();
	private List<CustomChestType>	  chests	= new ArrayList<>();
	
	@SuppressWarnings("deprecation")
	public ChestLoader(Plugin plugin) {
		setInstance(this);
		File file = new File(plugin.getDataFolder(), "chests.yml");
		setConfig(YamlConfiguration.loadConfiguration(file));
		config.getStringList("openers").forEach(opener -> openers.add(ConfigUtils.convertStringToBlockLocation(opener)));
		config.getConfigurationSection("chests").getKeys(false).forEach(key -> {
			ConfigurationSection configurationSection = config.getConfigurationSection("chests." + key);
			int id = configurationSection.getInt("id");
			Material material = Material.getMaterial(configurationSection.getInt("material"));
			byte data = (byte) configurationSection.getInt("data");
			Map<String, Long> winRates = new HashMap<>();
			for (String winRate : configurationSection.getStringList("winRates")) {
				String[] splitter = winRate.split(":");
				String winName = splitter[0];
				long rarity = Long.parseLong(splitter[1]);
				winRates.put(winName, rarity);
			}
			new CustomChestType(id, new ItemStack(material, data), winRates);
		});
	}

	public void open(BadblockPlayer player) {
		HubStoredPlayer hubStoredPlayer = HubStoredPlayer.get(player);
		// Aucun chest Ã  ouvrir
		if (hubStoredPlayer.getChests().isEmpty()) {
			player.sendTranslatedMessage("hub.chests.noopenablechest");
			return;
		}
		// Ouverture de l'inventaire
		player.sendMessage("okp");
		CustomPlayerInventory.get(PlayerChestsSelectorInventory.class, player).open();
	}
	
}

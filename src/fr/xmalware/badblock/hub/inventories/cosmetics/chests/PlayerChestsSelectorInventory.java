package fr.xmalware.badblock.hub.inventories.cosmetics.chests;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.bukkit.block.Block;

import fr.badblock.gameapi.players.BadblockPlayer;
import fr.xmalware.badblock.hub.inventories.abstracts.actions.ItemAction;
import fr.xmalware.badblock.hub.inventories.abstracts.inventories.CustomPlayerInventory;
import fr.xmalware.badblock.hub.inventories.abstracts.items.CustomItem;
import fr.xmalware.badblock.hub.inventories.settings.items.BlueStainedGlassPaneItem;
import fr.xmalware.badblock.hub.objects.HubPlayer;
import fr.xmalware.badblock.hub.objects.HubStoredPlayer;

public class PlayerChestsSelectorInventory extends CustomPlayerInventory {

	public PlayerChestsSelectorInventory() {
		super("hub.items.chestsinventory", 3);
	}

	@SuppressWarnings("deprecation")
	@Override
	public void init(BadblockPlayer player) {
		this.getItems().clear();
		BlueStainedGlassPaneItem blueStainedGlassPaneItem = new BlueStainedGlassPaneItem();
		for (int id = 0; id < this.getLines() * 9; id++)
			if ((id == 0 || id < 9 || id % 9 == 0 || id == 17 || id == 26 || id == 35 || id == 44 || id == 53
					|| id > (9 * (this.getLines() - 1)) - 1))
				this.setItem(blueStainedGlassPaneItem, id);
		this.setAsLastItem(new PlayerQuitChestsItem());
		HubStoredPlayer hubStoredPlayer = HubStoredPlayer.get(player);
		if (hubStoredPlayer == null) return;
		Map<Integer, CustomChestType> chestsTypes = new HashMap<>();
		ChestLoader chestLoader = ChestLoader.getInstance();
		chestLoader.getChests().forEach(chest -> chestsTypes.put(chest.getId(), chest));
		hubStoredPlayer.getChests().forEach(chests -> {
			if (!chestsTypes.containsKey(chests.getTypeId())) {
				System.out.println("[HUB] Unknown chest type (id: " + chests.getTypeId() + " / " + player.getName() + ")");
				return;
			}
			CustomChestType chestType = chestsTypes.get(chests.getTypeId());
			this.addItem(new CustomItem("hub.chests." + chests.getTypeId() + ".name", chestType.getItemStack().getType(), chestType.getItemStack().getData().getData(), "hub.chests." + chests.getTypeId() + ".lore") {
				@Override
				public void onClick(BadblockPlayer player, ItemAction action, Block clickedBlock) {
					HubPlayer hubPlayer = HubPlayer.get(player);
					if (hubPlayer.getChestOpener() == null) {
						System.out.println("[HUB] Null chestOpener (id: " + chests.getTypeId() + " / " + player.getName() + ")");
						return;
					}
					ChestOpener chestOpener = hubPlayer.getChestOpener();
					// On close son inventaire
					player.closeInventory();
					// On le TP au centre des coffres
					player.teleport(chestOpener.getCenterLocation());
					// On le freeze temporairement
					hubPlayer.setChestFreeze(true);
				}

				@Override
				public List<ItemAction> getActions() {
					return Arrays.asList(ItemAction.INVENTORY_DROP, ItemAction.INVENTORY_LEFT_CLICK,
							ItemAction.INVENTORY_RIGHT_CLICK, ItemAction.INVENTORY_WHEEL_CLICK);
				}

			});
		});
	}

}
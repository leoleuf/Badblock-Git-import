package fr.xmalware.badblock.hub.inventories.cosmetics.boosters;

import java.util.ArrayList;
import java.util.List;

import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.block.Block;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;

import fr.badblock.gameapi.players.BadblockPlayer;
import fr.badblock.gameapi.players.data.boosters.Booster;
import fr.badblock.gameapi.players.data.boosters.PlayerBooster;
import fr.xmalware.badblock.hub.inventories.abstracts.actions.ItemAction;
import fr.xmalware.badblock.hub.inventories.abstracts.inventories.CustomInventory;
import fr.xmalware.badblock.hub.inventories.cosmetics.BackCosmeticsItem;
import fr.xmalware.badblock.hub.inventories.own.OwnableItem;
import fr.xmalware.badblock.hub.inventories.settings.items.BlueStainedGlassPaneItem;
import fr.xmalware.badblock.hub.objects.HubStoredPlayer;
import fr.xmalware.badblock.hub.utils.ConfigUtils;

public class BoosterInventory extends CustomInventory {

	private static char CONFIGURATION_SEPARATOR			= '.';

	public BoosterInventory() {
		super("hub.items.boosterinventory", ConfigUtils.getInt(main(), "booster" + CONFIGURATION_SEPARATOR + "inventory" + CONFIGURATION_SEPARATOR + "lines"));
		BlueStainedGlassPaneItem blueStainedGlassPaneItem = new BlueStainedGlassPaneItem();
		for (int id = 0; id < this.getLines() * 9; id++)
			if (id == 0 || id < 9 || id % 9 == 0) this.setItem(blueStainedGlassPaneItem, id);
		// TODO : configurable boosters
		/* MAN:
		 	Each booster will contains a list of specified servers who are effective for the booster (* for everything), these must be in the game dictionary [who is BadblockGame enum]
		  	The configuration purpose also an effective booster duration time (in seconds)
		  	XP & BadCoins multiplier fields are also queryable in configura
		 	Also, the ItemStack will be able to be configurable (name/lore to I18N files) and shown item (material/data/amount) & where it will stay (slot)
		 */
		FileConfiguration configuration = main().getConfig();
		ConfigurationSection configurationSection = configuration.getConfigurationSection("booster" + CONFIGURATION_SEPARATOR + "data");
		configurationSection.getKeys(false).forEach(key -> {
			ConfigurationSection boosterConfiguration = configurationSection.getConfigurationSection(key);
			String fullKey = boosterConfiguration.getCurrentPath() + CONFIGURATION_SEPARATOR;
			String multiplierPrefixKey = fullKey + "multipliers" + CONFIGURATION_SEPARATOR;
			String itemPrefixKey = fullKey + "item" + CONFIGURATION_SEPARATOR;
			List<String> servers = ConfigUtils.get(main(), fullKey + "servers", new ArrayList<>());
			String packName = ConfigUtils.get(main(), fullKey + "packName", "default_name");
			long time = ConfigUtils.get(main(), fullKey + "effectiveTime", 0);
			double badcoins = ConfigUtils.get(main(), multiplierPrefixKey + "badcoins", 0);
			double xp = ConfigUtils.get(main(), multiplierPrefixKey + "xp", 0);
			Material material = Material.getMaterial(ConfigUtils.get(main(), itemPrefixKey + "material", Material.STONE.name()));
			byte data = ConfigUtils.get(main(), itemPrefixKey + "data", (byte) 0);
			int amount = ConfigUtils.get(main(), itemPrefixKey + "amount", 1);
			int slot = ConfigUtils.get(main(), itemPrefixKey + "slot", 1);
			this.setItem(slot, new OwnableItem("booster", packName, material, data, amount) {

				@Override
				public void onClick(BadblockPlayer player, ItemAction action, Block clickedBlock) {
					if (hasPermission() && !player.hasPermission("hub" + CONFIGURATION_SEPARATOR + getConfigPrefix())) {
						player.sendTranslatedMessage("hub" + CONFIGURATION_SEPARATOR + getConfigPrefix() + "nopermission");
						return;
					}
					int badcoins = player.getPlayerData().getBadcoins();
					if (badcoins < getNeededBadcoins()) {
						player.sendTranslatedMessage("hub" + CONFIGURATION_SEPARATOR + "notenoughbadcoins", getNeededBadcoins() - badcoins);
						return;
					}
					player.getPlayerData().removeBadcoins(badcoins);
					Booster booster = new Booster(badcoins, xp);
					PlayerBooster playerBooster = new PlayerBooster(0, time, false, booster);
					player.getPlayerData().getBoosters().add(playerBooster);
					player.getPlayerData().saveData();
					HubStoredPlayer hubStoredPlayer = HubStoredPlayer.get(player);
					player.sendTranslatedMessage("hub" + CONFIGURATION_SEPARATOR + this.getConfigPrefix() + "bought");
					player.playSound(Sound.LEVEL_UP);
				}

			});
		});
		this.setAsLastItem(new BackCosmeticsItem());
	}

}

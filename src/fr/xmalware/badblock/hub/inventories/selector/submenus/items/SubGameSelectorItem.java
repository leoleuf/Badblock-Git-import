package fr.xmalware.badblock.hub.inventories.selector.submenus.items;

import java.util.Arrays;
import java.util.List;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import fr.badblock.gameapi.GameAPI;
import fr.badblock.gameapi.players.BadblockPlayer;
import fr.badblock.gameapi.utils.i18n.Locale;
import fr.badblock.gameapi.utils.threading.TaskManager;
import fr.xmalware.badblock.hub.inventories.abstracts.items.CustomItem;
import fr.xmalware.badblock.hub.rabbit.SEntryInfosListener;
import fr.xmalware.badblock.sentry.FullSEntry;

public abstract class SubGameSelectorItem extends CustomItem {

	int inGamePlayers = 0;
	int waitingLinePlayers = 0;
	
	public SubGameSelectorItem (String name, Material material) {
		this(name, material, (byte)0, 1, "");
	}

	public SubGameSelectorItem (String name, Material material, byte data, int amount, String lore) {
		super(name, material, data, amount, lore);
		TaskManager.scheduleSyncRepeatingTask("gameselector_" + name, new Runnable() {
			@Override
			public void run() {
				int tempWaitingLinePlayers = 0;
				int tempInGamePlayers = 0;
				for (String game : getGames()) {
					FullSEntry fullSEntry = SEntryInfosListener.sentries.get(game);
					if (fullSEntry == null) {
						continue;
					}
					tempWaitingLinePlayers += fullSEntry.getWaitinglinePlayers();
					tempInGamePlayers += fullSEntry.getIngamePLayers();
				}
				if (waitingLinePlayers == tempWaitingLinePlayers && inGamePlayers == tempInGamePlayers) return;
				waitingLinePlayers = tempWaitingLinePlayers;
				inGamePlayers = tempInGamePlayers;
				for (Player p : Bukkit.getOnlinePlayers()) {
					BadblockPlayer player = (BadblockPlayer) p;
					if (player.getOpenInventory() != null && player.getOpenInventory().getTopInventory() != null 
							&& staticItem.get(player.getPlayerData().getLocale()) != null && 
							player.getOpenInventory().getTopInventory().contains(staticItem.get(player.getPlayerData().getLocale()))) {
						int a = 0;
						for (int i = 0; i < player.getOpenInventory().getTopInventory().getSize(); i++) {
							ItemStack stack = player.getOpenInventory().getTopInventory().getItem(i);
							if (stack != null && stack.equals(staticItem.get(player.getPlayerData().getLocale()))) {
								a = i;
								break;
							}
						}
						ItemStack itemStack = staticItem.get(player.getPlayerData().getLocale());
						rebuildLore(itemStack, player.getPlayerData().getLocale());
						staticItem.put(player.getPlayerData().getLocale(), itemStack);
						player.getOpenInventory().getTopInventory().setItem(a, itemStack);
					}
				}
				
			}
		}, 1, 1);
	}

	public SubGameSelectorItem (String name, Material material, byte data, String lore) {
		this(name, material, data, 1, lore);
	}

	public SubGameSelectorItem (String name, Material material, int amount, String lore) {
		this(name, material, (byte)0, amount, lore);
	}

	public SubGameSelectorItem (String name, Material material, String lore) {
		this(name, material, (byte)0, 1, lore);
	}

	public abstract List<String> getGames();

	public void rebuildLore(ItemStack itemStack, Locale locale) {
		ItemMeta itemMeta = itemStack.getItemMeta();
		if (this.getLore() != null && !this.getLore().isEmpty())
			itemMeta.setLore(Arrays.asList(GameAPI.i18n().get(locale, this.getLore(), inGamePlayers, waitingLinePlayers)));
		itemStack.setItemMeta(itemMeta);
	}
	
	@Override
	public ItemStack toItemStack(Locale locale) {
		ItemStack itemStack = new ItemStack(this.getMaterial(), this.getAmount(), this.getData());
		ItemMeta itemMeta = itemStack.getItemMeta();
		itemMeta.setDisplayName(GameAPI.i18n().get(locale, this.getName())[0]);
		if (this.getLore() != null && !this.getLore().isEmpty())
			itemMeta.setLore(Arrays.asList(GameAPI.i18n().get(locale, this.getLore(), inGamePlayers, waitingLinePlayers)));
		itemStack.setItemMeta(itemMeta);
		return itemStack;
	}
	
}

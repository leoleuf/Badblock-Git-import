package fr.xmalware.badblock.hub.inventories.market.cosmetics.boosters.inventories.gameselector;

import java.util.Arrays;
import java.util.List;

import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.block.Block;
import org.bukkit.inventory.ItemStack;

import fr.badblock.gameapi.GameAPI;
import fr.badblock.gameapi.databases.SQLRequestType;
import fr.badblock.gameapi.players.BadblockPlayer;
import fr.xmalware.badblock.hub.BadBlockHub;
import fr.xmalware.badblock.hub.inventories.abstracts.actions.ItemAction;
import fr.xmalware.badblock.hub.inventories.abstracts.items.CustomItem;
import fr.xmalware.badblock.hub.inventories.market.cosmetics.boosters.inventories.RealTimeBoosterManager;
import fr.xmalware.badblock.hub.objects.HubPlayer;
import lombok.Getter;
import lombok.Setter;

public class BoosterItem extends CustomItem {

	@Getter@Setter private String gamePrefix;
	
	public BoosterItem(String gamePrefix, Material material) {
		super("hub.items.booster.gamechoose_names." + gamePrefix, material, "");
		this.setGamePrefix(gamePrefix);
	}

	@Override
	public List<ItemAction> getActions() {
		return Arrays.asList(ItemAction.INVENTORY_DROP, ItemAction.INVENTORY_LEFT_CLICK, ItemAction.INVENTORY_RIGHT_CLICK, ItemAction.INVENTORY_WHEEL_CLICK);
	}

	@Override
	public void onClick(BadblockPlayer player, ItemAction action, Block clickedBlock) {
		HubPlayer hubPlayer = HubPlayer.get(player);
		if (hubPlayer.lastBooster == null) {
			player.sendTranslatedMessage("hub.items.booster.unknownbooster");
			return;
		}
		if (RealTimeBoosterManager.stockage.containsKey(this.getGamePrefix())) {
			player.sendTranslatedMessage("hub.items.booster.aboosterisalreadysetinthisgame_pleasewaitorchooseanothergame");	
			return;
		}
		player.closeInventory();
		hubPlayer.lastBooster.setGameName(this.getGamePrefix());
		player.sendTranslatedMessage("hub.boosters.disabled.enabledsuccessfully", this.getGamePrefix());
		player.playSound(Sound.NOTE_PLING);
		player.saveGameData();
		RealTimeBoosterManager.stockage.put(this.getGamePrefix(), hubPlayer.getLastBooster());
		GameAPI.getAPI().getSqlDatabase().call("UPDATE keyValues SET value = '"
				+ BadBlockHub.getInstance().getGsonExpose().toJson(RealTimeBoosterManager.stockage) + "' WHERE `key` = 'booster'",
				SQLRequestType.UPDATE);
	}

	@Override
	public ItemStack toItemStack(BadblockPlayer player) {
		return build(this.getMaterial(), this.getAmount(), this.getData(), player.getTranslatedMessage(this.getName())[0], player.getTranslatedMessage("hub.items.booster.gamechooselore", this.getGamePrefix()));
	}
	
}

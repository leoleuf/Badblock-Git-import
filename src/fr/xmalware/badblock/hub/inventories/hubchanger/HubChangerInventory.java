package fr.xmalware.badblock.hub.inventories.hubchanger;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.DyeColor;
import org.bukkit.Material;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import fr.badblock.gameapi.players.BadblockPlayer;
import fr.badblock.permissions.PermissionManager;
import fr.xmalware.badblock.hub.BadBlockHub;
import fr.xmalware.badblock.hub.inventories.abstracts.inventories.CustomUniqueInventory;
import fr.xmalware.badblock.hub.rabbitmq.Hub;

public class HubChangerInventory extends CustomUniqueInventory {

	private HubChangerBackItem backItem;
	private Set<BadblockPlayer> inventoryPlayers = Collections.synchronizedSet(new HashSet<BadblockPlayer>());
	ItemStack air = new ItemStack(Material.AIR);
	
	private int i;
	
	public HubChangerInventory() {
		// super("§6Changer de hub", 1);
		super("hub.items.hubchangerinventory", 1);
		backItem = new HubChangerBackItem();
		this.setItem(1, backItem);
	}

	@SuppressWarnings("deprecation")
	@Override
	public void open(BadblockPlayer player) {
		ArrayList<Hub> choosedHubs = new ArrayList<>();
		Hub.getHubs().parallelStream().filter(hub -> hub.isOnline()).forEach(hub -> choosedHubs.add(hub));
		Collections.sort(choosedHubs, new Comparator<Hub>() {
			@Override
			public int compare(Hub arg0, Hub arg1) {
				return (arg0 == null || arg1 == null) ? 0 : arg0.compare(arg0, arg1);
			}
        });
		int linesNeeded = 1 + ((choosedHubs.size() + 1) / 9);
		setLines(linesNeeded);
		String inventoryName = player.getTranslatedMessage(getName())[0];
		Inventory inventory = Bukkit.createInventory(null, getLines() * 9, inventoryName);
		int id = -1;
		for (Hub hub : choosedHubs) {
			id++;
			Material material = Material.REDSTONE_BLOCK;
			byte data = 0;
			int amount = 1;
			ChatColor chatColor = ChatColor.DARK_RED;
			if (hub.isOnline()) {
				material = Material.WOOL;
				if (hub.getPlayers() >= hub.getSlots()) {
					data = DyeColor.RED.getWoolData();
					chatColor = ChatColor.RED;
				} else if (hub.getPlayers() >= 90) {
					data = DyeColor.ORANGE.getWoolData();
					chatColor = ChatColor.GOLD;
				} else if (hub.getPlayers() >= 80) {
					data = DyeColor.YELLOW.getWoolData();
					chatColor = ChatColor.YELLOW;
				} else if (hub.getPlayers() >= 70) {
					data = DyeColor.BLUE.getWoolData();
					chatColor = ChatColor.BLUE;
				} else if (hub.getPlayers() >= 50) {
					data = DyeColor.CYAN.getWoolData();
					chatColor = ChatColor.AQUA;
				} else {
					data = DyeColor.LIME.getWoolData();
					chatColor = ChatColor.GREEN;
				}
				amount = hub.getId() >= 64 ? 64 : hub.getId();
			}
			ItemStack itemStack = new ItemStack(material, amount, data);
			ItemMeta itemMeta = itemStack.getItemMeta();
			itemMeta.setDisplayName(chatColor + "Hub n°" + hub.getId());
			List<String> lore = new ArrayList<>();
			lore.add("");
			// §7Connectés:
			lore.add(player.getTranslatedMessage("hub.changer.onlines")[0] + "§b" + hub.getPlayers() + "/"
					+ hub.getSlots());
			i = 0;
			Map<String, String> order = new HashMap<>();
			PermissionManager.getInstance().getGroups().stream().sorted((a, b) -> { return Integer.compare(b.getPower(), a.getPower()); }).forEach(group -> {
				String d = generateForId(i) + "";
				order.put(d, group.getDisplayName());
				i++;
			});
			if (hub.getRanks() != null && !hub.getRanks().isEmpty()) {
				lore.add("");
				for (Entry<String, Integer> entry : hub.getRanks().entrySet()) {
					lore.add(player.getTranslatedMessage("permissions.tab." + order.get(entry.getKey()))[0] + "§f» §7" + entry.getValue());
				}
			}
			itemMeta.setLore(lore);
			itemStack.setItemMeta(itemMeta);
			hub.setItemStack(itemStack);
			inventory.setItem(id, itemStack);
		}
		for (int o = id + 1; o < (getLines() * 9) - 1; o++)
			inventory.setItem(o, air);
		inventory.setItem((getLines() * 9) - 1, backItem.getStaticItem().get(player.getPlayerData().getLocale()));
		if (player.getOpenInventory() == null || player.getOpenInventory().getTopInventory() == null
				|| !player.getOpenInventory().getTopInventory().getName().equals(inventoryName))
			if (!inventoryPlayers.contains(player)) {
				player.closeInventory();
				player.openInventory(inventory);
				inventoryPlayers.add(player);
			} else {
				inventoryPlayers.remove(player);
			}
		else
			player.getOpenInventory().getTopInventory().setContents(inventory.getContents());
	}

	public void update() {
		Bukkit.getScheduler().runTask(BadBlockHub.getInstance(), new Runnable() {
			@Override
			public void run() {
				Iterator<BadblockPlayer> badblockPlayer = inventoryPlayers.iterator();
				while (badblockPlayer.hasNext())
					open(badblockPlayer.next());
			}
		});
	}

	private char generateForId(int id){
		int A = 'A';

		if(id > 26){
			A   = 'a';
			id -= 26;

			return (char) (A + id);
		} else {
			return (char) (A + id);
		}
	}


}

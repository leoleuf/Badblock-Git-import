package fr.xmalware.badblock.hub.inventories.abstracts;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import fr.badblock.gameapi.GameAPI;
import fr.badblock.gameapi.players.BadblockPlayer;
import fr.badblock.gameapi.utils.i18n.Locale;
import fr.xmalware.badblock.hub.inventories.ItemAction;
import lombok.Getter;
import lombok.Setter;

@Getter @Setter public abstract class CustomItem {

	@Getter @Setter private	static ConcurrentMap<CustomItem, List<ItemStack>>		items		= new ConcurrentHashMap<>();

	private		String					name;
	private		Material				material;
	private		byte					data;
	private		String					lore;
	private		String					neededPermission;
	private		int						amount;
	protected	Map<Locale, ItemStack>	staticItem						= new HashMap<>();
	private		String					errorNeededPermission			= "hub.items.permission";//"Â§cVous n'avez pas la permission d'utiliser cet item.";
	private		CustomItem				noPermissionItem;

	public CustomItem (String name, Material material, byte data, int amount, String lore) {
		this.setName(name);
		this.setMaterial(material);
		this.setData(data);
		this.setAmount(amount);
		this.setLore(lore);
		for (Locale locale : Locale.values()) {
			ItemStack itemStack = this.toItemStack(locale);
			this.getStaticItem().put(locale, itemStack);
			List<ItemStack> list = new ArrayList<>();
			if (items.containsKey(this)) list = items.get(this);
			list.add(itemStack);
			items.put(this, list);
		}
	}

	public CustomItem (String name, Material material, byte data, String lore) {
		this(name, material, data, 1, lore);
	}

	public CustomItem (String name, Material material, int amount, String lore) {
		this(name, material, (byte)0, amount, lore);
	}

	public CustomItem (String name, Material material, String lore) {
		this(name, material, (byte)0, 1, lore);
	}

	public CustomItem (String name, Material material) {
		this(name, material, (byte)0, 1, "");
	}

	public ItemStack build(Material material, int amount, byte data, String name, String... lore) {
		ItemStack itemStack = new ItemStack(material, amount, data);
		ItemMeta itemMeta = itemStack.getItemMeta();
		itemMeta.setDisplayName(name);
		if (lore != null && lore.length > 0)
			itemMeta.setLore(Arrays.asList(lore));
		itemStack.setItemMeta(itemMeta);
		return itemStack;
	}

	public ItemStack toItemStack(Locale locale) {
		ItemStack itemStack = new ItemStack(material, amount, data);
		ItemMeta itemMeta = itemStack.getItemMeta();
		itemMeta.setDisplayName(GameAPI.i18n().get(locale, name)[0]);
		if (lore != null && !lore.isEmpty())
			itemMeta.setLore(Arrays.asList(GameAPI.i18n().get(locale, lore)));
		itemStack.setItemMeta(itemMeta);
		return itemStack;
	}

	public ItemStack toItemStack(BadblockPlayer player) {
		if (this.getNeededPermission() != null && !player.hasPermission(this.getNeededPermission()))
			if (this.getNoPermissionItem() != null) return this.getNoPermissionItem().getStaticItem().get(player.getPlayerData().getLocale());
		return this.getStaticItem().get(player.getPlayerData().getLocale());
	}

	public boolean isSame(BadblockPlayer player, ItemStack itemStack) {
		return itemStack.isSimilar(this.getStaticItem().get(player.getPlayerData().getLocale()));
	}

	public abstract List<ItemAction> getActions();

	public abstract void onClick(BadblockPlayer player, ItemAction action, Block clickedBlock);

}

package fr.xmalware.badblock.hub.inventories.abstracts.inventories;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.ConcurrentHashMap;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.inventory.Inventory;

import fr.badblock.gameapi.players.BadblockPlayer;
import fr.xmalware.badblock.hub.BadBlockHub;
import fr.xmalware.badblock.hub.inventories.abstracts.items.CustomItem;
import fr.xmalware.badblock.hub.objects.HubPlayer;
import lombok.Getter;
import lombok.Setter;

@Getter @Setter public abstract class CustomPlayerInventory {

	protected static Map<Class<? extends CustomPlayerInventory>, CustomPlayerInventory> customInventories		 = new HashMap<>();

	protected	Inventory								inventory;
	protected	Map<Integer, CustomItem> 				items;
	private		int										lines;

	private		String									name;

	public CustomPlayerInventory (String name, Player player) {
		this(name, 6, player);
	}

	public CustomPlayerInventory (String name, int lines, Player player) {
		this.setName(name);
		this.setLines(lines);
		this.setItems(new ConcurrentHashMap<>());
		customInventories.put(this.getClass(), this);
	}

	public void open(BadblockPlayer player) {
		player.closeInventory();
		Inventory inventory = Bukkit.createInventory(null, this.getLines() * 9, player.getTranslatedMessage(this.getName())[0]);
		for (Entry<Integer, CustomItem> entry : items.entrySet())
			inventory.setItem(entry.getKey(), entry.getValue().toItemStack(player));
		player.openInventory(inventory);
	}

	public void setItem(CustomItem customItem, int... slots) {
		for (int slot : slots) 
			this.getItems().put(slot, customItem);
	}

	public void addItem(CustomItem customItem) {
		for (int i = 0; i < lines * 9; i++)
			if (items.get(i) == null) {
				this.getItems().put(i, customItem);
				return;
			}
	}

	public void setItem(int slot, CustomItem customItem) {
		this.getItems().put(slot, customItem);
	}

	public void setAsLastItem(CustomItem customItem) {
		this.getItems().put(9 * this.getLines() - 1, customItem);
	}

	public void setNoFilledItem(CustomItem customItem) {
		for (int i = 0; i < lines * 9; i++)
			if (items.get(i) == null) this.getItems().put(i, customItem);
	}
	
	public static BadBlockHub main() {
		return BadBlockHub.getInstance();
	}

}

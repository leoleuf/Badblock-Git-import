package fr.xmalware.badblock.hub.listeners;

import java.util.Map.Entry;

import org.bukkit.Bukkit;
import org.bukkit.GameMode;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.inventory.InventoryAction;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import com.google.common.io.ByteArrayDataOutput;
import com.google.common.io.ByteStreams;

import fr.xmalware.badblock.hub.BadBlockHub;
import fr.xmalware.badblock.hub.inventories.ItemAction;
import fr.xmalware.badblock.hub.inventories.abstracts.CustomInventory;
import fr.xmalware.badblock.hub.inventories.abstracts.CustomItem;
import fr.xmalware.badblock.hub.inventories.hubchanger.HubChangerInventory;
import fr.xmalware.badblock.hub.objects.HubPlayer;
import fr.xmalware.badblock.hub.rabbit.Hub;

public class InventoryClickListener extends _HubListener {
	
	@EventHandler
	public void onInventoryClick(InventoryClickEvent event) {
		if (!(event.getWhoClicked() instanceof Player)) return;
		Player player = (Player) event.getWhoClicked();
		
		// Bypass en gm
		if (player.getGameMode().equals(GameMode.CREATIVE))
			return;
		
		// Cancel
		HubPlayer lobbyPlayer = HubPlayer.get(player);
		event.setCancelled(!lobbyPlayer.isAdmin());
		
		
		ItemStack itemStack = event.getCurrentItem();
		if (itemStack == null) return;
		InventoryAction inventoryAction = event.getAction();
		ItemAction itemAction = ItemAction.get(inventoryAction);
		for (Entry<CustomItem, ItemStack> entry : CustomItem.getItems().entrySet()) {
			CustomItem customItem = (CustomItem) entry.getKey();
			if (customItem == null) continue;
			if (!customItem.getActions().contains(itemAction)) continue;
			if (!entry.getValue().isSimilar(itemStack)) continue;
			if (lobbyPlayer.hasSpam()) return;
			if (customItem.getNeededPermission() != null && !lobbyPlayer.hasPermission(customItem.getNeededPermission())) {
				player.sendMessage(customItem.getErrorNeededPermission());
				return;
			}
			customItem.onClick(lobbyPlayer, itemAction, null);
		}
		
		if (event.getInventory().equals(CustomInventory.get(HubChangerInventory.class).getInventory())) {
			if (itemStack.getType().equals(Material.REDSTONE_BLOCK)) {
				player.sendMessage("§cCe hub est indisponible.");
				return;
			}
			ItemMeta itemMeta = itemStack.getItemMeta();
			if (itemMeta == null) return;
			if (itemStack.getType().equals(Material.WOOL)) {
				for (Hub hub : Hub.getHubs()) {
					if (hub.getItemStack().getItemMeta() != null && hub.getItemStack().getItemMeta().getDisplayName().equals(itemStack.getItemMeta().getDisplayName())) {
						if (hub.getHubName().equals(Bukkit.getServerName())) {
							player.sendMessage("§cVous êtes déjà connecté sur ce hub.");
							return;
						}
						if (!hub.isOnline()) {
							player.sendMessage("§cCe hub est indisponible.");
							return;			
						}
						if (hub.getPlayers() >= hub.getSlots()) {
							player.sendMessage("§cCe hub est complet.");
							return;
						}
						player.sendMessage("§7Téléportation au hub n°§b" + hub.getId() + "§7...");
						ByteArrayDataOutput out = ByteStreams.newDataOutput();
					    out.writeUTF("ConnectOther");
					    out.writeUTF(player.getName());
					    out.writeUTF(hub.getHubName());
					    player.sendPluginMessage(BadBlockHub.getInstance(), "BungeeCord", out.toByteArray());
						return;
					}
				}
				player.sendMessage("§cHub inexistant.");
				return;
			}
		}
		
	}
	
}

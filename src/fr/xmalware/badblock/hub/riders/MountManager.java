package fr.xmalware.badblock.hub.riders;


import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.bukkit.DyeColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.craftbukkit.v1_8_R3.CraftWorld;
import org.bukkit.craftbukkit.v1_8_R3.entity.CraftEntity;
import org.bukkit.entity.CaveSpider;
import org.bukkit.entity.Creeper;
import org.bukkit.entity.Enderman;
import org.bukkit.entity.Endermite;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Giant;
import org.bukkit.entity.Golem;
import org.bukkit.entity.Guardian;
import org.bukkit.entity.Horse;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Ocelot;
import org.bukkit.entity.Pig;
import org.bukkit.entity.PigZombie;
import org.bukkit.entity.Player;
import org.bukkit.entity.Rabbit;
import org.bukkit.entity.Sheep;
import org.bukkit.entity.Silverfish;
import org.bukkit.entity.Skeleton;
import org.bukkit.entity.Snowman;
import org.bukkit.entity.Squid;
import org.bukkit.entity.Villager;
import org.bukkit.entity.Witch;
import org.bukkit.entity.Wither;
import org.bukkit.entity.Wolf;
import org.bukkit.entity.Zombie;
import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
import org.bukkit.inventory.ItemStack;

import fr.xmalware.badblock.hub.objects.HubPlayer;
import fr.xmalware.badblock.hub.riders.custom.CustomChicken;
import fr.xmalware.badblock.hub.riders.custom.CustomCow;
import fr.xmalware.badblock.hub.riders.custom.CustomGolem;
import fr.xmalware.badblock.hub.riders.custom.CustomHorse;
import fr.xmalware.badblock.hub.riders.custom.CustomMagmaCube;
import fr.xmalware.badblock.hub.riders.custom.CustomPig;
import fr.xmalware.badblock.hub.riders.custom.CustomSheep;
import fr.xmalware.badblock.hub.riders.custom.CustomSlime;
import fr.xmalware.badblock.hub.riders.custom.CustomSpider;
import fr.xmalware.badblock.hub.riders.custom.CustomVillager;
import fr.xmalware.badblock.hub.riders.custom.CustomWolf;
import net.minecraft.server.v1_8_R3.EntityAgeable;
import net.minecraft.server.v1_8_R3.EntityHuman;
import net.minecraft.server.v1_8_R3.EntityInsentient;
import net.minecraft.server.v1_8_R3.EntityLiving;
import net.minecraft.server.v1_8_R3.EntityTypes;
import net.minecraft.server.v1_8_R3.EntityVillager;
import net.minecraft.server.v1_8_R3.Item;
import net.minecraft.server.v1_8_R3.World;

public class MountManager {
	
	public static double mountSpeed = 0.20D;
	public static double maxHealth = 0.20D;
	public final static int maxSlimeSize = 5;
	
	/**
	 * Registering entities
	 */
	public MountManager() {
		MountManager.registerEntity("Chicken", 93, RideableChicken.class);
		MountManager.registerEntity("Cow", 92, RideableCow.class);
		MountManager.registerEntity("Golem", 99, RideableGolem.class);
		MountManager.registerEntity("Horse", 100, RideableHorse.class);
		MountManager.registerEntity("MagmaCube", 62, RideableMagmaCube.class);
		MountManager.registerEntity("Pig", 90, RideablePig.class);
		MountManager.registerEntity("Sheep", 91, RideableSheep.class);
		MountManager.registerEntity("Slime", 55, RideableSlime.class);
		MountManager.registerEntity("Spider", 52, RideableSpider.class);
		MountManager.registerEntity("Wolf", 95, RideableWolf.class);
		MountManager.registerEntity("Silverfish", 60, RideableSilverfish.class);
		MountManager.registerEntity("Guardian", 68, RideableGuardian.class);
		MountManager.registerEntity("Rabbit", 101, RideableRabbit.class);
		MountManager.registerEntity("Endermite", 67, RideableEndermite.class);
		MountManager.registerEntity("Creeper", 50, RideableCreeper.class);
		MountManager.registerEntity("Giant", 53, RideableGiant.class);
		MountManager.registerEntity("Enderman", 58, RideableEnderman.class);
		MountManager.registerEntity("Ocelot", 98, RideableOcelot.class);
		MountManager.registerEntity("PigZombie", 57, RideablePigZombie.class);
		MountManager.registerEntity("Skeleton", 51, RideableSkeleton.class);
		MountManager.registerEntity("Snowman", 97, RideableSnowman.class);
		MountManager.registerEntity("CaveSpider", 59, RideableCaveSpider.class);
		MountManager.registerEntity("Squid", 94, RideableSquid.class);
		MountManager.registerEntity("Witch", 66, RideableWitch.class);
		MountManager.registerEntity("WitherBoss", 64, RideableWither.class);
		MountManager.registerEntity("Zombie", 54, RideableZombie.class);
		// Le customnpc
		MountManager.registerEntity("Villager", 120, CustomVillager.class);
	}
	
	private static void make(EntityLiving nmsEntity, Player player, boolean b){
		
		if (player.isInsideVehicle())
			player.getVehicle().eject();
		if (!canSummonMount(player.getLocation())) {
			player.sendMessage("Vous ne pouvez pas utilisez ce mob ici.");
			return;
		}
		
		LivingEntity mount = (LivingEntity) nmsEntity.getBukkitEntity();
		if (b) {
			mount.setCustomName("Dinnerbone");
			mount.setCustomNameVisible(false);
		}
		if(mount instanceof EntityAgeable) ((EntityAgeable) mount).setAge(0);
		org.bukkit.Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		nmsEntity.setPosition(loc.getX(), loc.getY() + 0.5D, loc.getZ());
		nmsWorld.addEntity(nmsEntity, SpawnReason.CUSTOM);
		mount.setMaxHealth(maxHealth);
		mount.setPassenger(player);
		player.closeInventory();
	}
	
	private static boolean canSummonMount(Location location) {
		org.bukkit.World world = location.getWorld();
		Block block = location.getBlock();
		for(int x = location.getBlockX() - 1; x <= location.getBlockX() + 1; x++){
			for(int y = location.getBlockY(); y <= location.getBlockY() + 1; y++){
				for(int z = location.getBlockZ() - 1; z <= location.getBlockZ() + 1; z++){
					block = world.getBlockAt(x, y, z);
					if (block.getType().isSolid()) return false;
				}
			}
		}
		return true;
	}
	
	public static void rideHorse(Player player, boolean b) {
		org.bukkit.Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableHorse nmsEntity = new RideableHorse(nmsWorld, player);
		final Horse bEntity = (Horse) nmsEntity.getBukkitEntity();
		bEntity.setTamed(true);
		bEntity.setOwner(player);
		bEntity.getInventory().setSaddle(new ItemStack(Material.SADDLE));
		make(nmsEntity, player, b);
	}
	
	public static void rideChicken(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		make(new RideableChicken(nmsWorld, player), player, b);
	}
	
	public static EntityVillager launchVillager(Location location) {
		Location loc = location;
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		CustomVillager nmsEntity = new CustomVillager(nmsWorld);
		LivingEntity mount = (LivingEntity) nmsEntity.getBukkitEntity();
		if(mount instanceof EntityAgeable) ((EntityAgeable) mount).setAge(0);
		nmsEntity.setPosition(loc.getX(), loc.getY() + 0.5D, loc.getZ());
		nmsWorld.addEntity(nmsEntity, SpawnReason.CUSTOM);
		mount.setMaxHealth(maxHealth);
		return nmsEntity;
	}
	
	public static CraftEntity launchEntity(Location location, EntityType entityType) {
		Location loc = location;
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		net.minecraft.server.v1_8_R3.EntityLiving nmsEntity = null;
		if (entityType == EntityType.VILLAGER) nmsEntity = new CustomVillager(nmsWorld);
		else if (entityType == EntityType.CHICKEN) nmsEntity = new CustomChicken(nmsWorld, 1);
		else if (entityType == EntityType.COW) nmsEntity = new CustomCow(nmsWorld, 1);
		else if (entityType == EntityType.IRON_GOLEM) nmsEntity = new CustomGolem(nmsWorld, 1);
		else if (entityType == EntityType.HORSE) nmsEntity = new CustomHorse(nmsWorld, 1);
		else if (entityType == EntityType.MAGMA_CUBE) nmsEntity = new CustomMagmaCube(nmsWorld, 1);
		else if (entityType == EntityType.PIG) nmsEntity = new CustomPig(nmsWorld, 1);
		else if (entityType == EntityType.SHEEP) nmsEntity = new CustomSheep(nmsWorld, 1);
		else if (entityType == EntityType.SLIME) nmsEntity = new CustomSlime(nmsWorld, 1);
		else if (entityType == EntityType.SPIDER) nmsEntity = new CustomSpider(nmsWorld, 1);
		else if (entityType == EntityType.VILLAGER) nmsEntity = new CustomVillager(nmsWorld);
		else if (entityType == EntityType.WOLF) nmsEntity = new CustomWolf(nmsWorld, 1);
		else nmsEntity = new CustomVillager(nmsWorld);
		LivingEntity mount = (LivingEntity) nmsEntity.getBukkitEntity();
		System.out.println("A (" + entityType + ") > " + (!mount.isDead()));
		if(mount instanceof EntityAgeable) ((EntityAgeable) mount).setAge(0);
		System.out.println("B (" + entityType + ") > " + (!mount.isDead()));
		nmsEntity.setPosition(loc.getX(), loc.getY(), loc.getZ());
		System.out.println("C (" + entityType + ") > " + (!mount.isDead()));
		nmsWorld.addEntity(nmsEntity, SpawnReason.CUSTOM);
		System.out.println("D (" + entityType + ") > " + (!mount.isDead()));
		mount.setMaxHealth(maxHealth);
		System.out.println("E (" + entityType + ") > " + (!mount.isDead()));
		return nmsEntity.getBukkitEntity();
	}
	
	public static void ridePig(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideablePig nmsEntity = new RideablePig(nmsWorld, player);
		Pig bEntity = (Pig)nmsEntity.getBukkitEntity();
		bEntity.setSaddle(true);
		bEntity.setCustomName("Dinnerbone");
		bEntity.setCustomNameVisible(false);
		make(nmsEntity, player, b);
	}
	
	public static void rideSheepDisco(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableSheep nmsEntity = new RideableSheep(nmsWorld, player);
		Sheep bEntity = (Sheep) nmsEntity.getBukkitEntity();
		bEntity.setAdult();
		bEntity.setCustomName("jeb_");
		bEntity.setCustomNameVisible(false);
		make(nmsEntity, player, b);
	} 
	
	public static void rideSheep(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableSheep nmsEntity = new RideableSheep(nmsWorld, player);
		Sheep bEntity = (Sheep) nmsEntity.getBukkitEntity();
		bEntity.setAdult();
		bEntity.setCustomName(player.getName());
		bEntity.setCustomNameVisible(true);
		make(nmsEntity, player, b);
	} 
	
	public static void rideCow(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		make(new RideableCow(nmsWorld, player), player, b);
	}
	
	public static void rideWolf(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableWolf nmsEntity = new RideableWolf(nmsWorld, player);
		Wolf bEntity = (Wolf)nmsEntity.getBukkitEntity();
		Random rand = new Random();
		short data = (short) rand.nextInt(16);
		bEntity.setOwner(player);
		bEntity.setCollarColor(DyeColor.values()[data]);
		make(nmsEntity, player, b);
	}
	
	public static void rideSpider(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableSpider nmsEntity = new RideableSpider(nmsWorld, player);
		make(nmsEntity, player, b);
	}
	
	public static void makeSlime(Player player, int size, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableSlime nmsEntity = new RideableSlime(nmsWorld, player, size);
		make(nmsEntity, player, b);
	}
	
	public static void makeMagmaCube(Player player, int size, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableMagmaCube nmsEntity = new RideableMagmaCube(nmsWorld, player, size);
		make(nmsEntity, player, b);
	}
	
	public static void rideGolem(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableGolem nmsEntity = new RideableGolem(nmsWorld, player);
		Golem bEntity = (Golem) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}
	
	public static boolean shouldDie(final EntityLiving mount, Player rider) {
		if (mount.passenger == null || !(mount.passenger instanceof EntityHuman)) {
			if (rider == null || !rider.isOnline() || HubPlayer.get(rider).teleportMount < System.currentTimeMillis()) {
				mount.die();
				return true;
			}else{
				return false;
			}
		}
		return false;
	}
	
	@SuppressWarnings("unchecked")
	public static void registerEntity(String name, int id, Class<? extends EntityInsentient> customClass) {
		try {
			List<Map<?, ?>> dataMaps = new ArrayList<Map<?, ?>>();
			for (Field f : EntityTypes.class.getDeclaredFields()) {
				if (f.getType().getSimpleName().equals(Map.class.getSimpleName())) {
					f.setAccessible(true);
					dataMaps.add((Map<?, ?>) f.get(null));
				}
			}
			((Map<Class<? extends EntityInsentient>, String>) dataMaps.get(1)).put(customClass, name);
			((Map<Class<? extends EntityInsentient>, Integer>) dataMaps.get(3)).put(customClass, id);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void rideSilverfish(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableSilverfish nmsEntity = new RideableSilverfish(nmsWorld, player);
		Silverfish bEntity = (Silverfish) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		make(nmsEntity, player, b);
	}

	public static void rideRabbit(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableRabbit nmsEntity = new RideableRabbit(nmsWorld, player);
		Rabbit bEntity = (Rabbit) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}

	public static void rideGuardian(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableGuardian nmsEntity = new RideableGuardian(nmsWorld, player);
		Guardian bEntity = (Guardian) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		make(nmsEntity, player, b);
	}
	
	public static void rideEndermite(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableEndermite nmsEntity = new RideableEndermite(nmsWorld, player);
		Endermite bEntity = (Endermite) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		make(nmsEntity, player, b);
	}

	public static void rideCreeper(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableCreeper nmsEntity = new RideableCreeper(nmsWorld, player);
		Creeper bEntity = (Creeper) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}

	public static void rideGiant(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableGiant nmsEntity = new RideableGiant(nmsWorld, player);
		Giant bEntity = (Giant) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}

	public static void rideWither(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableWither nmsEntity = new RideableWither(nmsWorld, player);
		Wither bEntity = (Wither) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}

	public static void rideEnderman(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableEnderman nmsEntity = new RideableEnderman(nmsWorld, player);
		Enderman bEntity = (Enderman) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}

	public static void rideOcelot(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableOcelot nmsEntity = new RideableOcelot(nmsWorld, player);
		Ocelot bEntity = (Ocelot) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}

	public static void ridePigZombie(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideablePigZombie nmsEntity = new RideablePigZombie(nmsWorld, player);
		PigZombie bEntity = (PigZombie) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}

	public static void rideSkeleton(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableSkeleton nmsEntity = new RideableSkeleton(nmsWorld, player);
		Skeleton bEntity = (Skeleton) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}

	public static void rideSnowman(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableSnowman nmsEntity = new RideableSnowman(nmsWorld, player);
		Snowman bEntity = (Snowman) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}

	public static void rideCaveSpider(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableCaveSpider nmsEntity = new RideableCaveSpider(nmsWorld, player);
		CaveSpider bEntity = (CaveSpider) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}

	public static void rideSquid(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableSquid nmsEntity = new RideableSquid(nmsWorld, player);
		Squid bEntity = (Squid) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}
	
	public static void rideVillager(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableVillager nmsEntity = new RideableVillager(nmsWorld, player);
		Villager bEntity = (Villager) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}

	public static void rideWitherSkeleton(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableSkeleton nmsEntity = new RideableSkeleton(nmsWorld, player);
		try {
			nmsEntity.setSkeletonType(1);
           /* Field selector = EntitySkeleton.class.getDeclaredField("goalSelector");
            selector.setAccessible(true);
            Field e = EntitySkeleton.class.getDeclaredField("e");
            e.setAccessible(true);
            PathfinderGoalSelector goals = (PathfinderGoalSelector) selector.get(nmsEntity);
            goals.a(4, (PathfinderGoal) e.get(nmsEntity));*/
            nmsEntity.setEquipment(0, new net.minecraft.server.v1_8_R3.ItemStack(Item.getById(272)));
        }
        catch (Throwable e) {
            e.printStackTrace();
        }
		Skeleton bEntity = (Skeleton) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}

	public static void rideZombie(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableZombie nmsEntity = new RideableZombie(nmsWorld, player);
		Zombie bEntity = (Zombie) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}

	public static void rideBabyZombie(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableZombie nmsEntity = new RideableZombie(nmsWorld, player);
		Zombie bEntity = (Zombie) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		bEntity.setBaby(true);
		
		make(nmsEntity, player, b);
	}

	public static void rideWitch(Player player, boolean b) {
		Location loc = player.getLocation();
		World nmsWorld = ((CraftWorld) loc.getWorld()).getHandle();
		RideableWitch nmsEntity = new RideableWitch(nmsWorld, player);
		Witch bEntity = (Witch) nmsEntity.getBukkitEntity();
		bEntity.setCanPickupItems(true);
		
		make(nmsEntity, player, b);
	}
	
}
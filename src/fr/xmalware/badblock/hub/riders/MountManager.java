package fr.xmalware.badblock.hub.riders;


import java.util.Random;

import org.bukkit.Bukkit;
import org.bukkit.DyeColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.entity.Ageable;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Horse;
import org.bukkit.entity.HumanEntity;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.MagmaCube;
import org.bukkit.entity.Pig;
import org.bukkit.entity.Player;
import org.bukkit.entity.Sheep;
import org.bukkit.entity.Skeleton;
import org.bukkit.entity.Skeleton.SkeletonType;
import org.bukkit.entity.Wolf;
import org.bukkit.entity.Zombie;
import org.bukkit.inventory.ItemStack;

import fr.badblock.gameapi.GameAPI;
import fr.badblock.gameapi.fakeentities.FakeEntity;
import fr.badblock.gameapi.packets.watchers.WatcherEntity;
import fr.badblock.gameapi.players.BadblockPlayer;
import fr.badblock.gameapi.utils.entities.CustomCreature;
import fr.badblock.gameapi.utils.i18n.TranslatableString;
import fr.xmalware.badblock.hub.BadBlockHub;
import fr.xmalware.badblock.hub.objects.HubPlayer;

public class MountManager {

	public static double mountSpeed = 0.20D;
	public static double maxHealth = 0.20D;
	public final static int maxSlimeSize = 5;

	private static void make(LivingEntity entity, Player player, boolean b){
		if(player.isInsideVehicle())
			player.getVehicle().eject();
		if(!canSummonMount(player.getLocation())) {
			entity.remove();
			player.sendMessage("Vous ne pouvez pas utilisez ce mob ici.");
			return;
		}

		if(entity instanceof Ageable) ((Ageable) entity).setAge(0);

		entity.setMaxHealth(maxHealth);
		entity.setPassenger(player);
		player.closeInventory();
	}

	private static boolean canSummonMount(Location location) {
		org.bukkit.World world = location.getWorld();
		Block block = location.getBlock();
		for(int x = location.getBlockX() - 1; x <= location.getBlockX() + 1; x++){
			for(int y = location.getBlockY(); y <= location.getBlockY() + 1; y++){
				for(int z = location.getBlockZ() - 1; z <= location.getBlockZ() + 1; z++){
					block = world.getBlockAt(x, y, z);
					if (block.getType().isSolid()) return false;
				}
			}
		}
		return true;
	}

	public static LivingEntity launchEntity(Location location, EntityType entityType) {
		LivingEntity mount = spawn(location, entityType, true, false, false, false, mountSpeed);

		if(mount instanceof Ageable) ((Ageable) mount).setAge(0);
		mount.setMaxHealth(maxHealth);

		return mount;
	}

	public static void ridePig(Player player, boolean b) {
		Pig bEntity = (Pig) spawn(player.getLocation(), EntityType.PIG, true, false, false, b, mountSpeed);
		bEntity.setSaddle(true);
		bEntity.setCustomName("Dinnerbone");
		bEntity.setCustomNameVisible(false);

		make(bEntity, player, b);
	}

	public static void rideSheepDisco(Player player, boolean b) {
		Sheep bEntity = (Sheep) spawn(player.getLocation(), EntityType.SHEEP, true, false, false, b, mountSpeed);
		bEntity.setAdult();
		bEntity.setCustomName("jeb_");
		bEntity.setCustomNameVisible(false);

		make(bEntity, player, b);
	} 

	public static void rideSheep(Player player, boolean b) {
		Sheep bEntity = (Sheep) spawn(player.getLocation(), EntityType.SHEEP, true, false, false, b, mountSpeed);
		bEntity.setAdult();
		bEntity.setCustomName(player.getName());
		bEntity.setCustomNameVisible(true);

		make(bEntity, player, b);
	} 

	public static void rideWolf(Player player, boolean b) {
		Wolf bEntity = (Wolf) spawn(player.getLocation(), EntityType.WOLF, true, false, false, b, mountSpeed);
		bEntity.setCanPickupItems(true);
		bEntity.setOwner(player);
		bEntity.setCollarColor(DyeColor.values()[new Random().nextInt(16)]);

		make(bEntity, player, b);
	}

	public static void makeSlime(Player player, int size, boolean b) {
		MagmaCube bEntity = (MagmaCube) spawn(player.getLocation(), EntityType.SLIME, true, false, false, b, mountSpeed);
		bEntity.setCanPickupItems(true);
		bEntity.setSize(size);

		make(bEntity, player, b);
	}

	public static void makeMagmaCube(Player player, int size, boolean b) {
		MagmaCube bEntity = (MagmaCube) spawn(player.getLocation(), EntityType.MAGMA_CUBE, true, false, false, b, mountSpeed);
		bEntity.setCanPickupItems(true);
		bEntity.setSize(size);

		make(bEntity, player, b);
	}

	public static void rideEntity(Player player, EntityType creature, boolean b) {
		LivingEntity bEntity = spawn(player.getLocation(), creature, true, false, false, b, mountSpeed);

		if(bEntity == null){
			System.out.println(creature + " can't spawn !"); return;
		}

		bEntity.setCanPickupItems(true);
		make(bEntity, player, b);	
	}

	public static Horse rideHorse(Player player, boolean b) {
		Horse bEntity = (Horse) spawn(player.getLocation(), EntityType.HORSE, true, true, true, b, 0.3D);
		bEntity.setTamed(true);
		bEntity.setOwner(player);
		
		bEntity.getInventory().setSaddle(new ItemStack(Material.SADDLE));
		make(bEntity, player, b);
		return bEntity;
	}

	public static void rideWitherSkeleton(Player player, boolean b) {
		Skeleton bEntity = (Skeleton) spawn(player.getLocation(), EntityType.SKELETON, true, false, false, b, mountSpeed);
		bEntity.setCanPickupItems(true);
		bEntity.setSkeletonType(SkeletonType.WITHER);
		bEntity.getEquipment().setItemInHand(new ItemStack(Material.STONE_SWORD, 1));

		make(bEntity, player, b);
	}

	public static void rideBabyZombie(Player player, boolean b) {
		Zombie bEntity = (Zombie) spawn(player.getLocation(), EntityType.ZOMBIE, true, false, false, b, mountSpeed);
		bEntity.setCanPickupItems(true);
		bEntity.setBaby(true);

		make(bEntity, player, b);
	}

	public static LivingEntity spawn(Location location, EntityType type, boolean movable, boolean rideable, boolean canFly, boolean inversed, double mountSpeed){
		CustomCreature custom = GameAPI.getAPI().spawnCustomEntity(location.clone().add(0, 0.5d, 0), type);
		
		if(custom == null) return null;
		
		custom.setAgressive(false);
		custom.setFireProof(true);
		custom.setInvincible(true);
		custom.setMovable(movable);
		custom.setRideable(rideable);
		custom.setAllowedToFly(canFly);
		
		custom.setSpeed(mountSpeed);
		
		Entity entity = custom.getBukkit();
		
		if(inversed){
			entity.setCustomName("Dinnerbone");
			entity.setCustomNameVisible(false);
		}
		
		return (LivingEntity) entity;
	}

	public static <T extends WatcherEntity> FakeEntity spawn(Location location, EntityType type, Class<T> clazz, boolean movable, boolean rideable, boolean canFly, boolean inversed, TranslatableString customName) {
		FakeEntity<T> fakeEntity = GameAPI.getAPI().spawnFakeLivingEntity(location, type, clazz);
		if (customName != null) {
			fakeEntity.getWatchers().setCustomName(customName);
			fakeEntity.getWatchers().setCustomNameVisible(true);
		}else if (inversed) {
			fakeEntity.getWatchers().setCustomName("Dinnerbone");
			fakeEntity.getWatchers().setCustomNameVisible(false);
		}
		if (fakeEntity == null) return null;
		fakeEntity.getWatchers().setOnFire(false);
		BadBlockHub.getInstance().getFakeEntities().add(fakeEntity);
		for (Player player : Bukkit.getOnlinePlayers())
			fakeEntity.show((BadblockPlayer) player);
		return fakeEntity;
	}

	public static boolean shouldDie(final LivingEntity mount, Player rider) {
		if (mount.getPassenger() == null || !(mount.getPassenger() instanceof HumanEntity)) {
			if (rider == null || !rider.isOnline() || HubPlayer.get(rider).teleportMount < System.currentTimeMillis()) {
				mount.remove();
				return true;
			} else{
				return false;
			}
		}
		return false;
	}

}
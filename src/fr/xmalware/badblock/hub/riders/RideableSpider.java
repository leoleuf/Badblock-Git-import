package fr.xmalware.badblock.hub.riders;

import java.lang.reflect.Field;

import org.bukkit.entity.Player;

import fr.xmalware.badblock.hub.objects.HubPlayer;
import net.minecraft.server.v1_8_R3.EntityHuman;
import net.minecraft.server.v1_8_R3.EntityLiving;
import net.minecraft.server.v1_8_R3.EntitySpider;
import net.minecraft.server.v1_8_R3.MathHelper;
import net.minecraft.server.v1_8_R3.World;

public class RideableSpider extends EntitySpider {

	public RideableSpider(World world, Player rider) {
		super(world);
		this.rider = rider;
	}

	Player rider = null;

	@Override
	public void g(float sideMot, float forMot) {
		System.out.print("A");
		if ((this.passenger != null && this.passenger instanceof EntityHuman) && (rider != null && rider.isOnline())) {
			HubPlayer hubPlayer = HubPlayer.get(rider);
			hubPlayer.lastMount = System.currentTimeMillis() + 1000;
			hubPlayer.mountEntity = this;
			this.lastYaw = this.yaw = this.passenger.yaw;
			this.pitch = this.passenger.pitch * 0.5F;
			this.setYawPitch(this.yaw, this.pitch);
			this.aK = this.aI = this.yaw;
			sideMot = ((EntityLiving) this.passenger).aZ * 0.5F;
			forMot = ((EntityLiving) this.passenger).ba;
			if (forMot <= 0.0F) {
				forMot *= 0.25F;
			}

			Field jump = null;
			try {
				jump = EntityLiving.class.getDeclaredField("aY");
			} catch (NoSuchFieldException e1) {
				e1.printStackTrace();
			} catch (SecurityException e1) {
				e1.printStackTrace();
			}
			jump.setAccessible(true);

			if (jump != null && this.onGround) {
				try {
					if (jump.getBoolean(this.passenger)) {
						double jumpHeight = 0.5D;
						this.motY = jumpHeight;
					}
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				}
			}

			this.S = 1.0F;
			this.aM = this.bI() * 0.1F;
			if (!this.world.isClientSide) {
				this.k(0.35F);
				super.g(sideMot, forMot);
			}

			this.aA = this.aB;
			double d0 = this.locX - this.lastX;
			double d1 = this.locZ - this.lastZ;
			float f4 = MathHelper.sqrt(d0 * d0 + d1 * d1) * 4.0F;
			if (f4 > 1.0F) {
				f4 = 1.0F;
			}

			this.aB += (f4 - this.aB) * 0.4F;
			this.aC += this.aB;
		} else {
			this.die();
		}

	}
}
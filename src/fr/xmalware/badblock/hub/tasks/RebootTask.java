package fr.xmalware.badblock.hub.tasks;

import org.bukkit.Bukkit;

import fr.badblock.gameapi.GameAPI;
import fr.badblock.gameapi.utils.BukkitUtils;
import fr.badblock.gameapi.utils.threading.TaskManager;

public class RebootTask extends CustomTask {

	private int 	laggy = 0;
	private long	time  = 900;
	
	public RebootTask() {
		super(0, 20);
	}

	@Override
	public void done() {
		if (laggy == -1 && time != -1) {
			if (time == 0) {
				time = -1;
				// Broadcast what's going on
				GameAPI.i18n().broadcast("hub.reboot.teleport");
				// Teleport to the "lobby" skeleton server.
				BukkitUtils.forEachPlayers(player -> player.sendPlayer("lobby"));
				// We wait to shutdown the server.
				TaskManager.runTaskLater(new Runnable() {
					@Override
					public void run() {
						// Check if players are here
						int onlinePlayers = Bukkit.getOnlinePlayers().size();
						if (onlinePlayers > 0) {
							// Teleport them to the login skeleton server.
							BukkitUtils.forEachPlayers(player -> player.sendPlayer("skeleton"));
							// We set a delay to shutdown the server because of players who still here :(
							TaskManager.runTaskLater(new Runnable() {
								@Override
								public void run() {
									Bukkit.shutdown();
								}
							}, 200);
						}else{
							Bukkit.shutdown();
						}
					}
				}, 200);
				return;
			}
			if (time % 900 == 0 || time % 600 == 0 || time % 300 == 0 || time % 120 == 0 || time % 60 == 0 || time % 30 == 0 || time % 15 == 0 || time % 10 == 0 || time % 5 == 0 || time % 4 == 0 || time % 3 == 0 || time % 2 == 0 || time % 1 == 0) {
				if (time <= 30) {
					// Don't accept connections anymore
					GameAPI.getAPI().setWhitelistStatus(true);
				}
				if (time > 60) {
					GameAPI.i18n().broadcast("hub.reboot.reboot_minutes", time / 60);
				}else if (time == 60) {
					GameAPI.i18n().broadcast("hub.reboot.reboot_minute");
				}else if (time > 1) {
					GameAPI.i18n().broadcast("hub.reboot.reboot_seconds", time);
				}else{
					GameAPI.i18n().broadcast("hub.reboot.reboot_second");
				}
			}
			time--;
			return;
		}
		double tps = GameAPI.getAPI().getGameServer().getPassmarkTps();
		if (tps <= 18 && laggy != -1) {
			laggy++;
			if (laggy >= 60) {
				laggy = -1;
			}
			return;
		}else{
			if (laggy > 0)
				laggy--;
		}
	}

}

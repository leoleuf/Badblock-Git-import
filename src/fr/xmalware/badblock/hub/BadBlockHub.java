package fr.xmalware.badblock.hub;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Server;
import org.bukkit.World;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Animals;
import org.bukkit.entity.Creature;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.entity.Villager.Profession;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;

import com.google.gson.Gson;

import fr.badblock.gameapi.GameAPI;
import fr.badblock.gameapi.fakeentities.FakeEntity;
import fr.badblock.gameapi.packets.watchers.WatcherVillager;
import fr.xmalware.badblock.hub.commands.AdminCommand;
import fr.xmalware.badblock.hub.commands.MTPCommand;
import fr.xmalware.badblock.hub.commands.SpawnCommand;
import fr.xmalware.badblock.hub.inventories.hubchanger.HubChangerInventory;
import fr.xmalware.badblock.hub.listeners.AsyncChatListener;
import fr.xmalware.badblock.hub.listeners.BlockBreakListener;
import fr.xmalware.badblock.hub.listeners.BlockBurnListener;
import fr.xmalware.badblock.hub.listeners.BlockDamageListener;
import fr.xmalware.badblock.hub.listeners.BlockIgniteListener;
import fr.xmalware.badblock.hub.listeners.BlockPlaceListener;
import fr.xmalware.badblock.hub.listeners.CreatureSpawnListener;
import fr.xmalware.badblock.hub.listeners.EntityCombustListener;
import fr.xmalware.badblock.hub.listeners.EntityDamageListener;
import fr.xmalware.badblock.hub.listeners.EntityExplodeListener;
import fr.xmalware.badblock.hub.listeners.FoodLevelChangeListener;
import fr.xmalware.badblock.hub.listeners.HangingBreakByEntityListener;
import fr.xmalware.badblock.hub.listeners.InventoryClickListener;
import fr.xmalware.badblock.hub.listeners.NoMeltListener;
import fr.xmalware.badblock.hub.listeners.PermissionEntityListener;
import fr.xmalware.badblock.hub.listeners.PlayerBedEnterListener;
import fr.xmalware.badblock.hub.listeners.PlayerDropItemListener;
import fr.xmalware.badblock.hub.listeners.PlayerFakeEntityInteractListener;
import fr.xmalware.badblock.hub.listeners.PlayerInteractEntityListener;
import fr.xmalware.badblock.hub.listeners.PlayerInteractListener;
import fr.xmalware.badblock.hub.listeners.PlayerJoinListener;
import fr.xmalware.badblock.hub.listeners.PlayerMoveListener;
import fr.xmalware.badblock.hub.listeners.PlayerPickupItemListener;
import fr.xmalware.badblock.hub.listeners.PlayerPortalListener;
import fr.xmalware.badblock.hub.listeners.PlayerQuitListener;
import fr.xmalware.badblock.hub.listeners.SoilChangeListener;
import fr.xmalware.badblock.hub.listeners.WeatherChangeListener;
import fr.xmalware.badblock.hub.objects.HubPlayer;
import fr.xmalware.badblock.hub.permissions.AbstractPermissions;
import fr.xmalware.badblock.hub.rabbit.HubPacketListener;
import fr.xmalware.badblock.hub.rabbit.HubPacketThread;
import fr.xmalware.badblock.hub.riders.MountManager;
import fr.xmalware.badblock.hub.utils.ConfigUtils;
import fr.xmalware.badblock.hub.utils.Cuboid;
import fr.xmalware.badblock.rabbitconnector.RabbitConnector;
import fr.xmalware.badblock.rabbitconnector.RabbitService;
import lombok.Getter;
import lombok.Setter;

@Getter @Setter public class BadBlockHub extends JavaPlugin {

	@Getter @Setter private static BadBlockHub			instance;
	public Map<String,  String>				  			teamsPrefix    = new HashMap<>();
	public Map<String,  String>  						teamsGroup     = new HashMap<>();
	public Cuboid										cuboid;
	public RabbitConnector								rabbitConnector;
	public RabbitService								rabbitService;
	public Gson											gson;
	public HubPacketThread								hubPacketThread;
	public List<FakeEntity<?				>>			fakeEntities;
	
	@Override
	public void onEnable() {
		setInstance(this);
		new MountManager();
		getServer().getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");
		AbstractPermissions.init();
		this.setGson(new Gson());
		this.setFakeEntities(new ArrayList<>());
		FakeEntity<WatcherVillager> fakeEntity = GameAPI.getAPI().spawnFakeLivingEntity(ConfigUtils.getLocation(BadBlockHub.getInstance(), "worldspawn"), EntityType.VILLAGER, WatcherVillager.class);
		fakeEntity.getWatchers().setCustomName("Jean-Victime");
		fakeEntity.getWatchers().setArrowsInEntity(32);
		fakeEntity.getWatchers().setProfession(Profession.LIBRARIAN);
		this.getFakeEntities().add(fakeEntity);	
		this.setRabbitConnector(RabbitConnector.getInstance());
		this.setRabbitService(this.getRabbitConnector().getService("default"));
		this.setHubPacketThread(new HubPacketThread(this.getRabbitService()));
		HubChangerInventory.get(HubChangerInventory.class);
		new HubPacketListener();
		Location loc1 = ConfigUtils.getLocation(this, "limit.loc1");
		Location loc2 = ConfigUtils.getLocation(this, "limit.loc2");
		if (loc1 != null && loc2 != null) {
			loc1.setY(0);
			loc2.setY(256);
			this.setCuboid(new Cuboid(loc1, loc2));
		}
		getCommand("admin").setExecutor(new AdminCommand());
		getCommand("spawn").setExecutor(new SpawnCommand());
		getCommand("mtp").setExecutor(new MTPCommand());
		this.reloadConfig();
		Server server = this.getServer();
		for (World world : server.getWorlds())
			for (Entity entity : world.getEntitiesByClasses(Animals.class, Creature.class))
				entity.remove();
		// World time
		for(World w : Bukkit.getWorlds()) {
			w.setFullTime(0);
			w.setPVP(false);
			w.setStorm(false);
			w.setThunderDuration(0);
			w.setThundering(false);
			w.setWeatherDuration(0);
			w.setTime(0);
		}
		// Registering all events
		PluginManager pluginManager = server.getPluginManager();
		pluginManager.registerEvents(new AsyncChatListener(), this);
		pluginManager.registerEvents(new BlockBreakListener(), this);
		pluginManager.registerEvents(new BlockBurnListener(), this);
		pluginManager.registerEvents(new BlockIgniteListener(), this);
		pluginManager.registerEvents(new BlockDamageListener(), this);
		pluginManager.registerEvents(new BlockPlaceListener(), this);
		pluginManager.registerEvents(new CreatureSpawnListener(), this);
		pluginManager.registerEvents(new EntityCombustListener(), this);
		pluginManager.registerEvents(new EntityDamageListener(), this);
		pluginManager.registerEvents(new EntityExplodeListener(), this);
		pluginManager.registerEvents(new FoodLevelChangeListener(), this);
		pluginManager.registerEvents(new HangingBreakByEntityListener(), this);
		pluginManager.registerEvents(new InventoryClickListener(), this);
		pluginManager.registerEvents(new NoMeltListener(), this);
		pluginManager.registerEvents(new PermissionEntityListener(), this);
		pluginManager.registerEvents(new PlayerBedEnterListener(), this);
		pluginManager.registerEvents(new PlayerInteractEntityListener(), this);
		pluginManager.registerEvents(new PlayerDropItemListener(), this);
		pluginManager.registerEvents(new PlayerInteractListener(), this);
		pluginManager.registerEvents(new PlayerInteractEntityListener(), this);
		pluginManager.registerEvents(new PlayerJoinListener(), this);
		pluginManager.registerEvents(new PlayerMoveListener(), this);
		pluginManager.registerEvents(new PlayerPickupItemListener(), this);
		pluginManager.registerEvents(new PlayerPortalListener(), this);
		pluginManager.registerEvents(new PlayerQuitListener(), this);
		pluginManager.registerEvents(new SoilChangeListener(), this);
		pluginManager.registerEvents(new WeatherChangeListener(), this);
		pluginManager.registerEvents(new PlayerFakeEntityInteractListener(), this);
		// Reload players
		
		
		for (Player player : server.getOnlinePlayers()) PlayerJoinListener.load(HubPlayer.get(player), null);
	}

	@Override
	public void reloadConfig() {
		super.reloadConfig();
		FileConfiguration config = this.getConfig();
		for (String string : config.getStringList("groupsOrder")) {
			String[] splitter = string.split(":");
			teamsGroup.put(splitter[0], splitter[1]);
			teamsPrefix.put(splitter[0], "hub.group." + splitter[1] + ".prefix");
		}
	}

	@Override
	public void onDisable() {
		this.getRabbitService().remove();
	}

}

package fr.xmalware.badblock.hub.rabbitmq;

import java.util.HashMap;
import java.util.Map;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;

import fr.badblock.gameapi.players.BadblockPlayer;
import fr.badblock.permissions.PermissionManager;
import fr.badblock.rabbitconnector.RabbitPacketType;
import fr.badblock.rabbitconnector.RabbitService;
import fr.badblock.utils.Encodage;
import fr.xmalware.badblock.hub.BadBlockHub;

public class HubPacketThread implements Runnable {

	public static boolean opened = true;
	private RabbitService rabbitService;

	public HubPacketThread(RabbitService rabbitService) {
		this.rabbitService = rabbitService;
		Bukkit.getScheduler().runTaskTimer(BadBlockHub.getInstance(), this, 0, 20L);
	}

	@Override
	public void run() {
		sendPacket();
	}

	private static int id = 0;

	public void sendPacket() {
		Map<String, Integer> ranks = new HashMap<>();
		id = 0;
		Map<String, String> order = new HashMap<>();
		PermissionManager.getInstance().getGroups().stream().sorted((a, b) -> { return Integer.compare(b.getPower(), a.getPower()); }).forEach(group -> {
			String d = generateForId(id) + "";
			order.put(group.getName(), d);
			System.out.println(group.getName() + " > " + d);
			id++;
		});
		for (Player player : Bukkit.getOnlinePlayers()) {
			BadblockPlayer bPlayer = (BadblockPlayer) player;
			System.out.println(bPlayer.getName() + " > " + bPlayer.getMainGroup());
			if (!ranks.containsKey(bPlayer.getMainGroup()))
				ranks.put(order.get(bPlayer.getMainGroup()), 1);
			else
				ranks.put(order.get(bPlayer.getMainGroup()), ranks.get(order.get(bPlayer.getMainGroup())) + 1);
		}
		rabbitService.sendPacket("hub",
				BadBlockHub.getInstance().getGson()
				.toJson(new HubAliveFactory(Bukkit.getServerName(), Bukkit.getOnlinePlayers().size(),
						Bukkit.getMaxPlayers(), opened, ranks)),
				Encodage.UTF8, RabbitPacketType.PUBLISHER, 5000, false);
	}

	private char generateForId(int id){
		int A = 'A';

		if(id > 26){
			A   = 'a';
			id -= 26;

			return (char) (A + id);
		} else {
			return (char) (A + id);
		}
	}

}

package fr.xmalware.badblock.hub.objects;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.UUID;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.scoreboard.Scoreboard;
import org.bukkit.scoreboard.Team;

import fr.xmalware.badblock.hub.BadBlockHub;
import fr.xmalware.badblock.hub.permissions.AbstractPermissions;
import lombok.Getter;
import lombok.Setter;
import net.md_5.bungee.api.ChatColor;

@Getter @Setter public class HubPlayer {
	
	private static HashMap<UUID, HubPlayer> players		=	new HashMap<>();
	
	// Basic informations
	private Player							  player;
	private UUID					   		  uuid;
	private String					   		  name;
	private boolean					   		  isDead;
	private List<String>					  friends;
	public Scoreboard		 				  scoreboard;
	public Map<String, Team> 				  teams   		= new HashMap<>();
	
	// AntiUseSpam
	private	long							  antiSpamClicked;
	private	long							  bigAntiSpamClicked;

	private	boolean							  admin;

	private Location						  loc1;
	private Location						  loc2;
	
	public HubPlayer(Player player) {
		this.setPlayer(player);
		this.setUuid(player.getUniqueId());
		this.setName(player.getName());
		this.setFriends(new ArrayList<>());
		players.put(this.getUuid(), this);
		scoreboard = Bukkit.getScoreboardManager().getNewScoreboard();
		BadBlockHub instance = BadBlockHub.getInstance();
		for (Entry<String, String> entry : instance.teamsGroup.entrySet()) {
			Team team = scoreboard.registerNewTeam(entry.getKey() + "");
			team.setPrefix(ChatColor.translateAlternateColorCodes('&', instance.teamsPrefix.get(entry.getKey())));
			teams.put(entry.getKey(), team);
		}
		player.setScoreboard(scoreboard);
		
		for (Player plo : Bukkit.getOnlinePlayers()) {
			HubPlayer tb = HubPlayer.get(plo);
			String o = "A";
			String pl = tb.getGroup();
			for (Entry<String, String> entry : instance.teamsGroup.entrySet())
				if (entry.getValue().equals(pl))
					o = entry.getKey();
			Team team = teams.get(o);
			if (team != null) {
				if (!team.hasPlayer(plo))
					team.addPlayer(plo);
			}
		}
		Bukkit.getScheduler().runTaskTimer(BadBlockHub.getInstance(), new Runnable() {
			@Override
			public void run() {
				if (!isOnline()) return;
				player.setFireTicks(0);
			}
		}, 20, 20);
	}
	
	public void update() {
		BadBlockHub instance = BadBlockHub.getInstance();
		String o = "A";
		for (Entry<String, String> entry : instance.teamsGroup.entrySet())
			if (entry.getValue().equals(getGroup()))
				o = entry.getKey();
		Team teamz = teams.get(o);
		String prefix = teamz.getPrefix();
		// envoi d'une update aux scoreboards des autres pour lui
		for (Player plo : Bukkit.getOnlinePlayers()) {
			HubPlayer tb = HubPlayer.get(plo);
			for (Team team : tb.teams.values()) team.removePlayer(player);
			Team team = tb.teams.get(o);
			if (team != null) {
				if (!team.hasPlayer(player))
					team.addPlayer(player);
			}
		}
	}
	
	public String getGroup() {
		if (!isOnline()) return null;
		return AbstractPermissions.getPermissions().getGroup(player);
	}
	
	public String getPrefix() {
		if (!isOnline()) return null;
		return AbstractPermissions.getPermissions().getPrefix(player);
	}
	
	public String getSuffix() {
		if (!isOnline()) return null;
		return AbstractPermissions.getPermissions().getSuffix(player);
	}
	
	public boolean hasPermission(String permission) {
		if (!isOnline()) return false;
		return player.hasPermission(permission);
	}
	
	public boolean isOnline() {
		return !isDead && player != null && player.isOnline();
	}
	
	public void use() {
		long time = System.currentTimeMillis();
		this.setAntiSpamClicked(time + 500);
		this.setBigAntiSpamClicked(time + 200);
	}
	
	public boolean hasSpam() {
		long time = System.currentTimeMillis();
		if (this.getBigAntiSpamClicked() >= time) return true;
		if (this.getAntiSpamClicked() >= time) {
			this.getPlayer().sendMessage("Â§cVeuillez patienter entre chaque interaction.");
			this.setBigAntiSpamClicked(time + 200);
			return true;
		}
		use();
		return false;
	}
	
	public void remove() {
		this.setDead(true);
		players.remove(this.getUuid());
	}
	
	public static HubPlayer get(Player player) {
		return !players.containsKey(player.getUniqueId()) ? new HubPlayer(player) : players.get(player.getUniqueId());
	}
	
}

package fr.xmalware.badblock.hub.objects;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;
import java.util.UUID;

import org.bukkit.Bukkit;
import org.bukkit.DyeColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.craftbukkit.v1_8_R3.entity.CraftEntity;
import org.bukkit.craftbukkit.v1_8_R3.entity.CraftPlayer;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.entity.EntityTargetEvent.TargetReason;
import org.bukkit.scoreboard.Team;

import fr.badblock.gameapi.GameAPI;
import fr.badblock.gameapi.players.BadblockPlayer;
import fr.badblock.gameapi.players.data.InGameData;
import fr.badblock.gameapi.players.scoreboard.BadblockScoreboardGenerator;
import fr.badblock.gameapi.utils.entities.CustomCreature;
import fr.badblock.gameapi.utils.entities.CustomCreature.CreatureBehaviour;
import fr.badblock.gameapi.utils.general.Callback;
import fr.badblock.gameapi.utils.threading.TaskManager;
import fr.badblock.gameapi.utils.threading.TempScheduler;
import fr.xmalware.badblock.hub.BadBlockHub;
import fr.xmalware.badblock.hub.effectlib.Effect;
import fr.xmalware.badblock.hub.inventories.abstracts.inventories.CustomInventory;
import fr.xmalware.badblock.hub.inventories.cosmetics.chests.ChestLoader;
import fr.xmalware.badblock.hub.inventories.cosmetics.chests.ChestOpener;
import fr.xmalware.badblock.hub.inventories.cosmetics.chests.CustomChest;
import fr.xmalware.badblock.hub.inventories.cosmetics.chests.CustomChestType;
import fr.xmalware.badblock.hub.inventories.cosmetics.metamorphosis.parent.MetamorphosisItem;
import fr.xmalware.badblock.hub.inventories.cosmetics.mounts.defaults.MountItem;
import fr.xmalware.badblock.hub.inventories.cosmetics.particles.defaults.ParticleItem;
import fr.xmalware.badblock.hub.inventories.cosmetics.particles.utils.Wings;
import lombok.Getter;
import lombok.Setter;
import net.minecraft.server.v1_8_R3.EntityInsentient;

@Getter
@Setter
public class HubPlayer implements InGameData {

	public static int a;
	static {
		Bukkit.getScheduler().runTaskTimer(BadBlockHub.getInstance(), new Runnable() {
			@Override
			public void run() {
				GameAPI.getAPI().getLadderDatabase().sendPing(new String[] { "*" }, new Callback<Integer>() {
					@Override
					public void done(Integer arg0, Throwable arg1) {
						a = arg0;
					}
				});
			}
		}, 0, 5);
	}

	public static HubPlayer get(BadblockPlayer player) {
		return player.inGameData(HubPlayer.class);
	}

	public static HubPlayer get(Player player) {
		return get((BadblockPlayer) player);
	}

	// AntiUseSpam
	private long antiSpamClicked;

	private long bigAntiSpamClicked;
	public MountItem clickedMountItem;
	// Inventories
	public CustomInventory currentInventory;
	// Disguise
	public MetamorphosisItem disguise;

	public DyeColor dyeColor;
	private List<String> friends;

	public CustomCreature lastCreature;

	public long lastMount;

	public long lastVipCuboid;
	public long lastSendVipMessage;
	public long lastGetAwaySendMessage;

	public MountItem mounted;

	private BadblockScoreboardGenerator scoreboard;

	// Mount
	public LivingEntity mountEntity;

	public Map<String, Team> teams = new HashMap<>();

	public long teleportMount;

	// Particles
	public List<Effect> particles = new ArrayList<>();
	public ParticleItem clickedParticleItem;

	// Basic informations
	private UUID uuid;
	
	// data en vrac
	private ChestOpener chestOpener;
	private boolean		chestFreeze;
	private Location	chestFreezeLocation;

	public HubPlayer() {
		this.setFriends(new ArrayList<>());
	}

	public boolean hasSpam(BadblockPlayer player) {
		long time = System.currentTimeMillis();
		if (this.getBigAntiSpamClicked() >= time)
			return true;
		if (this.getAntiSpamClicked() >= time) {
			player.sendTranslatedMessage("hub.spam.waitbetweeneachinteraction");
			this.setBigAntiSpamClicked(time + 200);
			return true;
		}
		use();
		return false;
	}

	public void updateScoreboard() {
		this.getScoreboard().generate();
	}

	public void load(BadblockPlayer player) {
		BadBlockHub hub = BadBlockHub.getInstance();
		Bukkit.getScheduler().scheduleSyncRepeatingTask(hub, new Runnable() {
			@SuppressWarnings("deprecation")
			@Override
			public void run() {
				if (getLastVipCuboid() != -1 && getLastVipCuboid() < System.currentTimeMillis()) {
					setLastVipCuboid(-1);
					hub.getNpcxMalware().setHeadYaw(hub.getNpcxMalwareNormal().getYaw());
					hub.getNpcLeLanN().setHeadYaw(hub.getNpcLeLanNNormal().getYaw());
					hub.getVipPortalCuboid().getBlocks().parallelStream()
					.filter(block -> block.getType().equals(Material.AIR))
					.forEach(block -> player.sendBlockChange(block.getLocation(), Material.AIR, (byte) 0));
				}
				// VÃ©rification du dernier coffre gratuit
				for (CustomChestType chestType : ChestLoader.getInstance().getChests()) {
					if (chestType.getGiveEachSeconds() <= -1) continue;
					HubStoredPlayer hubStoredPlayer = HubStoredPlayer.get(player);
					boolean has = false;
					for (CustomChest customChest : hubStoredPlayer.getChests())
						if (customChest.getTypeId() == chestType.getId() && !customChest.isOpened()) 
							has = true;
					if (has) continue;
					if (!hubStoredPlayer.getLastGivenChests().containsKey(chestType.getId()) || (hubStoredPlayer.getLastGivenChests().containsKey(chestType.getId()) && hubStoredPlayer.getLastGivenChests().get(chestType.getId()) + (chestType.getGiveEachSeconds() * 1000L) < System.currentTimeMillis())) {
						hubStoredPlayer.getLastGivenChests().put(chestType.getId(), System.currentTimeMillis());
						hubStoredPlayer.getChests().add(new CustomChest(chestType.getId(), false));
						player.sendTranslatedMessage("hub.chests.youhavereceivednewchest", player.getTranslatedMessage("hub.chests." + chestType.getId() + ".name")[0]);
					}
				}
			}
		}, 0, 40);
		HubStoredPlayer hubStoredPlayer = HubStoredPlayer.get(player);
		if (hubStoredPlayer.getMountConfigs() == null)
			hubStoredPlayer.setMountConfigs(new TreeMap<>());
		if (hubStoredPlayer.getParticleConfigs() == null)
			hubStoredPlayer.setParticleConfigs(new TreeMap<>());
		Bukkit.getScheduler().runTaskTimer(BadBlockHub.getInstance(), new Runnable() {
			@Override
			public void run() {
				player.setFireTicks(0);
				BadblockPlayer bbPlayer = player;
				List<String> strings = Arrays
						.asList(GameAPI.i18n().get(bbPlayer.getPlayerData().getLocale(), "hub.actionbar"));
				String o = strings.get(new Random().nextInt(strings.size()));
				bbPlayer.sendActionBar(o);
				String finalString = "";
				Iterator<String> iterator = Arrays
						.asList(GameAPI.i18n().get(bbPlayer.getPlayerData().getLocale(), "hub.tablist.header"))
						.iterator();
				while (iterator.hasNext()) {
					finalString += iterator.next() + (iterator.hasNext() ? System.lineSeparator() : "");
				}
				String finalString2 = "";
				iterator = Arrays.asList(GameAPI.i18n().get(bbPlayer.getPlayerData().getLocale(), "hub.tablist.footer"))
						.iterator();
				while (iterator.hasNext()) {
					finalString2 += iterator.next() + (iterator.hasNext() ? System.lineSeparator() : "");
				}
				bbPlayer.sendTabHeader(finalString.replace("%0", Integer.toString(a)).replace("%1", player.getName()),
						finalString2.replace("%0", Integer.toString(a)).replace("%1", player.getName()));
				String finalString3 = "";
				iterator = Arrays.asList(player.getTranslatedMessage("hub.bossbar")).iterator();
				while (iterator.hasNext()) {
					finalString3 += iterator.next() + (iterator.hasNext() ? System.lineSeparator() : "");
				}
				bbPlayer.sendBossBar(finalString3.replace("%0", Integer.toString(a)).replace("%1", player.getName()));
			}
		}, 0, 5);
		TempScheduler tempScheduler = new TempScheduler();
		tempScheduler.task = TaskManager.scheduleAsyncRepeatingTask(player.getName() + "_funmode", new Runnable() {
			@SuppressWarnings("deprecation")
			@Override
			public void run() {
				if (mountEntity != null && mountEntity.isValid()) {
					HubPlayer hubPlayer = HubPlayer.get(player);
					MountItem mountItem = hubPlayer.getClickedMountItem();
					if (mountItem == null)
						return;
					HubStoredPlayer hubStoredPlayer = HubStoredPlayer.get(player);
					if (hubPlayer.getLastCreature() != null) {
						if (hubStoredPlayer.getMountConfigs().containsKey(mountItem.getName())) {
							if (!hubStoredPlayer.getMountConfigs().get(mountItem.getName()).isBaby()) {
								if (player.getVehicle() == null
										|| (player.getVehicle() != null && !player.getVehicle().isValid())) {
									mountEntity.remove();
								}
								if (hubStoredPlayer.getMountConfigs().get(mountItem.getName()).isBaby()) {
									EntityInsentient entityInsentient = ((EntityInsentient) ((CraftEntity) (mountEntity))
											.getHandle());
									entityInsentient.setGoalTarget(((CraftPlayer) player).getHandle(),
											TargetReason.TARGET_ATTACKED_ENTITY, false);
								}
								if (hubStoredPlayer.getMountConfigs().get(mountItem.getName()).isPegasus()
										&& mountItem.hasPegasusMode()) {
									if (!mountEntity.isOnGround())
										Wings.SpawnWings2(mountEntity, hubPlayer, player);
									hubPlayer.getLastCreature().setCreatureBehaviour(CreatureBehaviour.FLYING);
								} else
									hubPlayer.getLastCreature().setCreatureBehaviour(CreatureBehaviour.NORMAL);
								if (hubStoredPlayer.getMountConfigs().get(mountItem.getName()).isReverse()) {
									mountEntity.setCustomName("Dinnerbone");
									mountEntity.setCustomNameVisible(false);
								} else {
									mountEntity.setCustomName(player.getName());
									mountEntity.setCustomNameVisible(false);
								}
							} else
								hubPlayer.getLastCreature().setCreatureBehaviour(CreatureBehaviour.NORMAL);
							if (mountEntity.isOnGround()) {
								if (mountItem.hasFunMode()) {
									if (hubStoredPlayer.getMountConfigs().containsKey(mountItem.getName())) {
										if (hubStoredPlayer.getMountConfigs().get(mountItem.getName()).isFunMode()) {
											Location location = mountEntity.getLocation().clone();
											SecureRandom secureRandom = new SecureRandom();
											for (int x = -2; x < 2; x++) {
												for (int z = -2; z < 2; z++) {
													Block block = location.clone().add(x, -1, z).getBlock();
													if (block.getType().equals(Material.AIR))
														continue;
													if (block.getType().name().contains("SLAB")
															|| block.getType().name().contains("STAIR")
															|| block.getType().name().contains("STEP"))
														continue;
													for (Player p : Bukkit.getOnlinePlayers())
														p.sendBlockChange(location.clone().add(x, -1, z),
																Material.STAINED_CLAY, (byte) secureRandom.nextInt(16));
													final int finalX = x;
													final int finalZ = z;
													Bukkit.getScheduler().runTaskLater(BadBlockHub.getInstance(),
															new Runnable() {
														@Override
														public void run() {
															for (Player p : Bukkit.getOnlinePlayers())
																p.sendBlockChange(
																		location.clone().add(finalX, -1,
																				finalZ),
																		block.getType(), block.getData());
														}
													}, 40);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}, 1, 1);
	}

	public void use() {
		long time = System.currentTimeMillis();
		this.setAntiSpamClicked(time + 500);
		this.setBigAntiSpamClicked(time + 200);
	}

}

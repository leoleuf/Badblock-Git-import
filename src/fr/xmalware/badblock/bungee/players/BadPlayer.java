package fr.xmalware.badblock.bungee.players;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.bson.BSONObject;

import com.google.gson.JsonObject;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;

import fr.toenga.common.tech.mongodb.MongoService;
import fr.toenga.common.utils.bungee.Punished;
import fr.toenga.common.utils.general.GsonUtils;
import fr.toenga.common.utils.i18n.I18n;
import fr.toenga.common.utils.i18n.Locale;
import fr.toenga.common.utils.permissions.Permissible;
import fr.toenga.common.utils.permissions.PermissionsManager;
import fr.xmalware.badblock.bungee.BadBungee;
import fr.xmalware.badblock.bungee.utils.ObjectUtils;
import lombok.Data;
import lombok.EqualsAndHashCode;
import net.md_5.bungee.api.ChatColor;
import net.md_5.bungee.api.connection.PendingConnection;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.api.event.PreLoginEvent;

@EqualsAndHashCode(callSuper = false)
@Data
public class BadPlayer
{

	private static Map<String, BadPlayer> maps 			= new HashMap<>();
	
	private PendingConnection	pendingConnection;
	private PreLoginEvent		preLoginEvent;
	private BSONObject	  		dbObject;
	private Permissible			permissions;
	private Punished			punished;
	
	public BadPlayer(PreLoginEvent preLoginEvent, PendingConnection pendingConnection)
	{
		setPreLoginEvent(preLoginEvent);
		setPendingConnection(pendingConnection);
		loadData();
		put();
	}
	
	private void put()
	{
		maps.put(pendingConnection.getName(), this);
		BadBungee.log(ChatColor.GREEN + getPendingConnection().getName() + " is now connected.");
	}	
	
	public void remove()
	{
		maps.remove(pendingConnection.getName());
		BadBungee.log(ChatColor.RED + getPendingConnection().getName() + " is now disconnected.");
	}
	
	public String[] getTranslatedMessages(String key, Object... objects)
	{
		return I18n.getInstance().get(getLocale(), key, objects);
	}
	
	public boolean hasPermission(String permission)
	{
		return getPermissions().hasPermission(permission);
	}
	
	public JsonObject getJsonObject(String part)
	{
		//FIXME vraiment pas optimisé, à voir si il y a mieux
			
		if(dbObject.containsField(part))
		{
			String value = dbObject.get(part).toString();
			return GsonUtils.getPrettyGson().fromJson(value, JsonObject.class);
		}
		else
		{
			return new JsonObject();
		}
	}
	
	private void loadData()
	{
		MongoService mongoService = BadBungee.getInstance().getMongoService();
		DB db = mongoService.getDb();
		DBCollection collection = db.getCollection("players");
		BasicDBObject query = new BasicDBObject();

		query.put("name", getPendingConnection().getName().toLowerCase());
		
		DBCursor cursor = collection.find(query); 
		boolean find = cursor.hasNext();
		
		if (find)
		{
			setDbObject(cursor.next());
			BadBungee.log("§c" + getPendingConnection().getName() + " exists in the player table.");
			
			permissions = PermissionsManager.getManager().loadPermissible( getJsonObject("permissions") );
			punished = Punished.fromJson( getJsonObject("punish") );
		}
		else
		{
			// Le joueur n'existe pas
			punished = new Punished();
			permissions = new Permissible();
			
			BadBungee.log(getPendingConnection().getName() + " doesn't exist in the player table.");
			BadBungee.log("§aCreating it...");
			
			BasicDBObject obj = getSavedObject();
			
			setDbObject(obj);
			collection.insert(obj);
			
			BadBungee.log("§aCreated!");
		}
	}
	
	public BasicDBObject getSavedObject()
	{
		BasicDBObject object = new BasicDBObject();
		
		object.put("name", getPendingConnection().getName().toLowerCase());
		object.put("realName", getPendingConnection().getName());
		object.put("lastIp", getPendingConnection().getAddress().getAddress().getHostAddress());
		object.put("uniqueId", UUID.randomUUID().toString());
		object.put("version", getPendingConnection().getVersion());
		// FIXME
		
		return object;
	}
	
	public Locale getLocale()
	{
		return ObjectUtils.getOr(getDbObject(), "locale", Locale.FRENCH_FRANCE);
	}

	public static BadPlayer get(ProxiedPlayer bPlayer)
	{
		return maps.getOrDefault(bPlayer.getName(), null);
	}
	
}
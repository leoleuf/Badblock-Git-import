package fr.xmalware.badblock.bungee.players;

import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.UUID;

import org.bson.BSONObject;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;

import fr.toenga.common.tech.mongodb.MongoService;
import fr.toenga.common.utils.bungee.Punished;
import fr.toenga.common.utils.permissions.PermissionUser;
import fr.xmalware.badblock.bungee.BadBungee;
import fr.xmalware.badblock.bungee.utils.ObjectUtils;
import i18n.I18n;
import i18n.LocaleUtils;
import lombok.Data;
import lombok.EqualsAndHashCode;
import net.md_5.bungee.api.ChatColor;
import net.md_5.bungee.api.connection.PendingConnection;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.api.event.PreLoginEvent;

@EqualsAndHashCode(callSuper = false)
@Data
public class BadPlayer
{

	private static Map<String, BadPlayer> maps 			= new HashMap<>();
	
	private PendingConnection	pendingConnection;
	private PreLoginEvent		preLoginEvent;
	private BSONObject	  		dbObject;
	private PermissionUser		permissions;
	
	public BadPlayer(PreLoginEvent preLoginEvent, PendingConnection pendingConnection)
	{
		setPreLoginEvent(preLoginEvent);
		setPendingConnection(pendingConnection);
		loadData();
		put();
	}
	
	private void put()
	{
		maps.put(pendingConnection.getName(), this);
		BadBungee.log(ChatColor.GREEN + getPendingConnection().getName() + " is now connected.");
	}	
	
	public void remove()
	{
		maps.remove(pendingConnection.getName());
		BadBungee.log(ChatColor.RED + getPendingConnection().getName() + " is now disconnected.");
	}
	
	public String getTranslatedMessage(String key, Object... objects)
	{
		return I18n.getMessage(getLocale(), key, objects);
	}
	
	public Punished getPunished()
	{
		if (dbObject == null) return null;
		return Punished.fromJson(dbObject);
	}
	
	public boolean hasPermission(String permission)
	{
		return getPermissions().hasPermission(permission);
	}
	
	private void loadData()
	{
		MongoService mongoService = BadBungee.getInstance().getMongoService();
		DB db = mongoService.getDb();
		DBCollection collection = db.getCollection("players");
		BasicDBObject query = new BasicDBObject();
		query.put("name", getPendingConnection().getName().toLowerCase());
		DBCursor cursor = collection.find(query); 
		boolean find = false;
		while (cursor.hasNext()) {
		    setDbObject(cursor.next());
		    find = true;
		}
		setPermissions(PermissionUser.toObject(getDbObject()));
		if (!find)
		{
			// Le joueur n'existe pas
			BadBungee.log(getPendingConnection().getName() + " doesn't exist in the player table.");
			BadBungee.log("§aCreating it...");
			BasicDBObject object = new BasicDBObject();
			object.put("name", getPendingConnection().getName().toLowerCase());
			object.put("realName", getPendingConnection().getName());
			object.put("lastIp", getPendingConnection().getAddress().getAddress().getHostAddress());
			object.put("uniqueId", UUID.randomUUID().toString());
			object.put("version", getPendingConnection().getVersion());
			collection.insert(object);
			setDbObject(object);
			BadBungee.log("§aCreated!");
		}
		else
		{
			BadBungee.log("§c" + getPendingConnection().getName() + " exists in the player table.");
		}
	}
	
	public Locale getLocale()
	{
		return ObjectUtils.getOr(getDbObject(), "locale", LocaleUtils.defaultLocale);
	}

	public static BadPlayer get(ProxiedPlayer bPlayer)
	{
		return maps.getOrDefault(bPlayer.getName(), null);
	}
	
}
package fr.xmalware.badblock.bungee;

import java.io.File;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import fr.toenga.common.tech.mongodb.MongoConnector;
import fr.toenga.common.tech.mongodb.MongoService;
import fr.toenga.common.tech.rabbitmq.RabbitConnector;
import fr.toenga.common.tech.rabbitmq.RabbitService;
import fr.toenga.common.utils.general.FileUtils;
import fr.toenga.common.utils.permissions.PermissionManager;
import fr.xmalware.badblock.bungee.config.BadBungeeConfig;
import fr.xmalware.badblock.bungee.config.ConfigLoader;
import fr.xmalware.badblock.bungee.link.bungee.BungeeTask;
import fr.xmalware.badblock.bungee.utils.PackageUtils;
import i18n.I18n;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import net.md_5.bungee.api.ProxyServer;
import net.md_5.bungee.api.plugin.Plugin;

@EqualsAndHashCode(callSuper = false)
@Data
public class BadBungee extends Plugin {

	@Getter@Setter private static BadBungee instance;

	private RabbitService	rabbitService;
	private MongoService	mongoService;
	private BadBungeeConfig	config;
	private Gson		 	gson;
	private Gson		 	prettyGson;

	@Override
	public void onEnable()
	{
		// Set instance
		instance = this;
		// Load gson
		setGson(new Gson());
		// Load pretty gson
		setPrettyGson(new GsonBuilder().setPrettyPrinting().create());
		// Load config
		setConfig(new ConfigLoader().load());
		// Load i18n
		loadI18n();
		// Load rabbit service
		rabbitService = RabbitConnector.getInstance().registerService(new RabbitService("default", getConfig().getRabbitSettings()));
		// Load mongo service
		mongoService = MongoConnector.getInstance().registerService(new MongoService("default", getConfig().getMongoSettings()));
		// Creating bungee task
		new BungeeTask();
		// Loading listeners
		try
		{
			PackageUtils.instanciateListeners(this,
					"fr.xmalware.badblock.bungee.listeners", // Bungee listeners
					"fr.xmalware.badblock.bungee.rabbit.listeners", // Rabbit listeners
					"fr.xmalware.badblock.bungee._plugins.checkLogin",
					"fr.xmalware.badblock.bungee._plugins.punishments"
					);
		}
		catch (IOException exception)
		{
			exception.printStackTrace();
		}
		// Permissions
		File file = new File(getDataFolder(), "permissions");
		if (!file.exists())
		{
			file.mkdirs();
		}
		for (File folder : file.listFiles())
		{
			try {
				String fileName = folder.getName();
				int pos = fileName.lastIndexOf(".");
				if (pos > 0) {
					fileName = fileName.substring(0, pos);
				}
				PermissionManager.load(fileName, FileUtils.readFile(folder));
			} catch (IOException exception) {
				exception.printStackTrace();
			}
		}
	}

	private void loadI18n() {
		File i18n = new File(getDataFolder(), "i18n/");
		try {
			I18n.loadI18n(i18n);
		} catch (Exception exception) {
			exception.printStackTrace();
		}
	}

	@Override
	public void onDisable()
	{

	}

	@SuppressWarnings("deprecation")
	public static void log(String message)
	{
		ProxyServer.getInstance().getConsole().sendMessage("§e[BadBungee] §f" + message);
	}

}

package fr.xmalware.badblock.bungee._plugins.checkLogin;

import fr.toenga.common.utils.bungee.Punished;
import fr.xmalware.badblock.bungee.events.PlayerJoinEvent;
import fr.xmalware.badblock.bungee.listeners.abstracts.BadListener;
import fr.xmalware.badblock.bungee.players.BadPlayer;
import net.md_5.bungee.event.EventHandler;
import net.md_5.bungee.event.EventPriority;

public class LoginBannedListener extends BadListener
{

	/**
	 * LadderPlayer    player = new LadderPlayer(this, packet);
		PlayerJoinEvent event  = new PlayerJoinEvent(player, this);

		if(Proxy.getInstance().getMaxPlayers() > 0 && Proxy.getInstance().getBungeeOnlineCount() >= Proxy.getInstance().getMaxPlayers() && !player.hasPermission("ladder.maxplayer.bypass")){
			player.disconnect("§cLe serveur est plein, l'accès est réservé aux VIP.");
		}

		Ladder.getInstance().getPluginsManager().dispatchEvent(event);

		player.getPunished().checkEnd();
		player.getIpAsPunished().checkEnd();

		if(player.getPunished().isBan()){
			player.disconnect(buildBanReason(player.getName(), player.getPunished().getBanEnd(), player.getPunished().getBanReason())); return;
		} else if((player.getIpData()).getAsPunished().isBan()){
			player.disconnect(buildBanReason(player.getName(), player.getIpData().getAsPunished().getBanEnd(), player.getIpData().getAsPunished().getBanReason())); return;
		}

		if(event.isCancelled()) {
			player.disconnect(event.getCancelReason()); return;
		} else {
			loginPlayer.put(player.getName().toLowerCase(), player);
			sendPacket(new PacketPlayerNickSet(player.getName(), player.getUniqueId(), player.getName()));
			sendPacket(new PacketPlayerData(DataType.PLAYER, DataAction.SEND, packet.getPlayerName(), player.getData().toString()));
			sendPacket(new PacketPlayerData(DataType.IP, DataAction.SEND, packet.getPlayerName(), player.getIpData().getData().toString()));
			//if (Proxy.getInstance().getRabbitService() != null)
			//	Proxy.getInstance().getRabbitService().sendPacket("ladder.playersupdate", Integer.toString(Ladder.getInstance().getOnlinePlayers().size()), Encodage.UTF8, RabbitPacketType.PUBLISHER, 5000, false);
		}
		//}
		//	});
	 * @param event
	 * 
	 * -----------------------------
	 * 
	 * Steps:
	 * 
	 * Check : serveur plein
	 * Check : fin des sanctions
	 * Check : punishcancel => ban
	 * Envoi des données
	 * Téléportation à un serveur
	 * 
	 * 
	 */

	@EventHandler (priority = EventPriority.HIGHEST)
	public void onPlayerJoinEvent(PlayerJoinEvent event)
	{
		BadPlayer badPlayer = event.getBadPlayer();
		Punished punished = badPlayer.getPunished();
		// Check end
		punished.checkEnd();
		if (punished.isBan())
		{
			String result = "";
			for (String string : badPlayer.getTranslatedMessages("punishments.ban", 
					punished.buildBanTime(badPlayer.getLocale()),
					punished.getBanReason()))
			{
				result += string;
			}
			event.cancel(result);
		}
	}

}